Time	Sum	Command
1374	7691	> builtin source /usr/local/Cellar/fish/2.1.2/share/fish/config.fish 2>/dev/null
130	130	-> set -g IFS \n\ \t
77	77	-> set -l configdir ~/.config
42	42	-> if set -q XDG_CONFIG_HOME
40	40	-> if not set -q fish_function_path
147	147	-> set fish_function_path $configdir/fish/functions    $__fish_sysconfdir/functions    $__fish_datadir/functions
28	28	-> end
135	135	-> if not contains $__fish_datadir/functions $fish_function_path
296	296	-> if not set -q fish_complete_path
103	103	-> set fish_complete_path $configdir/fish/completions  $__fish_sysconfdir/completions  $__fish_datadir/completions $configdir/fish/generated_completions
13	13	-> end
75	75	-> if not contains $__fish_datadir/completions $fish_complete_path
66	66	-> if test -d /usr/xpg4/bin
83	83	-> set -g __fish_tmp_path $PATH
34	34	-> function __fish_load_path_helper_paths
45	45	-> test -r /etc/paths ; 
228	2088	-> and __fish_load_path_helper_paths < /etc/paths 
99	99	--> set __fish_tmp_path $__fish_tmp_path[-1..1] 
98	98	--> while read -l new_path_comp
88	185	--> set -l where (contains -i $new_path_comp $__fish_tmp_path)
97	97	---> contains -i $new_path_comp $__fish_tmp_path
58	58	--> and set -e __fish_tmp_path[$where]
86	86	--> set __fish_tmp_path $new_path_comp $__fish_tmp_path
10	10	--> end
51	51	--> while read -l new_path_comp
61	147	--> set -l where (contains -i $new_path_comp $__fish_tmp_path)
86	86	---> contains -i $new_path_comp $__fish_tmp_path
50	50	--> and set -e __fish_tmp_path[$where]
85	85	--> set __fish_tmp_path $new_path_comp $__fish_tmp_path
10	10	--> end
44	44	--> while read -l new_path_comp
60	147	--> set -l where (contains -i $new_path_comp $__fish_tmp_path)
87	87	---> contains -i $new_path_comp $__fish_tmp_path
50	50	--> and set -e __fish_tmp_path[$where]
102	102	--> set __fish_tmp_path $new_path_comp $__fish_tmp_path
9	9	--> end
43	43	--> while read -l new_path_comp
50	118	--> set -l where (contains -i $new_path_comp $__fish_tmp_path)
68	68	---> contains -i $new_path_comp $__fish_tmp_path
39	39	--> and set -e __fish_tmp_path[$where]
66	66	--> set __fish_tmp_path $new_path_comp $__fish_tmp_path
8	8	--> end
37	37	--> while read -l new_path_comp
47	114	--> set -l where (contains -i $new_path_comp $__fish_tmp_path)
67	67	---> contains -i $new_path_comp $__fish_tmp_path
39	39	--> and set -e __fish_tmp_path[$where]
66	66	--> set __fish_tmp_path $new_path_comp $__fish_tmp_path
8	8	--> end
24	24	--> while read -l new_path_comp
67	67	--> set __fish_tmp_path $__fish_tmp_path[-1..1]
291	291	-> for pathfile in /etc/paths.d/* ; 
119	571	-> __fish_load_path_helper_paths < $pathfile ; 
71	71	--> set __fish_tmp_path $__fish_tmp_path[-1..1] 
52	52	--> while read -l new_path_comp
49	123	--> set -l where (contains -i $new_path_comp $__fish_tmp_path)
74	74	---> contains -i $new_path_comp $__fish_tmp_path
40	40	--> and set -e __fish_tmp_path[$where]
66	66	--> set __fish_tmp_path $new_path_comp $__fish_tmp_path
8	8	--> end
25	25	--> while read -l new_path_comp
67	67	--> set __fish_tmp_path $__fish_tmp_path[-1..1]
12	12	-> end
113	572	-> __fish_load_path_helper_paths < $pathfile ; 
69	69	--> set __fish_tmp_path $__fish_tmp_path[-1..1] 
63	63	--> while read -l new_path_comp
49	122	--> set -l where (contains -i $new_path_comp $__fish_tmp_path)
73	73	---> contains -i $new_path_comp $__fish_tmp_path
40	40	--> and set -e __fish_tmp_path[$where]
66	66	--> set __fish_tmp_path $new_path_comp $__fish_tmp_path
8	8	--> end
25	25	--> while read -l new_path_comp
66	66	--> set __fish_tmp_path $__fish_tmp_path[-1..1]
12	12	-> end
110	563	-> __fish_load_path_helper_paths < $pathfile ; 
69	69	--> set __fish_tmp_path $__fish_tmp_path[-1..1] 
58	58	--> while read -l new_path_comp
49	121	--> set -l where (contains -i $new_path_comp $__fish_tmp_path)
72	72	---> contains -i $new_path_comp $__fish_tmp_path
40	40	--> and set -e __fish_tmp_path[$where]
67	67	--> set __fish_tmp_path $new_path_comp $__fish_tmp_path
8	8	--> end
24	24	--> while read -l new_path_comp
66	66	--> set __fish_tmp_path $__fish_tmp_path[-1..1]
10	10	-> end
68	68	-> set -xg PATH $__fish_tmp_path
22	22	-> set -e __fish_tmp_path
45	45	-> functions -e __fish_load_path_helper_paths
39	39	-> function __fish_reconstruct_path -d "Update PATH when fish_user_paths changes" --on-variable fish_user_paths
142	595	-> __fish_reconstruct_path
65	65	--> set -l local_path $PATH
19	19	--> set -l x
138	138	--> for x in $__fish_added_user_paths
118	118	--> set -e __fish_added_user_paths
29	29	--> for x in $fish_user_paths[-1..1]
84	84	--> set -xg PATH $local_path
55	55	-> function fish_sigtrap_handler --on-signal TRAP --no-scope-shadowing --description "Signal handler for the TRAP signal. Launches a debug prompt."
24	24	-> function __fish_on_interactive --on-event fish_prompt
36	36	-> function . --description 'Evaluate contents of file (deprecated, see "source")' --no-scope-shadowing
303	357	> builtin source /usr/local/Cellar/fish/2.1.2/etc/fish/config.fish 2>/dev/null
54	54	-> if status --is-login
659	15545	> builtin source /Users/Imran/.config/fish/config.fish 2>/dev/null
85	890	--> . /usr/local/Cellar/fish/2.1.2/share/fish/functions/alias.fish
21	21	---> if begin
78	151	---> test (count $argv) -eq 0
73	73	----> count $argv
38	38	---> and tty 0>&0 >/dev/null
13	13	---> end
509	571	---> source $argv
62	62	----> function alias --description "Legacy function for creating shellscript functions using an alias-like syntax"
11	11	---> end
810	810	--> if count $argv >/dev/null
48	48	--> switch $argv[1]
9	9	--> end
30	30	--> set -l name
22	22	--> set -l body
22	22	--> set -l prefix
60	106	--> switch (count $argv)
46	46	---> count $argv
31	31	--> set name $argv[1]
30	30	--> set body $argv[2]
12	12	--> case \*
26	26	--> switch $body
249	2619	--> eval "function $name; $prefix $body \$argv; end"
75	629	---> . /usr/local/Cellar/fish/2.1.2/share/fish/functions/eval.fish
18	18	----> if begin
57	93	----> test (count $argv) -eq 0
36	36	-----> count $argv
18	18	----> and tty 0>&0 >/dev/null
12	12	----> end
354	402	----> source $argv
48	48	-----> function eval -S -d "Evaluate parameters as a command"
11	11	----> end
24	24	---> set -l mode
27	27	---> if status --is-interactive-job-control
22	22	---> set mode interactive
9	9	---> else
22	22	---> if status --is-interactive
19	19	---> status --job-control full
29	29	---> end
1146	1337	---> echo "begin; $argv "\n" ;end eval2_inner <&3 3<&-" | source 3<&0
120	191	----> begin; function cdd;  ~/Desktop/ $argv; end 
29	29	-----> begin
26	26	-----> function cdd;  
16	16	-----> end 
82	82	---> set -l res $status
151	151	---> status --job-control $mode
19	19	---> return $res
405	3189	-> alias cls "clear"
675	675	--> if count $argv >/dev/null
47	47	--> switch $argv[1]
9	9	--> end
27	27	--> set -l name
20	20	--> set -l body
22	22	--> set -l prefix
58	96	--> switch (count $argv)
38	38	---> count $argv
29	29	--> set name $argv[1]
30	30	--> set body $argv[2]
13	13	--> case \*
25	25	--> switch $body
187	1791	--> eval "function $name; $prefix $body \$argv; end"
23	23	---> set -l mode
28	28	---> if status --is-interactive-job-control
22	22	---> set mode interactive
10	10	---> else
23	23	---> if status --is-interactive
20	20	---> status --job-control full
22	22	---> end
1061	1246	---> echo "begin; $argv "\n" ;end eval2_inner <&3 3<&-" | source 3<&0
104	185	----> begin; function cls;  clear $argv; end 
39	39	-----> begin
26	26	-----> function cls;  
16	16	-----> end 
84	84	---> set -l res $status
105	105	---> status --job-control $mode
21	21	---> return $res
394	3227	-> alias showall "defaults write com.apple.finder AppleShowAllFiles YES"
727	727	--> if count $argv >/dev/null
56	56	--> switch $argv[1]
9	9	--> end
27	27	--> set -l name
20	20	--> set -l body
22	22	--> set -l prefix
76	121	--> switch (count $argv)
45	45	---> count $argv
31	31	--> set name $argv[1]
29	29	--> set body $argv[2]
15	15	--> case \*
25	25	--> switch $body
182	1751	--> eval "function $name; $prefix $body \$argv; end"
21	21	---> set -l mode
25	25	---> if status --is-interactive-job-control
21	21	---> set mode interactive
9	9	---> else
26	26	---> if status --is-interactive
19	19	---> status --job-control full
21	21	---> end
1008	1216	---> echo "begin; $argv "\n" ;end eval2_inner <&3 3<&-" | source 3<&0
125	208	----> begin; function showall;  defaults write com.apple.finder AppleShowAllFiles YES $argv; end 
31	31	-----> begin
33	33	-----> function showall;  
19	19	-----> end 
72	72	---> set -l res $status
107	107	---> status --job-control $mode
32	32	---> return $res
397	2982	-> alias hideall "defaults write com.apple.finder AppleShowAllFiles NO"
683	683	--> if count $argv >/dev/null
65	65	--> switch $argv[1]
9	9	--> end
25	25	--> set -l name
20	20	--> set -l body
20	20	--> set -l prefix
56	98	--> switch (count $argv)
42	42	---> count $argv
36	36	--> set name $argv[1]
29	29	--> set body $argv[2]
11	11	--> case \*
25	25	--> switch $body
168	1564	--> eval "function $name; $prefix $body \$argv; end"
22	22	---> set -l mode
27	27	---> if status --is-interactive-job-control
20	20	---> set mode interactive
9	9	---> else
22	22	---> if status --is-interactive
18	18	---> status --job-control full
20	20	---> end
916	1119	---> echo "begin; $argv "\n" ;end eval2_inner <&3 3<&-" | source 3<&0
121	203	----> begin; function hideall;  defaults write com.apple.finder AppleShowAllFiles NO $argv; end 
37	37	-----> begin
28	28	-----> function hideall;  
17	17	-----> end 
59	59	---> set -l res $status
62	62	---> status --job-control $mode
18	18	---> return $res
149	149	-> set -x LS_COLORS 'no=00;38;5;244:rs=0:di=00;38;5;33:ln=01;38;5;33:mh=00:pi=48;5;230;38;5;136;01:so=48;5;230;38;5;136;01:do=48;5;230;38;5;136;01:bd=48;5;230;38;5;244;01:cd=48;5;230;38;5;244;01:or=48;5;235;38;5;160:su=48;5;160;38;5;230:sg=48;5;136;38;5;230:ca=30;41:tw=48;5;64;38;5;230:ow=48;5;235;38;5;33:st=48;5;33;38;5;230:ex=01;38;5;64:*.tar=00;38;5;61:*.tgz=01;38;5;61:*.arj=01;38;5;61:*.taz=01;38;5;61:*.lzh=01;38;5;61:*.lzma=01;38;5;61:*.tlz=01;38;5;61:*.txz=01;38;5;61:*.zip=01;38;5;61:*.z=01;38;5;61:*.Z=01;38;5;61:*.dz=01;38;5;61:*.gz=01;38;5;61:*.lz=01;38;5;61:*.xz=01;38;5;61:*.bz2=01;38;5;61:*.bz=01;38;5;61:*.tbz=01;38;5;61:*.tbz2=01;38;5;61:*.tz=01;38;5;61:*.deb=01;38;5;61:*.rpm=01;38;5;61:*.jar=01;38;5;61:*.rar=01;38;5;61:*.ace=01;38;5;61:*.zoo=01;38;5;61:*.cpio=01;38;5;61:*.7z=01;38;5;61:*.rz=01;38;5;61:*.apk=01;38;5;61:*.jpg=00;38;5;136:*.JPG=00;38;5;136:*.jpeg=00;38;5;136:*.gif=00;38;5;136:*.bmp=00;38;5;136:*.pbm=00;38;5;136:*.pgm=00;38;5;136:*.ppm=00;38;5;136:*.tga=00;38;5;136:*.xbm=00;38;5;136:*.xpm=00;38;5;136:*.tif=00;38;5;136:*.tiff=00;38;5;136:*.png=00;38;5;136:*.svg=00;38;5;136:*.svgz=00;38;5;136:*.mng=00;38;5;136:*.pcx=00;38;5;136:*.dl=00;38;5;136:*.xcf=00;38;5;136:*.xwd=00;38;5;136:*.yuv=00;38;5;136:*.cgm=00;38;5;136:*.emf=00;38;5;136:*.eps=00;38;5;136:*.pdf=01;38;5;245:*.tex=01;38;5;245:*.rdf=01;38;5;245:*.owl=01;38;5;245:*.n3=01;38;5;245:*.tt=01;38;5;245:*.nt=01;38;5;245:*.log=00;38;5;240:*.bak=00;38;5;240:*.aux=00;38;5;240:*.bbl=00;38;5;240:*.blg=00;38;5;240:*.aac=00;38;5;166:*.au=00;38;5;166:*.flac=00;38;5;166:*.mid=00;38;5;166:*.midi=00;38;5;166:*.mka=00;38;5;166:*.mp3=00;38;5;166:*.mpc=00;38;5;166:*.ogg=00;38;5;166:*.ra=00;38;5;166:*.wav=00;38;5;166:*.axa=00;38;5;166:*.oga=00;38;5;166:*.spx=00;38;5;166:*.xspf=00;38;5;166:*.mov=01;38;5;166:*.mpg=01;38;5;166:*.mpeg=01;38;5;166:*.m2v=01;38;5;166:*.mkv=01;38;5;166:*.ogm=01;38;5;166:*.mp4=01;38;5;166:*.m4v=01;38;5;166:*.mp4v=01;38;5;166:*.vob=01;38;5;166:*.qt=01;38;5;166:*.nuv=01;38;5;166:*.wmv=01;38;5;166:*.asf=01;38;5;166:*.rm=01;38;5;166:*.rmvb=01;38;5;166:*.flc=01;38;5;166:*.avi=01;38;5;166:*.fli=01;38;5;166:*.flv=01;38;5;166:*.gl=01;38;5;166:*.axv=01;38;5;166:*.anx=01;38;5;166:*.ogv=01;38;5;166:*.ogx=01;38;5;166:'
159	159	-> set -e LSCOLORS
47	47	-> function fish_prompt
35	35	> echo $_ " "; 
77	2548	-> . /usr/local/Cellar/fish/2.1.2/share/fish/functions/__fish_pwd.fish
16	16	--> if begin
55	96	--> test (count $argv) -eq 0
41	41	---> count $argv
18	18	--> and tty 0>&0 >/dev/null
11	11	--> end
253	2320	--> source $argv
78	2026	---> switch (uname)
1948	1948	----> uname
30	30	---> function __fish_pwd --description "Show current path"
11	11	---> end
10	10	--> end
59	59	-> pwd
86	8135	> __fish_on_interactive
82	2316	--> . /usr/local/Cellar/fish/2.1.2/share/fish/functions/__fish_config_interactive.fish
22	22	---> if begin
55	94	---> test (count $argv) -eq 0
39	39	----> count $argv
19	19	---> and tty 0>&0 >/dev/null
12	12	---> end
1953	2075	---> source $argv
122	122	----> function __fish_config_interactive -d "Initializations that should be performed when entering interactive mode"
12	12	---> end
112	112	--> if set -q __fish_config_interactive_done
26	26	--> set -g __fish_config_interactive_done
31	31	--> set -l configdir ~/.config
24	24	--> if set -q XDG_CONFIG_HOME
44	44	--> if not set -q __fish_init_1_22_0
43	43	--> if not set -q __fish_init_1_50_0
63	63	--> if functions -q fish_greeting
24	24	--> if set -q fish_greeting
28	28	--> switch "$fish_greeting"
47	47	--> echo $fish_greeting
10	10	--> end
8	8	--> end
7	7	--> end
40	40	--> function __fish_repaint --on-variable fish_color_cwd --description "Event handler, repaints the prompt when fish_color_cwd changes"
38	38	--> function __fish_repaint_root --on-variable fish_color_cwd_root --description "Event handler, repaints the prompt when fish_color_cwd_root changes"
76	76	--> complete -x -p "/etc/init.d/*" -a start --description 'Start service'
41	41	--> complete -x -p "/etc/init.d/*" -a stop --description 'Stop service'
40	40	--> complete -x -p "/etc/init.d/*" -a status --description 'Print service status'
41	41	--> complete -x -p "/etc/init.d/*" -a restart --description 'Stop and then start service'
39	39	--> complete -x -p "/etc/init.d/*" -a reload --description 'Reload service configuration'
27	27	--> if not set -q fish_key_bindings
41	41	--> function __fish_reload_key_bindings -d "Reload key bindings when binding variable change" --on-variable fish_key_bindings
73	3647	--> __fish_reload_key_bindings
47	47	---> if test "$fish_key_bindings" = fish_default_key_bindings
75	1219	----> . /usr/local/Cellar/fish/2.1.2/share/fish/functions/fish_default_key_bindings.fish
22	22	-----> if begin
53	88	-----> test (count $argv) -eq 0
35	35	------> count $argv
18	18	-----> and tty 0>&0 >/dev/null
12	12	-----> end
918	992	-----> source $argv
74	74	------> function fish_default_key_bindings -d "Default (Emacs-like) key bindings for fish"
12	12	-----> end
42	42	----> bind --erase --all
22	22	----> bind "" self-insert
20	20	----> bind \n execute
20	20	----> bind \ck kill-line
18	18	----> bind \cy yank
19	19	----> bind \t complete
25	25	----> bind \e\n "commandline -i \n"
20	20	----> bind \e\[A up-or-search
20	20	----> bind \e\[B down-or-search
24	24	----> bind -k down down-or-search
25	25	----> bind -k up up-or-search
22	22	----> bind \e\[C forward-char
20	20	----> bind \e\[D backward-char
20	20	----> bind -k right forward-char
20	20	----> bind -k left backward-char
20	20	----> bind -k dc delete-char
21	21	----> bind -k backspace backward-delete-char
24	24	----> bind \x7f backward-delete-char
21	21	----> bind \e\[H beginning-of-line
20	20	----> bind \e\[F end-of-line
28	28	----> bind -k home beginning-of-line 2> /dev/null
23	23	----> bind -k end end-of-line 2> /dev/null
26	26	----> bind \e\[3\;2~ backward-delete-char # Mavericks Terminal.app shift-delete
21	21	----> bind \e\eOC nextd-or-forward-word
21	21	----> bind \e\eOD prevd-or-backward-word
22	22	----> bind \e\e\[C nextd-or-forward-word
22	22	----> bind \e\e\[D prevd-or-backward-word
20	20	----> bind \eO3C nextd-or-forward-word
21	21	----> bind \eO3D prevd-or-backward-word
22	22	----> bind \e\[3C nextd-or-forward-word
21	21	----> bind \e\[3D prevd-or-backward-word
24	24	----> bind \e\[1\;3C nextd-or-forward-word
24	24	----> bind \e\[1\;3D prevd-or-backward-word
33	33	----> bind \e\eOA history-token-search-backward
21	21	----> bind \e\eOB history-token-search-forward
22	22	----> bind \e\e\[A history-token-search-backward
21	21	----> bind \e\e\[B history-token-search-forward
21	21	----> bind \eO3A history-token-search-backward
20	20	----> bind \eO3B history-token-search-forward
22	22	----> bind \e\[3A history-token-search-backward
21	21	----> bind \e\[3B history-token-search-forward
25	25	----> bind \e\[1\;3A history-token-search-backward
28	28	----> bind \e\[1\;3B history-token-search-forward
21	21	----> bind \ca beginning-of-line
19	19	----> bind \ce end-of-line
20	20	----> bind \ey yank-pop
19	19	----> bind \ch backward-delete-char
20	20	----> bind \cw backward-kill-word
20	20	----> bind \cp history-search-backward
20	20	----> bind \cn history-search-forward
20	20	----> bind \cf forward-char
20	20	----> bind \cb backward-char
20	20	----> bind \ct transpose-chars
20	20	----> bind \et transpose-words
20	20	----> bind \eu upcase-word
20	20	----> bind \ec capitalize-word
21	21	----> bind \e\x7f backward-kill-word
20	20	----> bind \eb backward-word
21	21	----> bind \ef forward-word
24	24	----> bind \e\[1\;5C forward-word
24	24	----> bind \e\[1\;5D backward-word
29	29	----> bind \e\[1\;9A history-token-search-backward # iTerm2
25	25	----> bind \e\[1\;9B history-token-search-forward # iTerm2
25	25	----> bind \e\[1\;9C forward-word #iTerm2
24	24	----> bind \e\[1\;9D backward-word #iTerm2
20	20	----> bind \ed forward-kill-word
43	43	----> bind -k ppage beginning-of-history
22	22	----> bind -k npage end-of-history
21	21	----> bind \e\< beginning-of-buffer
20	20	----> bind \e\> end-of-buffer
20	20	----> bind \el __fish_list_current_token
29	29	----> bind \ew 'set tok (commandline -pt); if test $tok[1]; echo; whatis $tok[1]; commandline -f repaint; end'
26	26	----> bind \cl 'clear; commandline -f repaint'
25	25	----> bind \cc 'commandline ""'
20	20	----> bind \cu backward-kill-line
19	19	----> bind \ed kill-word
20	20	----> bind \cw backward-kill-path-component
34	34	----> bind \ed 'set -l cmd (commandline); if test -z "$cmd"; echo; dirh; commandline -f repaint; else; commandline -f kill-word; end'
21	21	----> bind \cd delete-or-exit
26	26	----> bind \ep '__fish_paginate'
32	32	----> switch "$TERM"
58	58	---> if functions --query fish_user_key_bindings > /dev/null
9	9	---> else
26	26	--> function __fish_winch_handler --on-signal winch
102	102	--> if test "$VTE_VERSION" -ge 3405
33	33	--> function __fish_command_not_found_setup --on-event fish_command_not_found
27	27	-> functions -e __fish_on_interactive
327	39304	> fish_prompt
36	36	-> set -l last_status $status
81	81	-> if not set -q __fish_prompt_hostname
125	692	---> . /usr/local/Cellar/fish/2.1.2/share/fish/functions/hostname.fish
31	31	----> if begin
82	142	----> test (count $argv) -eq 0
60	60	-----> count $argv
28	28	----> and tty 0>&0 >/dev/null
20	20	----> end
275	335	----> source $argv
47	47	-----> set -q USERDOMAIN
13	13	-----> and switch (uname)
11	11	----> end
17	17	-> end
127	127	-> if not set -q __fish_prompt_char
98	1797	-> switch (id -u)
1699	1699	--> id -u
41	41	-> set -g __fish_prompt_char '>'
13	13	-> end
11	11	-> end
69	134	-> set -l normal (set_color normal)
65	65	--> set_color normal
93	121	-> set -l red (set_color red)
28	28	--> set_color red
97	142	-> set -l cyan (set_color cyan)
45	45	--> set_color cyan
88	131	-> set -l white (set_color white)
43	43	--> set_color white
89	131	-> set -l gray (set_color -o cyan)
42	42	--> set_color -o cyan
89	132	-> set -l brwhite (set_color -o white)
43	43	--> set_color -o white
43	43	-> set -g __fish_git_prompt_showdirtystate true
41	41	-> set -g __fish_git_prompt_showuntrackedfiles true
50	50	-> set -g __fish_git_prompt_showstashstate true
40	40	-> set -g __fish_git_prompt_color green
42	42	-> set -g __fish_git_prompt_color_flags red
51	51	-> set -l pcolor $gray
53	53	-> if test $last_status -ne 0
207	11393	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
127	4315	---> . /usr/local/Cellar/fish/2.1.2/share/fish/functions/prompt_pwd.fish
28	28	----> if begin
82	136	----> test (count $argv) -eq 0
54	54	-----> count $argv
27	27	----> and tty 0>&0 >/dev/null
18	18	----> end
536	3959	----> source $argv
129	3328	-----> switch (uname)
3199	3199	------> uname
62	62	-----> function prompt_pwd --description "Print the current working directory, shortened to fit the prompt"
33	33	-----> case 'CYGWIN_*'
20	20	----> end
6656	6656	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
705	15343	-> __fish_git_prompt
94	12409	--> . /usr/local/Cellar/fish/2.1.2/share/fish/functions/__fish_git_prompt.fish
22	22	---> if begin
61	107	---> test (count $argv) -eq 0
46	46	----> count $argv
19	19	---> and tty 0>&0 >/dev/null
13	13	---> end
6589	12143	---> source $argv
121	121	----> function __fish_git_prompt_show_upstream --description "Helper function for __fish_git_prompt"
83	83	----> function __fish_git_prompt --description "Prompt function for Git"
47	47	----> function __fish_git_prompt_staged --description "__fish_git_prompt helper, tells whether or not the current branch has staged files"
37	37	----> function __fish_git_prompt_dirty --description "__fish_git_prompt helper, tells whether or not the current branch has tracked, modified files"
48	48	----> set -g ___fish_git_prompt_status_order stagedstate invalidstate dirtystate untrackedfiles
35	35	----> function  __fish_git_prompt_informative_status
67	67	----> function __fish_git_prompt_operation_branch_bare --description "__fish_git_prompt helper, returns the current Git operation and branch"
29	29	----> function __fish_git_prompt_set_char
40	40	----> function __fish_git_prompt_validate_chars --description "__fish_git_prompt helper, checks char variables"
34	34	----> function __fish_git_prompt_set_color
47	47	----> function __fish_git_prompt_validate_colors --description "__fish_git_prompt helper, checks color variables"
28	28	----> set -l varargs
41	41	----> for var in repaint describe_style show_informative_status showdirtystate showstashstate showuntrackedfiles showupstream
43	43	----> set varargs $varargs --on-variable __fish_git_prompt_$var
13	13	----> end
58	58	----> set varargs $varargs --on-variable __fish_git_prompt_$var
13	13	----> end
67	67	----> set varargs $varargs --on-variable __fish_git_prompt_$var
13	13	----> end
79	79	----> set varargs $varargs --on-variable __fish_git_prompt_$var
13	13	----> end
88	88	----> set varargs $varargs --on-variable __fish_git_prompt_$var
13	13	----> end
164	164	----> set varargs $varargs --on-variable __fish_git_prompt_$var
19	19	----> end
123	123	----> set varargs $varargs --on-variable __fish_git_prompt_$var
13	13	----> end
122	122	----> function __fish_git_prompt_repaint $varargs --description "Event handler, repaints prompt when functionality changes"
36	36	----> set -l varargs
59	59	----> for var in '' _prefix _suffix _bare _merging _cleanstate _invalidstate _upstream _flags _branch _dirtystate _stagedstate _branch_detached _stashstate _untrackedfiles
41	41	----> set varargs $varargs --on-variable __fish_git_prompt_color$var
13	13	----> end
51	51	----> set varargs $varargs --on-variable __fish_git_prompt_color$var
12	12	----> end
61	61	----> set varargs $varargs --on-variable __fish_git_prompt_color$var
12	12	----> end
71	71	----> set varargs $varargs --on-variable __fish_git_prompt_color$var
12	12	----> end
84	84	----> set varargs $varargs --on-variable __fish_git_prompt_color$var
12	12	----> end
95	95	----> set varargs $varargs --on-variable __fish_git_prompt_color$var
12	12	----> end
103	103	----> set varargs $varargs --on-variable __fish_git_prompt_color$var
12	12	----> end
111	111	----> set varargs $varargs --on-variable __fish_git_prompt_color$var
12	12	----> end
125	125	----> set varargs $varargs --on-variable __fish_git_prompt_color$var
12	12	----> end
144	144	----> set varargs $varargs --on-variable __fish_git_prompt_color$var
12	12	----> end
152	152	----> set varargs $varargs --on-variable __fish_git_prompt_color$var
13	13	----> end
154	154	----> set varargs $varargs --on-variable __fish_git_prompt_color$var
13	13	----> end
160	160	----> set varargs $varargs --on-variable __fish_git_prompt_color$var
12	12	----> end
179	179	----> set varargs $varargs --on-variable __fish_git_prompt_color$var
13	13	----> end
181	181	----> set varargs $varargs --on-variable __fish_git_prompt_color$var
12	12	----> end
195	195	----> set varargs $varargs --on-variable __fish_git_prompt_showcolorhints
203	203	----> function __fish_git_prompt_repaint_color $varargs --description "Event handler, repaints prompt when any color changes"
25	25	----> set -l varargs
47	47	----> for var in cleanstate dirtystate invalidstate stagedstate stashstate stateseparator untrackedfiles upstream_ahead upstream_behind upstream_diverged upstream_equal upstream_prefix
40	40	----> set varargs $varargs --on-variable __fish_git_prompt_char_$var
12	12	----> end
50	50	----> set varargs $varargs --on-variable __fish_git_prompt_char_$var
12	12	----> end
65	65	----> set varargs $varargs --on-variable __fish_git_prompt_char_$var
12	12	----> end
73	73	----> set varargs $varargs --on-variable __fish_git_prompt_char_$var
12	12	----> end
82	82	----> set varargs $varargs --on-variable __fish_git_prompt_char_$var
12	12	----> end
96	96	----> set varargs $varargs --on-variable __fish_git_prompt_char_$var
12	12	----> end
119	119	----> set varargs $varargs --on-variable __fish_git_prompt_char_$var
13	13	----> end
120	120	----> set varargs $varargs --on-variable __fish_git_prompt_char_$var
13	13	----> end
134	134	----> set varargs $varargs --on-variable __fish_git_prompt_char_$var
14	14	----> end
161	161	----> set varargs $varargs --on-variable __fish_git_prompt_char_$var
13	13	----> end
160	160	----> set varargs $varargs --on-variable __fish_git_prompt_char_$var
13	13	----> end
169	169	----> set varargs $varargs --on-variable __fish_git_prompt_char_$var
12	12	----> end
176	176	----> function __fish_git_prompt_repaint_char $varargs --description "Event handler, repaints prompt when any char changes"
11	11	---> end
107	2174	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2067	2067	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
42	42	--> test -n "$repo_info"; 
13	13	--> or return
18	18	-> if begin
2266	4904	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
78	2638	--> . /usr/local/Cellar/fish/2.1.2/share/fish/functions/grep.fish
17	17	---> if begin
55	91	---> test (count $argv) -eq 0
36	36	----> count $argv
16	16	---> and tty 0>&0 >/dev/null
11	11	---> end
253	2413	---> source $argv
2160	2160	----> if command grep --color=auto --help 1>/dev/null 2>/dev/null
12	12	---> end
39	39	-> end
23	23	-> echo
51	51	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
27	27	> echo $_ " "; 
39	88	> __fish_pwd
49	49	-> pwd
128	128	> echo $_ " "; 
101	206	> __fish_pwd
105	105	-> pwd
203	4398	> cls
4195	4195	-> clear $argv; 
533	20197	> fish_prompt
124	124	-> set -l last_status $status
75	75	-> if not set -q __fish_prompt_hostname
75	75	-> if not set -q __fish_prompt_char
101	159	-> set -l normal (set_color normal)
58	58	--> set_color normal
84	124	-> set -l red (set_color red)
40	40	--> set_color red
82	119	-> set -l cyan (set_color cyan)
37	37	--> set_color cyan
86	128	-> set -l white (set_color white)
42	42	--> set_color white
81	119	-> set -l gray (set_color -o cyan)
38	38	--> set_color -o cyan
100	161	-> set -l brwhite (set_color -o white)
61	61	--> set_color -o white
62	437	-> set -g __fish_git_prompt_showdirtystate true
179	375	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
44	44	---> if status --is-interactive
72	72	---> if test $argv[3] = __fish_git_prompt_show_informative_status
66	66	---> commandline -f repaint ^/dev/null
14	14	---> end
62	330	-> set -g __fish_git_prompt_showuntrackedfiles true
127	268	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
38	38	---> if status --is-interactive
57	57	---> if test $argv[3] = __fish_git_prompt_show_informative_status
34	34	---> commandline -f repaint ^/dev/null
12	12	---> end
70	345	-> set -g __fish_git_prompt_showstashstate true
126	275	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
44	44	---> if status --is-interactive
57	57	---> if test $argv[3] = __fish_git_prompt_show_informative_status
35	35	---> commandline -f repaint ^/dev/null
13	13	---> end
69	4603	-> set -g __fish_git_prompt_color green
369	4534	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
43	43	---> if status --is-interactive
48	48	---> set -l var $argv[3]
177	177	---> set -e _$var
159	159	---> set -e _{$var}_done
118	118	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
85	85	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
234	234	---> set -e ___fish_git_prompt_color_$name
201	201	---> set -e ___fish_git_prompt_color_{$name}_done
33	33	---> end
165	165	---> set -e ___fish_git_prompt_color_$name
139	139	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
134	134	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
182	182	---> set -e ___fish_git_prompt_color_{$name}_done
30	30	---> end
162	162	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
51	3332	-> set -g __fish_git_prompt_color_flags red
278	3281	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
34	34	---> if status --is-interactive
35	35	---> set -l var $argv[3]
85	85	---> set -e _$var
83	83	---> set -e _{$var}_done
87	87	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
82	82	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
87	87	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
183	183	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
94	94	---> set -e ___fish_git_prompt_color_$name
88	88	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
90	90	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
79	79	---> set -e ___fish_git_prompt_color_$name
82	82	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
9	9	---> end
31	31	---> commandline -f repaint ^/dev/null
9	9	---> end
37	37	-> set -l pcolor $gray
37	37	-> if test $last_status -ne 0
147	3141	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
130	2994	--> prompt_pwd
2864	2864	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
945	3367	-> __fish_git_prompt
101	2364	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2263	2263	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
44	44	--> test -n "$repo_info"; 
14	14	--> or return
20	20	-> if begin
2777	2777	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
30	30	-> end
37	37	-> echo
87	87	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
47	47	> echo $_ " "; 
61	169	> __fish_pwd
108	108	-> pwd
322	18898	> fish_prompt
43	43	-> set -l last_status $status
31	31	-> if not set -q __fish_prompt_hostname
29	29	-> if not set -q __fish_prompt_char
68	103	-> set -l normal (set_color normal)
35	35	--> set_color normal
58	90	-> set -l red (set_color red)
32	32	--> set_color red
69	124	-> set -l cyan (set_color cyan)
55	55	--> set_color cyan
58	84	-> set -l white (set_color white)
26	26	--> set_color white
56	83	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
57	84	-> set -l brwhite (set_color -o white)
27	27	--> set_color -o white
51	344	-> set -g __fish_git_prompt_showdirtystate true
121	293	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
29	29	---> if status --is-interactive
83	83	---> if test $argv[3] = __fish_git_prompt_show_informative_status
43	43	---> commandline -f repaint ^/dev/null
17	17	---> end
73	385	-> set -g __fish_git_prompt_showuntrackedfiles true
149	312	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
45	45	---> if status --is-interactive
64	64	---> if test $argv[3] = __fish_git_prompt_show_informative_status
40	40	---> commandline -f repaint ^/dev/null
14	14	---> end
65	383	-> set -g __fish_git_prompt_showstashstate true
146	318	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
43	43	---> if status --is-interactive
72	72	---> if test $argv[3] = __fish_git_prompt_show_informative_status
41	41	---> commandline -f repaint ^/dev/null
16	16	---> end
49	4116	-> set -g __fish_git_prompt_color green
303	4067	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
31	31	---> if status --is-interactive
36	36	---> set -l var $argv[3]
133	133	---> set -e _$var
131	131	---> set -e _{$var}_done
90	90	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
70	70	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
151	151	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
54	54	---> end
157	157	---> set -e ___fish_git_prompt_color_$name
226	226	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
154	154	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
144	144	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
124	124	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
50	3547	-> set -g __fish_git_prompt_color_flags red
278	3497	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
53	53	---> if status --is-interactive
37	37	---> set -l var $argv[3]
162	162	---> set -e _$var
170	170	---> set -e _{$var}_done
99	99	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
110	110	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
157	157	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
90	90	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
87	87	---> set -e ___fish_git_prompt_color_$name
100	100	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
88	88	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
85	85	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
30	30	---> commandline -f repaint ^/dev/null
10	10	---> end
38	38	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
139	2961	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
78	2822	--> prompt_pwd
2744	2744	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
877	3036	-> __fish_git_prompt
139	2100	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1961	1961	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
46	46	--> test -n "$repo_info"; 
13	13	--> or return
21	21	-> if begin
2886	2886	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
42	42	-> end
46	46	-> echo
62	62	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
47	118	> __fish_pwd
71	71	-> pwd
220	220	> echo $_ " "; 
153	340	> __fish_pwd
187	187	-> pwd
240	12499	-> . /usr/local/Cellar/fish/2.1.2/share/fish/functions/cd.fish
74	74	--> if begin
141	237	--> test (count $argv) -eq 0
96	96	---> count $argv
51	51	--> and tty 0>&0 >/dev/null
35	35	--> end
11755	11837	--> source $argv
82	82	---> function cd --description "Change directory"
25	25	--> end
69	69	-> if status --is-command-substitution
60	60	-> set -l previous $PWD
64	64	-> if test $argv[1] = - ^/dev/null
150	150	-> builtin cd $argv[1]
49	49	-> set -l cd_status $status
81	81	-> if test $cd_status = 0 -a "$PWD" != "$previous"
164	164	-> set -g dirprev $dirprev $previous
142	142	-> set -e dirnext
57	57	-> set -g __fish_cd_direction prev
20	20	-> end
31	31	-> return $cd_status
357	18110	> fish_prompt
48	48	-> set -l last_status $status
44	44	-> if not set -q __fish_prompt_hostname
34	34	-> if not set -q __fish_prompt_char
74	116	-> set -l normal (set_color normal)
42	42	--> set_color normal
66	97	-> set -l red (set_color red)
31	31	--> set_color red
65	99	-> set -l cyan (set_color cyan)
34	34	--> set_color cyan
66	102	-> set -l white (set_color white)
36	36	--> set_color white
65	96	-> set -l gray (set_color -o cyan)
31	31	--> set_color -o cyan
71	105	-> set -l brwhite (set_color -o white)
34	34	--> set_color -o white
51	293	-> set -g __fish_git_prompt_showdirtystate true
113	242	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
33	33	---> if status --is-interactive
49	49	---> if test $argv[3] = __fish_git_prompt_show_informative_status
37	37	---> commandline -f repaint ^/dev/null
10	10	---> end
50	274	-> set -g __fish_git_prompt_showuntrackedfiles true
104	224	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
32	32	---> if status --is-interactive
49	49	---> if test $argv[3] = __fish_git_prompt_show_informative_status
29	29	---> commandline -f repaint ^/dev/null
10	10	---> end
49	274	-> set -g __fish_git_prompt_showstashstate true
110	225	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
30	30	---> if status --is-interactive
46	46	---> if test $argv[3] = __fish_git_prompt_show_informative_status
29	29	---> commandline -f repaint ^/dev/null
10	10	---> end
91	3988	-> set -g __fish_git_prompt_color green
303	3897	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
36	36	---> if status --is-interactive
40	40	---> set -l var $argv[3]
149	149	---> set -e _$var
134	134	---> set -e _{$var}_done
147	147	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
75	75	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
146	146	---> set -e ___fish_git_prompt_color_$name
530	530	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
102	102	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
89	89	---> set -e ___fish_git_prompt_color_$name
90	90	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
90	90	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
84	84	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
9	9	---> end
34	34	---> commandline -f repaint ^/dev/null
10	10	---> end
51	2840	-> set -g __fish_git_prompt_color_flags red
236	2789	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
36	36	---> if status --is-interactive
36	36	---> set -l var $argv[3]
87	87	---> set -e _$var
85	85	---> set -e _{$var}_done
82	82	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
82	82	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
82	82	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
90	90	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
79	79	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
9	9	---> end
29	29	---> commandline -f repaint ^/dev/null
9	9	---> end
36	36	-> set -l pcolor $gray
34	34	-> if test $last_status -ne 0
171	3407	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
97	3236	--> prompt_pwd
3139	3139	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
682	3233	-> __fish_git_prompt
107	2494	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2387	2387	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
44	44	--> test -n "$repo_info"; 
13	13	--> or return
18	18	-> if begin
2497	2497	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
30	30	-> end
32	32	-> echo
56	56	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
47	124	> __fish_pwd
77	77	-> pwd
295	17730	> fish_prompt
48	48	-> set -l last_status $status
31	31	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
70	107	-> set -l normal (set_color normal)
37	37	--> set_color normal
58	85	-> set -l red (set_color red)
27	27	--> set_color red
56	82	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
57	83	-> set -l white (set_color white)
26	26	--> set_color white
85	140	-> set -l gray (set_color -o cyan)
55	55	--> set_color -o cyan
59	88	-> set -l brwhite (set_color -o white)
29	29	--> set_color -o white
53	269	-> set -g __fish_git_prompt_showdirtystate true
100	216	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
32	32	---> if status --is-interactive
46	46	---> if test $argv[3] = __fish_git_prompt_show_informative_status
29	29	---> commandline -f repaint ^/dev/null
9	9	---> end
44	240	-> set -g __fish_git_prompt_showuntrackedfiles true
90	196	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
45	45	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
50	260	-> set -g __fish_git_prompt_showstashstate true
108	210	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
27	27	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
46	3723	-> set -g __fish_git_prompt_color green
268	3677	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
29	29	---> if status --is-interactive
33	33	---> set -l var $argv[3]
150	150	---> set -e _$var
136	136	---> set -e _{$var}_done
94	94	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
48	48	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
116	116	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
98	98	---> set -e ___fish_git_prompt_color_$name
89	89	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
87	87	---> set -e ___fish_git_prompt_color_$name
89	89	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
468	468	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
101	101	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
100	100	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
100	100	---> set -e ___fish_git_prompt_color_$name
101	101	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
139	139	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
89	89	---> set -e ___fish_git_prompt_color_$name
89	89	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
9	9	---> end
31	31	---> commandline -f repaint ^/dev/null
10	10	---> end
48	2846	-> set -g __fish_git_prompt_color_flags red
245	2798	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
37	37	---> if status --is-interactive
35	35	---> set -l var $argv[3]
81	81	---> set -e _$var
84	84	---> set -e _{$var}_done
81	81	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
92	92	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
90	90	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
79	79	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
79	79	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
9	9	---> end
29	29	---> commandline -f repaint ^/dev/null
9	9	---> end
38	38	-> set -l pcolor $gray
35	35	-> if test $last_status -ne 0
150	3431	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
110	3281	--> prompt_pwd
3171	3171	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
682	2758	-> __fish_git_prompt
118	2008	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1890	1890	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
55	55	--> test -n "$repo_info"; 
13	13	--> or return
18	18	-> if begin
3008	3008	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
30	30	-> echo
56	56	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
29	29	> echo $_ " "; 
46	132	> __fish_pwd
86	86	-> pwd
223	1435	-> . /usr/local/Cellar/fish/2.1.2/share/fish/functions/up-or-search.fish
51	51	--> if begin
148	265	--> test (count $argv) -eq 0
117	117	---> count $argv
50	50	--> and tty 0>&0 >/dev/null
32	32	--> end
680	781	--> source $argv
101	101	---> function up-or-search -d "Depending on cursor position and current mode, either search backward or move up one line"
33	33	--> end
88	88	-> if commandline --search-mode
269	330	-> set lineno (commandline -L)
61	61	--> commandline -L
76	76	-> switch $lineno
58	58	-> commandline -f history-search-backward
34	34	-> case '*'
73	73	> echo $_ " "; 
75	183	> __fish_pwd
108	108	-> pwd
291	1142	> cd ..
83	83	-> if status --is-command-substitution
63	63	-> set -l previous $PWD
68	68	-> if test $argv[1] = - ^/dev/null
109	109	-> builtin cd $argv[1]
65	65	-> set -l cd_status $status
100	100	-> if test $cd_status = 0 -a "$PWD" != "$previous"
73	73	-> set -g dirprev $dirprev $previous
181	181	-> set -e dirnext
52	52	-> set -g __fish_cd_direction prev
22	22	-> end
35	35	-> return $cd_status
379	20907	> fish_prompt
50	50	-> set -l last_status $status
42	42	-> if not set -q __fish_prompt_hostname
40	40	-> if not set -q __fish_prompt_char
176	368	-> set -l normal (set_color normal)
192	192	--> set_color normal
168	258	-> set -l red (set_color red)
90	90	--> set_color red
159	223	-> set -l cyan (set_color cyan)
64	64	--> set_color cyan
86	125	-> set -l white (set_color white)
39	39	--> set_color white
80	119	-> set -l gray (set_color -o cyan)
39	39	--> set_color -o cyan
80	120	-> set -l brwhite (set_color -o white)
40	40	--> set_color -o white
95	477	-> set -g __fish_git_prompt_showdirtystate true
187	382	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
46	46	---> if status --is-interactive
61	61	---> if test $argv[3] = __fish_git_prompt_show_informative_status
57	57	---> commandline -f repaint ^/dev/null
31	31	---> end
92	389	-> set -g __fish_git_prompt_showuntrackedfiles true
147	297	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
40	40	---> if status --is-interactive
60	60	---> if test $argv[3] = __fish_git_prompt_show_informative_status
37	37	---> commandline -f repaint ^/dev/null
13	13	---> end
68	355	-> set -g __fish_git_prompt_showstashstate true
133	287	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
39	39	---> if status --is-interactive
58	58	---> if test $argv[3] = __fish_git_prompt_show_informative_status
44	44	---> commandline -f repaint ^/dev/null
13	13	---> end
56	4605	-> set -g __fish_git_prompt_color green
340	4549	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
35	35	---> if status --is-interactive
39	39	---> set -l var $argv[3]
163	163	---> set -e _$var
138	138	---> set -e _{$var}_done
100	100	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
53	53	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
130	130	---> set -e ___fish_git_prompt_color_$name
134	134	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
124	124	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
124	124	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
143	143	---> set -e ___fish_git_prompt_color_$name
134	134	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
138	138	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
522	522	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
34	34	---> commandline -f repaint ^/dev/null
11	11	---> end
54	3348	-> set -g __fish_git_prompt_color_flags red
276	3294	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
36	36	---> if status --is-interactive
39	39	---> set -l var $argv[3]
124	124	---> set -e _$var
170	170	---> set -e _{$var}_done
80	80	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
96	96	---> set -e ___fish_git_prompt_color_$name
88	88	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
93	93	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
93	93	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
34	34	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
138	138	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
39	39	---> commandline -f repaint ^/dev/null
9	9	---> end
37	37	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
141	3205	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
103	3064	--> prompt_pwd
2961	2961	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
711	3194	-> __fish_git_prompt
103	2424	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2321	2321	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
45	45	--> test -n "$repo_info"; 
14	14	--> or return
26	26	-> if begin
3378	3378	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
42	42	-> end
32	32	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
47	121	> __fish_pwd
74	74	-> pwd
312	18015	> fish_prompt
53	53	-> set -l last_status $status
33	33	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
66	105	-> set -l normal (set_color normal)
39	39	--> set_color normal
58	86	-> set -l red (set_color red)
28	28	--> set_color red
56	82	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
57	83	-> set -l white (set_color white)
26	26	--> set_color white
57	84	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
57	86	-> set -l brwhite (set_color -o white)
29	29	--> set_color -o white
72	314	-> set -g __fish_git_prompt_showdirtystate true
125	242	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
35	35	---> if status --is-interactive
45	45	---> if test $argv[3] = __fish_git_prompt_show_informative_status
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
43	231	-> set -g __fish_git_prompt_showuntrackedfiles true
86	188	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
31	31	---> if status --is-interactive
39	39	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
8	8	---> end
40	224	-> set -g __fish_git_prompt_showstashstate true
89	184	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
25	25	---> if status --is-interactive
38	38	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
8	8	---> end
43	3451	-> set -g __fish_git_prompt_color green
238	3408	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
28	28	---> if status --is-interactive
32	32	---> set -l var $argv[3]
185	185	---> set -e _$var
169	169	---> set -e _{$var}_done
89	89	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
105	105	---> set -e ___fish_git_prompt_color_$name
103	103	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
86	86	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
93	93	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
93	93	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
86	86	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
436	436	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
8	8	---> end
30	30	---> commandline -f repaint ^/dev/null
10	10	---> end
52	2812	-> set -g __fish_git_prompt_color_flags red
225	2760	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
35	35	---> if status --is-interactive
35	35	---> set -l var $argv[3]
80	80	---> set -e _$var
83	83	---> set -e _{$var}_done
80	80	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
45	45	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
81	81	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
79	79	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
82	82	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
90	90	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
9	9	---> end
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
36	36	-> set -l pcolor $gray
35	35	-> if test $last_status -ne 0
126	3086	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
114	2960	--> prompt_pwd
2846	2846	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
722	3686	-> __fish_git_prompt
122	2897	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2775	2775	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
50	50	--> test -n "$repo_info"; 
17	17	--> or return
20	20	-> if begin
3041	3041	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
36	36	-> end
31	31	-> echo
58	58	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
32	32	> echo $_ " "; 
46	120	> __fish_pwd
74	74	-> pwd
431	1149	> up-or-search
111	111	-> if commandline --search-mode
342	413	-> set lineno (commandline -L)
71	71	--> commandline -L
79	79	-> switch $lineno
70	70	-> commandline -f history-search-backward
45	45	-> case '*'
112	112	> echo $_ " "; 
127	447	> __fish_pwd
320	320	-> pwd
449	1675	> cd ..
97	97	-> if status --is-command-substitution
112	112	-> set -l previous $PWD
169	169	-> if test $argv[1] = - ^/dev/null
144	144	-> builtin cd $argv[1]
78	78	-> set -l cd_status $status
139	139	-> if test $cd_status = 0 -a "$PWD" != "$previous"
108	108	-> set -g dirprev $dirprev $previous
221	221	-> set -e dirnext
84	84	-> set -g __fish_cd_direction prev
29	29	-> end
45	45	-> return $cd_status
460	27572	> fish_prompt
67	67	-> set -l last_status $status
54	54	-> if not set -q __fish_prompt_hostname
62	62	-> if not set -q __fish_prompt_char
220	331	-> set -l normal (set_color normal)
111	111	--> set_color normal
217	309	-> set -l red (set_color red)
92	92	--> set_color red
171	256	-> set -l cyan (set_color cyan)
85	85	--> set_color cyan
220	324	-> set -l white (set_color white)
104	104	--> set_color white
137	202	-> set -l gray (set_color -o cyan)
65	65	--> set_color -o cyan
128	185	-> set -l brwhite (set_color -o white)
57	57	--> set_color -o white
80	472	-> set -g __fish_git_prompt_showdirtystate true
192	392	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
52	52	---> if status --is-interactive
82	82	---> if test $argv[3] = __fish_git_prompt_show_informative_status
50	50	---> commandline -f repaint ^/dev/null
16	16	---> end
72	354	-> set -g __fish_git_prompt_showuntrackedfiles true
138	282	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
38	38	---> if status --is-interactive
57	57	---> if test $argv[3] = __fish_git_prompt_show_informative_status
36	36	---> commandline -f repaint ^/dev/null
13	13	---> end
74	491	-> set -g __fish_git_prompt_showstashstate true
184	417	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
49	49	---> if status --is-interactive
123	123	---> if test $argv[3] = __fish_git_prompt_show_informative_status
47	47	---> commandline -f repaint ^/dev/null
14	14	---> end
175	4872	-> set -g __fish_git_prompt_color green
402	4697	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
71	71	---> if status --is-interactive
83	83	---> set -l var $argv[3]
187	187	---> set -e _$var
162	162	---> set -e _{$var}_done
111	111	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
63	63	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
156	156	---> set -e ___fish_git_prompt_color_$name
194	194	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
155	155	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
148	148	---> set -e ___fish_git_prompt_color_$name
154	154	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
155	155	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
147	147	---> set -e ___fish_git_prompt_color_$name
153	153	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
154	154	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
171	171	---> set -e ___fish_git_prompt_color_{$name}_done
40	40	---> end
138	138	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
102	102	---> set -e ___fish_git_prompt_color_$name
102	102	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
100	100	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
95	95	---> set -e ___fish_git_prompt_color_$name
99	99	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
11	11	---> end
44	44	---> commandline -f repaint ^/dev/null
12	12	---> end
65	5247	-> set -g __fish_git_prompt_color_flags red
356	5182	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
44	44	---> if status --is-interactive
42	42	---> set -l var $argv[3]
95	95	---> set -e _$var
98	98	---> set -e _{$var}_done
97	97	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
55	55	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
96	96	---> set -e ___fish_git_prompt_color_$name
727	727	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
148	148	---> set -e ___fish_git_prompt_color_$name
184	184	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
133	133	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
132	132	---> set -e ___fish_git_prompt_color_$name
153	153	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
144	144	---> set -e ___fish_git_prompt_color_$name
154	154	---> set -e ___fish_git_prompt_color_{$name}_done
30	30	---> end
144	144	---> set -e ___fish_git_prompt_color_$name
161	161	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
147	147	---> set -e ___fish_git_prompt_color_$name
143	143	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
149	149	---> set -e ___fish_git_prompt_color_$name
157	157	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
145	145	---> set -e ___fish_git_prompt_color_$name
154	154	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
142	142	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
144	144	---> set -e ___fish_git_prompt_color_$name
144	144	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
15	15	---> end
46	46	---> commandline -f repaint ^/dev/null
16	16	---> end
60	60	-> set -l pcolor $gray
59	59	-> if test $last_status -ne 0
196	6019	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
132	5823	--> prompt_pwd
5691	5691	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
827	3957	-> __fish_git_prompt
176	3038	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2862	2862	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
67	67	--> test -n "$repo_info"; 
25	25	--> or return
21	21	-> if begin
3651	3651	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
31	31	-> echo
59	59	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
47	98	> __fish_pwd
51	51	-> pwd
430	34489	> fish_prompt
67	67	-> set -l last_status $status
46	46	-> if not set -q __fish_prompt_hostname
44	44	-> if not set -q __fish_prompt_char
98	153	-> set -l normal (set_color normal)
55	55	--> set_color normal
86	126	-> set -l red (set_color red)
40	40	--> set_color red
83	122	-> set -l cyan (set_color cyan)
39	39	--> set_color cyan
85	125	-> set -l white (set_color white)
40	40	--> set_color white
86	126	-> set -l gray (set_color -o cyan)
40	40	--> set_color -o cyan
85	129	-> set -l brwhite (set_color -o white)
44	44	--> set_color -o white
50	272	-> set -g __fish_git_prompt_showdirtystate true
99	222	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
40	40	---> if status --is-interactive
46	46	---> if test $argv[3] = __fish_git_prompt_show_informative_status
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
51	318	-> set -g __fish_git_prompt_showuntrackedfiles true
132	267	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
50	50	---> if test $argv[3] = __fish_git_prompt_show_informative_status
43	43	---> commandline -f repaint ^/dev/null
15	15	---> end
54	245	-> set -g __fish_git_prompt_showstashstate true
90	191	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
26	26	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
8	8	---> end
46	3930	-> set -g __fish_git_prompt_color green
323	3884	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
30	30	---> if status --is-interactive
33	33	---> set -l var $argv[3]
146	146	---> set -e _$var
130	130	---> set -e _{$var}_done
135	135	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
65	65	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
116	116	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
222	222	---> set -e ___fish_git_prompt_color_{$name}_done
49	49	---> end
186	186	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
96	96	---> set -e ___fish_git_prompt_color_$name
93	93	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
85	85	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
8	8	---> end
31	31	---> commandline -f repaint ^/dev/null
9	9	---> end
60	18040	-> set -g __fish_git_prompt_color_flags red
347	17980	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
33	33	---> if status --is-interactive
34	34	---> set -l var $argv[3]
81	81	---> set -e _$var
85	85	---> set -e _{$var}_done
81	81	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
79	79	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
13535	13535	---> set -e ___fish_git_prompt_color_{$name}_done
37	37	---> end
276	276	---> set -e ___fish_git_prompt_color_$name
211	211	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
194	194	---> set -e ___fish_git_prompt_color_$name
202	202	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
195	195	---> set -e ___fish_git_prompt_color_$name
200	200	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
212	212	---> set -e ___fish_git_prompt_color_$name
194	194	---> set -e ___fish_git_prompt_color_{$name}_done
30	30	---> end
187	187	---> set -e ___fish_git_prompt_color_$name
169	169	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
152	152	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
147	147	---> set -e ___fish_git_prompt_color_$name
152	152	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
16	16	---> end
54	54	---> commandline -f repaint ^/dev/null
17	17	---> end
65	65	-> set -l pcolor $gray
65	65	-> if test $last_status -ne 0
238	4242	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
137	4004	--> prompt_pwd
3867	3867	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
840	3302	-> __fish_git_prompt
118	2397	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2279	2279	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
49	49	--> test -n "$repo_info"; 
16	16	--> or return
22	22	-> if begin
2489	2489	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
47	47	-> end
29	29	-> echo
55	55	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
28	28	> echo $_ " "; 
42	89	> __fish_pwd
47	47	-> pwd
76	76	> echo $_ " "; 
139	61859	> __fish_pwd
61720	61720	-> pwd
344	29148	-> . /usr/local/Cellar/fish/2.1.2/share/fish/functions/ls.fish
53	53	--> if begin
138	245	--> test (count $argv) -eq 0
107	107	---> count $argv
140	140	--> and tty 0>&0 >/dev/null
61	61	--> end
14668	28289	--> source $argv
11102	11102	---> if command ls --version 1>/dev/null 2>/dev/null
2429	2429	---> if command ls -G / 1>/dev/null 2>/dev/null
68	68	---> function ls --description "List contents of directory"
12	12	---> end
10	10	---> end
16	16	--> end
2803	2803	-> command ls -G $argv
293	18614	> fish_prompt
53	53	-> set -l last_status $status
30	30	-> if not set -q __fish_prompt_hostname
28	28	-> if not set -q __fish_prompt_char
61	105	-> set -l normal (set_color normal)
44	44	--> set_color normal
62	87	-> set -l red (set_color red)
25	25	--> set_color red
53	78	-> set -l cyan (set_color cyan)
25	25	--> set_color cyan
52	77	-> set -l white (set_color white)
25	25	--> set_color white
53	84	-> set -l gray (set_color -o cyan)
31	31	--> set_color -o cyan
54	80	-> set -l brwhite (set_color -o white)
26	26	--> set_color -o white
41	248	-> set -g __fish_git_prompt_showdirtystate true
97	207	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
29	29	---> if status --is-interactive
44	44	---> if test $argv[3] = __fish_git_prompt_show_informative_status
29	29	---> commandline -f repaint ^/dev/null
8	8	---> end
42	223	-> set -g __fish_git_prompt_showuntrackedfiles true
84	181	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
28	28	---> if status --is-interactive
38	38	---> if test $argv[3] = __fish_git_prompt_show_informative_status
23	23	---> commandline -f repaint ^/dev/null
8	8	---> end
40	219	-> set -g __fish_git_prompt_showstashstate true
85	179	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
25	25	---> if status --is-interactive
37	37	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
8	8	---> end
48	3468	-> set -g __fish_git_prompt_color green
298	3420	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
27	27	---> if status --is-interactive
31	31	---> set -l var $argv[3]
126	126	---> set -e _$var
154	154	---> set -e _{$var}_done
99	99	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
44	44	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
121	121	---> set -e ___fish_git_prompt_color_$name
160	160	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
101	101	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
90	90	---> set -e ___fish_git_prompt_color_$name
94	94	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
100	100	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
10	10	---> end
39	39	---> commandline -f repaint ^/dev/null
10	10	---> end
82	4710	-> set -g __fish_git_prompt_color_flags red
353	4628	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
108	108	---> if status --is-interactive
77	77	---> set -l var $argv[3]
182	182	---> set -e _$var
458	458	---> set -e _{$var}_done
114	114	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
50	50	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
121	121	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
501	501	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
8	8	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
37	37	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
157	3313	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
106	3156	--> prompt_pwd
3050	3050	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
675	2831	-> __fish_git_prompt
113	2086	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1973	1973	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
57	57	--> test -n "$repo_info"; 
13	13	--> or return
19	19	-> if begin
2471	2471	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
33	33	-> echo
60	60	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
46	94	> __fish_pwd
48	48	-> pwd
341	19226	> fish_prompt
49	49	-> set -l last_status $status
32	32	-> if not set -q __fish_prompt_hostname
29	29	-> if not set -q __fish_prompt_char
66	106	-> set -l normal (set_color normal)
40	40	--> set_color normal
58	85	-> set -l red (set_color red)
27	27	--> set_color red
57	83	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
122	253	-> set -l white (set_color white)
131	131	--> set_color white
130	185	-> set -l gray (set_color -o cyan)
55	55	--> set_color -o cyan
97	144	-> set -l brwhite (set_color -o white)
47	47	--> set_color -o white
48	267	-> set -g __fish_git_prompt_showdirtystate true
103	219	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
33	33	---> if status --is-interactive
45	45	---> if test $argv[3] = __fish_git_prompt_show_informative_status
28	28	---> commandline -f repaint ^/dev/null
10	10	---> end
53	301	-> set -g __fish_git_prompt_showuntrackedfiles true
121	248	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
28	28	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
42	42	---> commandline -f repaint ^/dev/null
16	16	---> end
59	327	-> set -g __fish_git_prompt_showstashstate true
137	268	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
36	36	---> if status --is-interactive
57	57	---> if test $argv[3] = __fish_git_prompt_show_informative_status
28	28	---> commandline -f repaint ^/dev/null
10	10	---> end
50	4354	-> set -g __fish_git_prompt_color green
311	4304	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
53	53	---> if status --is-interactive
76	76	---> set -l var $argv[3]
176	176	---> set -e _$var
148	148	---> set -e _{$var}_done
131	131	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
50	50	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
120	120	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
152	152	---> set -e ___fish_git_prompt_color_$name
190	190	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
149	149	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
132	132	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
140	140	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
33	33	---> commandline -f repaint ^/dev/null
9	9	---> end
50	3587	-> set -g __fish_git_prompt_color_flags red
275	3537	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
33	33	---> if status --is-interactive
35	35	---> set -l var $argv[3]
107	107	---> set -e _$var
109	109	---> set -e _{$var}_done
88	88	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
93	93	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
91	91	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
37	37	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
106	106	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
94	94	---> set -e ___fish_git_prompt_color_$name
98	98	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
97	97	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
420	420	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
94	94	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
31	31	---> commandline -f repaint ^/dev/null
9	9	---> end
37	37	-> set -l pcolor $gray
37	37	-> if test $last_status -ne 0
184	3227	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
75	3043	--> prompt_pwd
2968	2968	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
722	3001	-> __fish_git_prompt
122	2215	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2093	2093	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
50	50	--> test -n "$repo_info"; 
14	14	--> or return
20	20	-> if begin
2640	2640	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
34	34	-> end
29	29	-> echo
58	58	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
47	104	> __fish_pwd
57	57	-> pwd
65	65	> echo $_ " "; 
76	137	> __fish_pwd
61	61	-> pwd
237	963	> cd ~
69	69	-> if status --is-command-substitution
59	59	-> set -l previous $PWD
69	69	-> if test $argv[1] = - ^/dev/null
135	135	-> builtin cd $argv[1]
42	42	-> set -l cd_status $status
70	70	-> if test $cd_status = 0 -a "$PWD" != "$previous"
66	66	-> set -g dirprev $dirprev $previous
133	133	-> set -e dirnext
41	41	-> set -g __fish_cd_direction prev
17	17	-> end
25	25	-> return $cd_status
415	18246	> fish_prompt
60	60	-> set -l last_status $status
95	95	-> if not set -q __fish_prompt_hostname
38	38	-> if not set -q __fish_prompt_char
116	229	-> set -l normal (set_color normal)
113	113	--> set_color normal
93	129	-> set -l red (set_color red)
36	36	--> set_color red
59	87	-> set -l cyan (set_color cyan)
28	28	--> set_color cyan
58	91	-> set -l white (set_color white)
33	33	--> set_color white
58	86	-> set -l gray (set_color -o cyan)
28	28	--> set_color -o cyan
58	86	-> set -l brwhite (set_color -o white)
28	28	--> set_color -o white
43	308	-> set -g __fish_git_prompt_showdirtystate true
137	265	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
30	30	---> if status --is-interactive
45	45	---> if test $argv[3] = __fish_git_prompt_show_informative_status
44	44	---> commandline -f repaint ^/dev/null
9	9	---> end
43	234	-> set -g __fish_git_prompt_showuntrackedfiles true
91	191	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
8	8	---> end
43	235	-> set -g __fish_git_prompt_showstashstate true
93	192	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
25	25	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
8	8	---> end
46	3676	-> set -g __fish_git_prompt_color green
295	3630	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
29	29	---> if status --is-interactive
34	34	---> set -l var $argv[3]
137	137	---> set -e _$var
115	115	---> set -e _{$var}_done
85	85	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
112	112	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
31	31	---> commandline -f repaint ^/dev/null
9	9	---> end
46	3537	-> set -g __fish_git_prompt_color_flags red
282	3491	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
32	32	---> if status --is-interactive
35	35	---> set -l var $argv[3]
104	104	---> set -e _$var
109	109	---> set -e _{$var}_done
90	90	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
107	107	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
107	107	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
29	29	---> commandline -f repaint ^/dev/null
9	9	---> end
36	36	-> set -l pcolor $gray
34	34	-> if test $last_status -ne 0
141	3422	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
150	3281	--> prompt_pwd
3131	3131	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
696	2933	-> __fish_git_prompt
109	2183	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2074	2074	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
41	41	--> test -n "$repo_info"; 
13	13	--> or return
18	18	-> if begin
2378	2378	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
40	40	-> end
28	28	-> echo
51	51	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
42	137	> __fish_pwd
95	95	-> pwd
329	16969	> fish_prompt
48	48	-> set -l last_status $status
31	31	-> if not set -q __fish_prompt_hostname
29	29	-> if not set -q __fish_prompt_char
72	115	-> set -l normal (set_color normal)
43	43	--> set_color normal
58	85	-> set -l red (set_color red)
27	27	--> set_color red
59	84	-> set -l cyan (set_color cyan)
25	25	--> set_color cyan
110	150	-> set -l white (set_color white)
40	40	--> set_color white
67	100	-> set -l gray (set_color -o cyan)
33	33	--> set_color -o cyan
63	93	-> set -l brwhite (set_color -o white)
30	30	--> set_color -o white
46	276	-> set -g __fish_git_prompt_showdirtystate true
116	230	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
30	30	---> if status --is-interactive
45	45	---> if test $argv[3] = __fish_git_prompt_show_informative_status
29	29	---> commandline -f repaint ^/dev/null
10	10	---> end
44	276	-> set -g __fish_git_prompt_showuntrackedfiles true
125	232	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
30	30	---> if status --is-interactive
43	43	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
8	8	---> end
42	239	-> set -g __fish_git_prompt_showstashstate true
95	197	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
27	27	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
46	3469	-> set -g __fish_git_prompt_color green
272	3423	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
30	30	---> if status --is-interactive
33	33	---> set -l var $argv[3]
136	136	---> set -e _$var
115	115	---> set -e _{$var}_done
85	85	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
111	111	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
94	94	---> set -e ___fish_git_prompt_color_$name
104	104	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
96	96	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
94	94	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
90	90	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
48	3222	-> set -g __fish_git_prompt_color_flags red
271	3174	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
32	32	---> if status --is-interactive
35	35	---> set -l var $argv[3]
88	88	---> set -e _$var
95	95	---> set -e _{$var}_done
88	88	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
48	48	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
96	96	---> set -e ___fish_git_prompt_color_$name
155	155	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
84	84	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
89	89	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
152	152	---> set -e ___fish_git_prompt_color_{$name}_done
27	27	---> end
155	155	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
91	91	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
85	85	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
30	30	---> commandline -f repaint ^/dev/null
9	9	---> end
36	36	-> set -l pcolor $gray
36	36	-> if test $last_status -ne 0
184	2985	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
113	2801	--> prompt_pwd
2688	2688	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
642	2714	-> __fish_git_prompt
113	2014	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1901	1901	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
44	44	--> test -n "$repo_info"; 
14	14	--> or return
18	18	-> if begin
2475	2475	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
31	31	-> end
39	39	-> echo
89	89	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
52	52	> echo $_ " "; 
75	198	> __fish_pwd
123	123	-> pwd
81	81	> echo $_ " "; 
76	187	> __fish_pwd
111	111	-> pwd
322	68899	> ls
68577	68577	-> command ls -G $argv
631	24125	> fish_prompt
134	134	-> set -l last_status $status
84	84	-> if not set -q __fish_prompt_hostname
79	79	-> if not set -q __fish_prompt_char
187	303	-> set -l normal (set_color normal)
116	116	--> set_color normal
181	264	-> set -l red (set_color red)
83	83	--> set_color red
170	250	-> set -l cyan (set_color cyan)
80	80	--> set_color cyan
178	259	-> set -l white (set_color white)
81	81	--> set_color white
181	265	-> set -l gray (set_color -o cyan)
84	84	--> set_color -o cyan
174	245	-> set -l brwhite (set_color -o white)
71	71	--> set_color -o white
117	686	-> set -g __fish_git_prompt_showdirtystate true
265	569	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
77	77	---> if status --is-interactive
108	108	---> if test $argv[3] = __fish_git_prompt_show_informative_status
89	89	---> commandline -f repaint ^/dev/null
30	30	---> end
111	588	-> set -g __fish_git_prompt_showuntrackedfiles true
232	477	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
67	67	---> if status --is-interactive
97	97	---> if test $argv[3] = __fish_git_prompt_show_informative_status
61	61	---> commandline -f repaint ^/dev/null
20	20	---> end
101	580	-> set -g __fish_git_prompt_showstashstate true
226	479	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
67	67	---> if status --is-interactive
99	99	---> if test $argv[3] = __fish_git_prompt_show_informative_status
63	63	---> commandline -f repaint ^/dev/null
24	24	---> end
94	6283	-> set -g __fish_git_prompt_color green
456	6189	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
74	74	---> if status --is-interactive
84	84	---> set -l var $argv[3]
248	248	---> set -e _$var
195	195	---> set -e _{$var}_done
188	188	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
113	113	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
195	195	---> set -e ___fish_git_prompt_color_$name
197	197	---> set -e ___fish_git_prompt_color_{$name}_done
33	33	---> end
187	187	---> set -e ___fish_git_prompt_color_$name
816	816	---> set -e ___fish_git_prompt_color_{$name}_done
36	36	---> end
160	160	---> set -e ___fish_git_prompt_color_$name
199	199	---> set -e ___fish_git_prompt_color_{$name}_done
35	35	---> end
169	169	---> set -e ___fish_git_prompt_color_$name
159	159	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
149	149	---> set -e ___fish_git_prompt_color_$name
154	154	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
151	151	---> set -e ___fish_git_prompt_color_$name
155	155	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
149	149	---> set -e ___fish_git_prompt_color_$name
155	155	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
146	146	---> set -e ___fish_git_prompt_color_$name
160	160	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
151	151	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
124	124	---> set -e ___fish_git_prompt_color_$name
175	175	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
16	16	---> end
49	49	---> commandline -f repaint ^/dev/null
16	16	---> end
78	4355	-> set -g __fish_git_prompt_color_flags red
389	4277	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
61	61	---> if status --is-interactive
57	57	---> set -l var $argv[3]
117	117	---> set -e _$var
125	125	---> set -e _{$var}_done
97	97	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
49	49	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
113	113	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
237	237	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
140	140	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
133	133	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
124	124	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
13	13	---> end
42	42	---> commandline -f repaint ^/dev/null
15	15	---> end
55	55	-> set -l pcolor $gray
54	54	-> if test $last_status -ne 0
180	3697	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
109	3517	--> prompt_pwd
3408	3408	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
707	2804	-> __fish_git_prompt
113	2037	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1924	1924	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
44	44	--> test -n "$repo_info"; 
16	16	--> or return
18	18	-> if begin
2373	2373	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
31	31	-> end
31	31	-> echo
56	56	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
46	106	> __fish_pwd
60	60	-> pwd
324	21178	> fish_prompt
42	42	-> set -l last_status $status
31	31	-> if not set -q __fish_prompt_hostname
34	34	-> if not set -q __fish_prompt_char
63	100	-> set -l normal (set_color normal)
37	37	--> set_color normal
58	84	-> set -l red (set_color red)
26	26	--> set_color red
57	82	-> set -l cyan (set_color cyan)
25	25	--> set_color cyan
56	81	-> set -l white (set_color white)
25	25	--> set_color white
56	82	-> set -l gray (set_color -o cyan)
26	26	--> set_color -o cyan
57	84	-> set -l brwhite (set_color -o white)
27	27	--> set_color -o white
44	260	-> set -g __fish_git_prompt_showdirtystate true
103	216	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
29	29	---> if status --is-interactive
48	48	---> if test $argv[3] = __fish_git_prompt_show_informative_status
27	27	---> commandline -f repaint ^/dev/null
9	9	---> end
50	303	-> set -g __fish_git_prompt_showuntrackedfiles true
120	253	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
52	52	---> if test $argv[3] = __fish_git_prompt_show_informative_status
40	40	---> commandline -f repaint ^/dev/null
14	14	---> end
61	354	-> set -g __fish_git_prompt_showstashstate true
162	293	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
46	46	---> if status --is-interactive
48	48	---> if test $argv[3] = __fish_git_prompt_show_informative_status
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
59	5239	-> set -g __fish_git_prompt_color green
381	5180	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
30	30	---> if status --is-interactive
33	33	---> set -l var $argv[3]
118	118	---> set -e _$var
129	129	---> set -e _{$var}_done
88	88	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
104	104	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
1154	1154	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
142	142	---> set -e ___fish_git_prompt_color_$name
160	160	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
149	149	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
133	133	---> set -e ___fish_git_prompt_color_$name
160	160	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
154	154	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
133	133	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
14	14	---> end
45	45	---> commandline -f repaint ^/dev/null
15	15	---> end
70	4541	-> set -g __fish_git_prompt_color_flags red
374	4471	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
52	52	---> if status --is-interactive
59	59	---> set -l var $argv[3]
184	184	---> set -e _$var
204	204	---> set -e _{$var}_done
134	134	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
75	75	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
132	132	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
133	133	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
172	172	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
134	134	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
12	12	---> end
43	43	---> commandline -f repaint ^/dev/null
10	10	---> end
41	41	-> set -l pcolor $gray
39	39	-> if test $last_status -ne 0
203	3480	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
89	3277	--> prompt_pwd
3188	3188	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
675	2941	-> __fish_git_prompt
127	2203	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2076	2076	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
49	49	--> test -n "$repo_info"; 
14	14	--> or return
19	19	-> if begin
2851	2851	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
37	37	-> end
46	46	-> echo
83	83	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
46	114	> __fish_pwd
68	68	-> pwd
403	814	> up-or-search
80	80	-> if commandline --search-mode
130	183	-> set lineno (commandline -L)
53	53	--> commandline -L
64	64	-> switch $lineno
51	51	-> commandline -f history-search-backward
33	33	-> case '*'
226	62639	-> . /usr/local/Cellar/fish/2.1.2/share/fish/functions/down-or-search.fish
50	50	--> if begin
146	293	--> test (count $argv) -eq 0
147	147	---> count $argv
85	85	--> and tty 0>&0 >/dev/null
33	33	--> end
61763	61911	--> source $argv
148	148	---> function down-or-search -d "Depending on cursor position and current mode, either search forward or move down one line"
41	41	--> end
100	100	-> if commandline --search-mode
68	68	-> commandline -f history-search-forward
36	36	-> return
398	1041	> up-or-search
159	159	-> if commandline --search-mode
207	288	-> set lineno (commandline -L)
81	81	--> commandline -L
71	71	-> switch $lineno
79	79	-> commandline -f history-search-backward
46	46	-> case '*'
332	544	> up-or-search
107	107	-> if commandline --search-mode
68	68	-> commandline -f history-search-backward
37	37	-> return
251	412	> up-or-search
82	82	-> if commandline --search-mode
51	51	-> commandline -f history-search-backward
28	28	-> return
358	568	> down-or-search
106	106	-> if commandline --search-mode
68	68	-> commandline -f history-search-forward
36	36	-> return
359	570	> down-or-search
106	106	-> if commandline --search-mode
69	69	-> commandline -f history-search-forward
36	36	-> return
186	186	> echo $_ " "; 
169	334	> __fish_pwd
165	165	-> pwd
232	251198	> howHidden
249051	250966	-> __fish_command_not_found_setup howHidden
198	198	--> functions --erase __fish_command_not_found_setup
-246440	150	--> if test -f /usr/lib/command-not-found
205	71311	---> . /usr/local/Cellar/fish/2.1.2/share/fish/functions/type.fish
51	51	----> if begin
153	288	----> test (count $argv) -eq 0
135	135	-----> count $argv
85	85	----> and tty 0>&0 >/dev/null
36	36	----> end
70497	70628	----> source $argv
131	131	-----> function type --description "Print the type of a command"
18	18	----> end
86	86	---> set -l res 1
35	35	---> set -l mode normal
34	34	---> set -l selection all
31	31	---> set -l options
164	164	---> set -l shortopt tpPafh
16086	16086	---> if not getopt -T > /dev/null
56	56	---> set options $shortopt
1732	1732	---> if not getopt $options $argv >/dev/null
11	11	---> end
123	1740	---> set -l tmp (getopt $options $argv)
1617	1617	----> getopt $options $argv
30	30	---> set -l opt
312	1837	---> eval set opt $tmp
23	23	----> set -l mode
45	45	----> if status --is-interactive-job-control
23	23	----> set mode interactive
10	10	----> else
23	23	----> if status --is-interactive
19	19	----> status --job-control full
9	9	----> end
1059	1231	----> echo "begin; $argv "\n" ;end eval2_inner <&3 3<&-" | source 3<&0
78	172	-----> begin; set opt  -p -- command-not-found 
27	27	------> begin
54	54	------> set opt  -p -- command-not-found 
13	13	------> end 
37	37	----> set -l res $status
63	63	----> status --job-control $mode
42	42	----> return $res
49	49	---> for i in $opt
27	27	---> switch $i
30	30	---> set mode path
12	12	---> case -P --force-path
11	11	---> end
25	25	---> switch $i
9	9	---> break
54	54	---> for i in $argv
19	19	---> switch $i
11	11	---> continue
26	26	---> switch $i
135	135	---> set found 0
51	51	---> if test $selection != files
1216	1795	---> if contains -- $i (functions -na)
579	579	----> functions -na
280	317	---> if contains -- $i (builtin -n)
37	37	----> builtin -n
9	9	---> end
121	59187	---> set -l path (which $i ^/dev/null)
59066	59066	----> which $i ^/dev/null
147	193	---> if test -x (echo $path)
46	46	----> echo $path
56	56	---> if test $found = 0
1662	91285	---> printf (_ "%s: Could not find '%s'\n") type $i
151	21182	-----> . /usr/local/Cellar/fish/2.1.2/share/fish/functions/_.fish
42	42	------> if begin
94	157	------> test (count $argv) -eq 0
63	63	-------> count $argv
31	31	------> and tty 0>&0 >/dev/null
20	20	------> end
16669	20761	------> source $argv
214	3808	-------> set -l path (which gettext ^/dev/null)
3594	3594	--------> which gettext ^/dev/null
146	204	-------> if test -x (echo $path)
58	58	--------> echo $path
59	59	-------> function _ --description "Alias for the gettext command"
21	21	-------> else
20	20	------> end
68182	68182	-----> gettext fish $argv
50	50	---> end
24	24	---> end
62	62	---> return $res
53	53	--> function __fish_command_not_found_handler --on-event fish_command_not_found
19	19	--> end
115	1495	--> __fish_command_not_found_handler $argv
1380	1380	---> echo fish: Unknown command "'$argv'" >&2
403	20283	> fish_prompt
71	71	-> set -l last_status $status
45	45	-> if not set -q __fish_prompt_hostname
43	43	-> if not set -q __fish_prompt_char
92	186	-> set -l normal (set_color normal)
94	94	--> set_color normal
84	122	-> set -l red (set_color red)
38	38	--> set_color red
78	115	-> set -l cyan (set_color cyan)
37	37	--> set_color cyan
79	116	-> set -l white (set_color white)
37	37	--> set_color white
79	117	-> set -l gray (set_color -o cyan)
38	38	--> set_color -o cyan
81	120	-> set -l brwhite (set_color -o white)
39	39	--> set_color -o white
65	433	-> set -g __fish_git_prompt_showdirtystate true
172	368	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
46	46	---> if status --is-interactive
71	71	---> if test $argv[3] = __fish_git_prompt_show_informative_status
67	67	---> commandline -f repaint ^/dev/null
12	12	---> end
62	331	-> set -g __fish_git_prompt_showuntrackedfiles true
126	269	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
38	38	---> if status --is-interactive
57	57	---> if test $argv[3] = __fish_git_prompt_show_informative_status
35	35	---> commandline -f repaint ^/dev/null
13	13	---> end
59	329	-> set -g __fish_git_prompt_showstashstate true
123	270	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
37	37	---> if status --is-interactive
63	63	---> if test $argv[3] = __fish_git_prompt_show_informative_status
35	35	---> commandline -f repaint ^/dev/null
12	12	---> end
62	4984	-> set -g __fish_git_prompt_color green
338	4922	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
42	42	---> if status --is-interactive
48	48	---> set -l var $argv[3]
177	177	---> set -e _$var
200	200	---> set -e _{$var}_done
137	137	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
66	66	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
130	130	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
558	558	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
145	145	---> set -e ___fish_git_prompt_color_{$name}_done
41	41	---> end
131	131	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
41	41	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
145	145	---> set -e ___fish_git_prompt_color_{$name}_done
42	42	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
145	145	---> set -e ___fish_git_prompt_color_{$name}_done
41	41	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
145	145	---> set -e ___fish_git_prompt_color_{$name}_done
41	41	---> end
149	149	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
141	141	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
136	136	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
11	11	---> end
34	34	---> commandline -f repaint ^/dev/null
11	11	---> end
51	3377	-> set -g __fish_git_prompt_color_flags red
276	3326	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
38	38	---> if status --is-interactive
40	40	---> set -l var $argv[3]
95	95	---> set -e _$var
96	96	---> set -e _{$var}_done
92	92	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
53	53	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
95	95	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
95	95	---> set -e ___fish_git_prompt_color_$name
99	99	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
98	98	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
102	102	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
97	97	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
98	98	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
97	97	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
96	96	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
9	9	---> end
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
36	36	-> set -l pcolor $gray
34	34	-> if test $last_status -ne 0
33	33	-> set pcolor $red
12	12	-> end
131	3262	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
102	3131	--> prompt_pwd
3029	3029	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
1167	3604	-> __fish_git_prompt
138	2341	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2203	2203	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
72	72	--> test -n "$repo_info"; 
24	24	--> or return
22	22	-> if begin
2374	2374	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
28	28	-> end
30	30	-> echo
56	56	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
45	112	> __fish_pwd
67	67	-> pwd
305	19375	> fish_prompt
47	47	-> set -l last_status $status
32	32	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
66	112	-> set -l normal (set_color normal)
46	46	--> set_color normal
60	87	-> set -l red (set_color red)
27	27	--> set_color red
57	83	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
58	84	-> set -l white (set_color white)
26	26	--> set_color white
57	91	-> set -l gray (set_color -o cyan)
34	34	--> set_color -o cyan
81	110	-> set -l brwhite (set_color -o white)
29	29	--> set_color -o white
63	487	-> set -g __fish_git_prompt_showdirtystate true
189	424	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
46	46	---> if status --is-interactive
136	136	---> if test $argv[3] = __fish_git_prompt_show_informative_status
43	43	---> commandline -f repaint ^/dev/null
10	10	---> end
49	260	-> set -g __fish_git_prompt_showuntrackedfiles true
95	211	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
36	36	---> if status --is-interactive
44	44	---> if test $argv[3] = __fish_git_prompt_show_informative_status
27	27	---> commandline -f repaint ^/dev/null
9	9	---> end
45	246	-> set -g __fish_git_prompt_showstashstate true
91	201	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
33	33	---> if status --is-interactive
42	42	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
66	4300	-> set -g __fish_git_prompt_color green
371	4234	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
45	45	---> if status --is-interactive
37	37	---> set -l var $argv[3]
153	153	---> set -e _$var
129	129	---> set -e _{$var}_done
90	90	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
113	113	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
554	554	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
157	157	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
48	3532	-> set -g __fish_git_prompt_color_flags red
275	3484	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
33	33	---> if status --is-interactive
35	35	---> set -l var $argv[3]
103	103	---> set -e _$var
109	109	---> set -e _{$var}_done
85	85	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
8	8	---> end
29	29	---> commandline -f repaint ^/dev/null
9	9	---> end
37	37	-> set -l pcolor $gray
35	35	-> if test $last_status -ne 0
32	32	-> set pcolor $red
11	11	-> end
140	3666	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
117	3526	--> prompt_pwd
3409	3409	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
694	2964	-> __fish_git_prompt
109	2206	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2097	2097	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
50	50	--> test -n "$repo_info"; 
14	14	--> or return
21	21	-> if begin
2686	2686	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
31	31	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
32	32	> echo $_ " "; 
45	114	> __fish_pwd
69	69	-> pwd
106	106	> echo $_ " "; 
105	274	> __fish_pwd
169	169	-> pwd
217	2304	> howAllFiles
228	2087	-> __fish_command_not_found_handler howAllFiles
1859	1859	--> echo fish: Unknown command "'$argv'" >&2
436	21730	> fish_prompt
91	91	-> set -l last_status $status
56	56	-> if not set -q __fish_prompt_hostname
52	52	-> if not set -q __fish_prompt_char
117	193	-> set -l normal (set_color normal)
76	76	--> set_color normal
102	150	-> set -l red (set_color red)
48	48	--> set_color red
98	144	-> set -l cyan (set_color cyan)
46	46	--> set_color cyan
98	144	-> set -l white (set_color white)
46	46	--> set_color white
99	147	-> set -l gray (set_color -o cyan)
48	48	--> set_color -o cyan
102	150	-> set -l brwhite (set_color -o white)
48	48	--> set_color -o white
121	712	-> set -g __fish_git_prompt_showdirtystate true
266	591	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
57	57	---> if status --is-interactive
174	174	---> if test $argv[3] = __fish_git_prompt_show_informative_status
67	67	---> commandline -f repaint ^/dev/null
27	27	---> end
257	716	-> set -g __fish_git_prompt_showuntrackedfiles true
207	459	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
81	81	---> if status --is-interactive
107	107	---> if test $argv[3] = __fish_git_prompt_show_informative_status
51	51	---> commandline -f repaint ^/dev/null
13	13	---> end
62	342	-> set -g __fish_git_prompt_showstashstate true
127	280	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
38	38	---> if status --is-interactive
59	59	---> if test $argv[3] = __fish_git_prompt_show_informative_status
44	44	---> commandline -f repaint ^/dev/null
12	12	---> end
66	5560	-> set -g __fish_git_prompt_color green
379	5494	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
41	41	---> if status --is-interactive
46	46	---> set -l var $argv[3]
192	192	---> set -e _$var
175	175	---> set -e _{$var}_done
123	123	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
66	66	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
158	158	---> set -e ___fish_git_prompt_color_$name
159	159	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
156	156	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
148	148	---> set -e ___fish_git_prompt_color_$name
155	155	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
149	149	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
161	161	---> set -e ___fish_git_prompt_color_$name
213	213	---> set -e ___fish_git_prompt_color_{$name}_done
33	33	---> end
193	193	---> set -e ___fish_git_prompt_color_$name
170	170	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
161	161	---> set -e ___fish_git_prompt_color_$name
164	164	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
159	159	---> set -e ___fish_git_prompt_color_$name
160	160	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
154	154	---> set -e ___fish_git_prompt_color_$name
159	159	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
155	155	---> set -e ___fish_git_prompt_color_$name
133	133	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
524	524	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
133	133	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
11	11	---> end
46	46	---> commandline -f repaint ^/dev/null
12	12	---> end
59	3294	-> set -g __fish_git_prompt_color_flags red
282	3235	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
46	46	---> if status --is-interactive
52	52	---> set -l var $argv[3]
141	141	---> set -e _$var
130	130	---> set -e _{$var}_done
107	107	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
55	55	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
121	121	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
98	98	---> set -e ___fish_git_prompt_color_$name
91	91	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
85	85	---> set -e ___fish_git_prompt_color_$name
90	90	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
85	85	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
84	84	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
9	9	---> end
30	30	---> commandline -f repaint ^/dev/null
10	10	---> end
37	37	-> set -l pcolor $gray
37	37	-> if test $last_status -ne 0
33	33	-> set pcolor $red
11	11	-> end
157	3234	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
124	3077	--> prompt_pwd
2953	2953	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
695	3014	-> __fish_git_prompt
102	2254	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2152	2152	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
51	51	--> test -n "$repo_info"; 
14	14	--> or return
20	20	-> if begin
3035	3035	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
33	33	-> end
29	29	-> echo
60	60	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
45	109	> __fish_pwd
64	64	-> pwd
382	20817	> fish_prompt
61	61	-> set -l last_status $status
46	46	-> if not set -q __fish_prompt_hostname
45	45	-> if not set -q __fish_prompt_char
94	147	-> set -l normal (set_color normal)
53	53	--> set_color normal
85	125	-> set -l red (set_color red)
40	40	--> set_color red
84	123	-> set -l cyan (set_color cyan)
39	39	--> set_color cyan
83	122	-> set -l white (set_color white)
39	39	--> set_color white
84	124	-> set -l gray (set_color -o cyan)
40	40	--> set_color -o cyan
87	129	-> set -l brwhite (set_color -o white)
42	42	--> set_color -o white
69	384	-> set -g __fish_git_prompt_showdirtystate true
150	315	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
47	47	---> if status --is-interactive
64	64	---> if test $argv[3] = __fish_git_prompt_show_informative_status
40	40	---> commandline -f repaint ^/dev/null
14	14	---> end
67	404	-> set -g __fish_git_prompt_showuntrackedfiles true
177	337	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
39	39	---> if status --is-interactive
60	60	---> if test $argv[3] = __fish_git_prompt_show_informative_status
46	46	---> commandline -f repaint ^/dev/null
15	15	---> end
72	391	-> set -g __fish_git_prompt_showstashstate true
150	319	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
48	48	---> if status --is-interactive
66	66	---> if test $argv[3] = __fish_git_prompt_show_informative_status
40	40	---> commandline -f repaint ^/dev/null
15	15	---> end
69	4366	-> set -g __fish_git_prompt_color green
352	4297	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
48	48	---> if status --is-interactive
52	52	---> set -l var $argv[3]
152	152	---> set -e _$var
136	136	---> set -e _{$var}_done
121	121	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
71	71	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
136	136	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
134	134	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
124	124	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
13	13	---> end
42	42	---> commandline -f repaint ^/dev/null
15	15	---> end
62	4817	-> set -g __fish_git_prompt_color_flags red
352	4755	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
46	46	---> if status --is-interactive
51	51	---> set -l var $argv[3]
126	126	---> set -e _$var
135	135	---> set -e _{$var}_done
117	117	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
69	69	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
129	129	---> set -e ___fish_git_prompt_color_$name
134	134	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
615	615	---> set -e ___fish_git_prompt_color_$name
144	144	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
162	162	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
182	182	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
183	183	---> set -e ___fish_git_prompt_color_$name
182	182	---> set -e ___fish_git_prompt_color_{$name}_done
36	36	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
37	37	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
32	32	-> set pcolor $red
11	11	-> end
135	3355	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
104	3220	--> prompt_pwd
3116	3116	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
690	2877	-> __fish_git_prompt
99	2122	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2023	2023	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
51	51	--> test -n "$repo_info"; 
14	14	--> or return
20	20	-> if begin
2653	2653	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
30	30	-> end
34	34	-> echo
64	64	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
50	138	> __fish_pwd
88	88	-> pwd
67	67	> echo $_ " "; 
64	152	> __fish_pwd
88	88	-> pwd
241	1656	> howAll
138	1415	-> __fish_command_not_found_handler howAll
1277	1277	--> echo fish: Unknown command "'$argv'" >&2
444	22604	> fish_prompt
102	102	-> set -l last_status $status
57	57	-> if not set -q __fish_prompt_hostname
55	55	-> if not set -q __fish_prompt_char
117	196	-> set -l normal (set_color normal)
79	79	--> set_color normal
105	155	-> set -l red (set_color red)
50	50	--> set_color red
100	147	-> set -l cyan (set_color cyan)
47	47	--> set_color cyan
99	147	-> set -l white (set_color white)
48	48	--> set_color white
100	148	-> set -l gray (set_color -o cyan)
48	48	--> set_color -o cyan
100	149	-> set -l brwhite (set_color -o white)
49	49	--> set_color -o white
130	578	-> set -g __fish_git_prompt_showdirtystate true
245	448	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
46	46	---> if status --is-interactive
67	67	---> if test $argv[3] = __fish_git_prompt_show_informative_status
68	68	---> commandline -f repaint ^/dev/null
22	22	---> end
80	685	-> set -g __fish_git_prompt_showuntrackedfiles true
348	605	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
91	91	---> if status --is-interactive
100	100	---> if test $argv[3] = __fish_git_prompt_show_informative_status
52	52	---> commandline -f repaint ^/dev/null
14	14	---> end
66	346	-> set -g __fish_git_prompt_showstashstate true
127	280	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
46	46	---> if status --is-interactive
59	59	---> if test $argv[3] = __fish_git_prompt_show_informative_status
36	36	---> commandline -f repaint ^/dev/null
12	12	---> end
61	4690	-> set -g __fish_git_prompt_color green
343	4629	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
48	48	---> if status --is-interactive
48	48	---> set -l var $argv[3]
207	207	---> set -e _$var
166	166	---> set -e _{$var}_done
118	118	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
65	65	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
159	159	---> set -e ___fish_git_prompt_color_$name
159	159	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
196	196	---> set -e ___fish_git_prompt_color_$name
256	256	---> set -e ___fish_git_prompt_color_{$name}_done
32	32	---> end
170	170	---> set -e ___fish_git_prompt_color_$name
163	163	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
152	152	---> set -e ___fish_git_prompt_color_$name
198	198	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
145	145	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
135	135	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
104	104	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
98	98	---> set -e ___fish_git_prompt_color_$name
101	101	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
96	96	---> set -e ___fish_git_prompt_color_$name
100	100	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
143	143	---> set -e ___fish_git_prompt_color_$name
164	164	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
11	11	---> end
37	37	---> commandline -f repaint ^/dev/null
11	11	---> end
56	3938	-> set -g __fish_git_prompt_color_flags red
289	3882	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
44	44	---> if status --is-interactive
42	42	---> set -l var $argv[3]
101	101	---> set -e _$var
124	124	---> set -e _{$var}_done
98	98	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
55	55	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
115	115	---> set -e ___fish_git_prompt_color_$name
101	101	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
95	95	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
423	423	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
89	89	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
100	100	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
31	31	---> end
145	145	---> set -e ___fish_git_prompt_color_$name
150	150	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
30	30	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
8	8	---> end
33	33	---> commandline -f repaint ^/dev/null
10	10	---> end
38	38	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
33	33	-> set pcolor $red
12	12	-> end
155	4237	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
84	4082	--> prompt_pwd
3998	3998	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
712	3347	-> __fish_git_prompt
108	2572	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2464	2464	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
49	49	--> test -n "$repo_info"; 
14	14	--> or return
19	19	-> if begin
2923	2923	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
32	32	-> end
29	29	-> echo
59	59	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
45	113	> __fish_pwd
68	68	-> pwd
393	24894	> fish_prompt
60	60	-> set -l last_status $status
46	46	-> if not set -q __fish_prompt_hostname
44	44	-> if not set -q __fish_prompt_char
92	145	-> set -l normal (set_color normal)
53	53	--> set_color normal
86	126	-> set -l red (set_color red)
40	40	--> set_color red
82	121	-> set -l cyan (set_color cyan)
39	39	--> set_color cyan
85	124	-> set -l white (set_color white)
39	39	--> set_color white
87	133	-> set -l gray (set_color -o cyan)
46	46	--> set_color -o cyan
87	128	-> set -l brwhite (set_color -o white)
41	41	--> set_color -o white
68	385	-> set -g __fish_git_prompt_showdirtystate true
145	317	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
52	52	---> if status --is-interactive
66	66	---> if test $argv[3] = __fish_git_prompt_show_informative_status
40	40	---> commandline -f repaint ^/dev/null
14	14	---> end
64	359	-> set -g __fish_git_prompt_showuntrackedfiles true
137	295	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
45	45	---> if status --is-interactive
62	62	---> if test $argv[3] = __fish_git_prompt_show_informative_status
38	38	---> commandline -f repaint ^/dev/null
13	13	---> end
58	1977	-> set -g __fish_git_prompt_showstashstate true
126	1919	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
39	39	---> if status --is-interactive
1716	1716	---> if test $argv[3] = __fish_git_prompt_show_informative_status
29	29	---> commandline -f repaint ^/dev/null
9	9	---> end
49	3916	-> set -g __fish_git_prompt_color green
328	3867	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
34	34	---> if status --is-interactive
35	35	---> set -l var $argv[3]
130	130	---> set -e _$var
128	128	---> set -e _{$var}_done
86	86	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
50	50	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
114	114	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
10	10	---> end
30	30	---> commandline -f repaint ^/dev/null
9	9	---> end
56	5322	-> set -g __fish_git_prompt_color_flags red
351	5266	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
31	31	---> if status --is-interactive
34	34	---> set -l var $argv[3]
107	107	---> set -e _$var
120	120	---> set -e _{$var}_done
89	89	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
111	111	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
135	135	---> set -e ___fish_git_prompt_color_$name
133	133	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
144	144	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
167	167	---> set -e ___fish_git_prompt_color_{$name}_done
27	27	---> end
189	189	---> set -e ___fish_git_prompt_color_$name
238	238	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
207	207	---> set -e ___fish_git_prompt_color_$name
788	788	---> set -e ___fish_git_prompt_color_{$name}_done
31	31	---> end
167	167	---> set -e ___fish_git_prompt_color_$name
154	154	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
139	139	---> set -e ___fish_git_prompt_color_$name
159	159	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
146	146	---> set -e ___fish_git_prompt_color_$name
192	192	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
16	16	---> end
52	52	---> commandline -f repaint ^/dev/null
16	16	---> end
154	154	-> set -l pcolor $gray
69	69	-> if test $last_status -ne 0
57	57	-> set pcolor $red
19	19	-> end
218	4866	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
228	4648	--> prompt_pwd
4420	4420	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
939	3267	-> __fish_git_prompt
162	2231	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2069	2069	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
74	74	--> test -n "$repo_info"; 
23	23	--> or return
21	21	-> if begin
3039	3039	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
41	41	-> end
30	30	-> echo
52	52	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
27	27	> echo $_ " "; 
43	105	> __fish_pwd
62	62	-> pwd
163	163	> echo $_ " "; 
158	309	> __fish_pwd
151	151	-> pwd
235	5182	> cls
4947	4947	-> clear $argv; 
461	19904	> fish_prompt
102	102	-> set -l last_status $status
46	46	-> if not set -q __fish_prompt_hostname
43	43	-> if not set -q __fish_prompt_char
111	211	-> set -l normal (set_color normal)
100	100	--> set_color normal
122	182	-> set -l red (set_color red)
60	60	--> set_color red
91	131	-> set -l cyan (set_color cyan)
40	40	--> set_color cyan
164	214	-> set -l white (set_color white)
50	50	--> set_color white
132	252	-> set -l gray (set_color -o cyan)
120	120	--> set_color -o cyan
139	211	-> set -l brwhite (set_color -o white)
72	72	--> set_color -o white
100	544	-> set -g __fish_git_prompt_showdirtystate true
205	444	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
69	69	---> if status --is-interactive
93	93	---> if test $argv[3] = __fish_git_prompt_show_informative_status
65	65	---> commandline -f repaint ^/dev/null
12	12	---> end
66	407	-> set -g __fish_git_prompt_showuntrackedfiles true
165	341	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
38	38	---> if status --is-interactive
69	69	---> if test $argv[3] = __fish_git_prompt_show_informative_status
55	55	---> commandline -f repaint ^/dev/null
14	14	---> end
65	349	-> set -g __fish_git_prompt_showstashstate true
128	284	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
39	39	---> if status --is-interactive
68	68	---> if test $argv[3] = __fish_git_prompt_show_informative_status
36	36	---> commandline -f repaint ^/dev/null
13	13	---> end
59	4207	-> set -g __fish_git_prompt_color green
324	4148	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
41	41	---> if status --is-interactive
48	48	---> set -l var $argv[3]
188	188	---> set -e _$var
164	164	---> set -e _{$var}_done
116	116	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
57	57	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
135	135	---> set -e ___fish_git_prompt_color_$name
133	133	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
179	179	---> set -e ___fish_git_prompt_color_$name
179	179	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
160	160	---> set -e ___fish_git_prompt_color_$name
164	164	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
133	133	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
151	151	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
84	84	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
47	3222	-> set -g __fish_git_prompt_color_flags red
249	3175	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
33	33	---> if status --is-interactive
35	35	---> set -l var $argv[3]
80	80	---> set -e _$var
84	84	---> set -e _{$var}_done
86	86	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
82	82	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
88	88	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
90	90	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
454	454	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
9	9	---> end
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
37	37	-> set -l pcolor $gray
35	35	-> if test $last_status -ne 0
160	3310	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
115	3150	--> prompt_pwd
3035	3035	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
852	3068	-> __fish_git_prompt
101	2152	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2051	2051	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
50	50	--> test -n "$repo_info"; 
14	14	--> or return
19	19	-> if begin
2729	2729	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
31	31	-> end
32	32	-> echo
61	61	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
46	123	> __fish_pwd
77	77	-> pwd
388	21876	> fish_prompt
61	61	-> set -l last_status $status
46	46	-> if not set -q __fish_prompt_hostname
112	112	-> if not set -q __fish_prompt_char
72	112	-> set -l normal (set_color normal)
40	40	--> set_color normal
59	85	-> set -l red (set_color red)
26	26	--> set_color red
56	82	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
84	119	-> set -l white (set_color white)
35	35	--> set_color white
100	149	-> set -l gray (set_color -o cyan)
49	49	--> set_color -o cyan
101	152	-> set -l brwhite (set_color -o white)
51	51	--> set_color -o white
86	455	-> set -g __fish_git_prompt_showdirtystate true
175	369	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
56	56	---> if status --is-interactive
76	76	---> if test $argv[3] = __fish_git_prompt_show_informative_status
47	47	---> commandline -f repaint ^/dev/null
15	15	---> end
76	417	-> set -g __fish_git_prompt_showuntrackedfiles true
159	341	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
45	45	---> if status --is-interactive
74	74	---> if test $argv[3] = __fish_git_prompt_show_informative_status
46	46	---> commandline -f repaint ^/dev/null
17	17	---> end
77	422	-> set -g __fish_git_prompt_showstashstate true
162	345	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
49	49	---> if status --is-interactive
72	72	---> if test $argv[3] = __fish_git_prompt_show_informative_status
46	46	---> commandline -f repaint ^/dev/null
16	16	---> end
75	5390	-> set -g __fish_git_prompt_color green
372	5315	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
52	52	---> if status --is-interactive
60	60	---> set -l var $argv[3]
179	179	---> set -e _$var
211	211	---> set -e _{$var}_done
132	132	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
80	80	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
197	197	---> set -e ___fish_git_prompt_color_$name
196	196	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
185	185	---> set -e ___fish_git_prompt_color_$name
196	196	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
190	190	---> set -e ___fish_git_prompt_color_$name
193	193	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
259	259	---> set -e ___fish_git_prompt_color_$name
184	184	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
177	177	---> set -e ___fish_git_prompt_color_$name
170	170	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
164	164	---> set -e ___fish_git_prompt_color_$name
169	169	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
163	163	---> set -e ___fish_git_prompt_color_$name
153	153	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
136	136	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
140	140	---> set -e ___fish_git_prompt_color_$name
133	133	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
127	127	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
14	14	---> end
44	44	---> commandline -f repaint ^/dev/null
14	14	---> end
66	4563	-> set -g __fish_git_prompt_color_flags red
372	4497	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
49	49	---> if status --is-interactive
53	53	---> set -l var $argv[3]
126	126	---> set -e _$var
129	129	---> set -e _{$var}_done
123	123	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
71	71	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
130	130	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
127	127	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
146	146	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
140	140	---> set -e ___fish_git_prompt_color_$name
144	144	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
135	135	---> set -e ___fish_git_prompt_color_$name
143	143	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
145	145	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
132	132	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
138	138	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
133	133	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
16	16	---> end
45	45	---> commandline -f repaint ^/dev/null
11	11	---> end
39	39	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
176	3808	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
181	3632	--> prompt_pwd
3451	3451	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
890	3036	-> __fish_git_prompt
125	2086	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1961	1961	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
47	47	--> test -n "$repo_info"; 
13	13	--> or return
21	21	-> if begin
2263	2263	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
32	32	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
36	36	> echo $_ " "; 
47	119	> __fish_pwd
72	72	-> pwd
98	98	> echo $_ " "; 
109	303	> __fish_pwd
194	194	-> pwd
94	2526	> cdd
942	2432	-> ~/Desktop/ $argv; 
105	105	--> if status --is-command-substitution
112	112	--> set -l previous $PWD
134	134	--> if test $argv[1] = - ^/dev/null
168	168	--> builtin cd $argv[1]
104	104	--> set -l cd_status $status
262	262	--> if test $cd_status = 0 -a "$PWD" != "$previous"
242	242	--> set -g dirprev $dirprev $previous
218	218	--> set -e dirnext
71	71	--> set -g __fish_cd_direction prev
29	29	--> end
45	45	--> return $cd_status
405	21176	> fish_prompt
65	65	-> set -l last_status $status
52	52	-> if not set -q __fish_prompt_hostname
54	54	-> if not set -q __fish_prompt_char
112	180	-> set -l normal (set_color normal)
68	68	--> set_color normal
102	158	-> set -l red (set_color red)
56	56	--> set_color red
97	142	-> set -l cyan (set_color cyan)
45	45	--> set_color cyan
100	145	-> set -l white (set_color white)
45	45	--> set_color white
180	308	-> set -l gray (set_color -o cyan)
128	128	--> set_color -o cyan
306	376	-> set -l brwhite (set_color -o white)
70	70	--> set_color -o white
139	472	-> set -g __fish_git_prompt_showdirtystate true
162	333	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
53	53	---> if status --is-interactive
64	64	---> if test $argv[3] = __fish_git_prompt_show_informative_status
41	41	---> commandline -f repaint ^/dev/null
13	13	---> end
63	340	-> set -g __fish_git_prompt_showuntrackedfiles true
126	277	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
45	45	---> if status --is-interactive
58	58	---> if test $argv[3] = __fish_git_prompt_show_informative_status
35	35	---> commandline -f repaint ^/dev/null
13	13	---> end
82	475	-> set -g __fish_git_prompt_showstashstate true
192	393	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
67	67	---> if status --is-interactive
80	80	---> if test $argv[3] = __fish_git_prompt_show_informative_status
41	41	---> commandline -f repaint ^/dev/null
13	13	---> end
67	5259	-> set -g __fish_git_prompt_color green
339	5192	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
44	44	---> if status --is-interactive
49	49	---> set -l var $argv[3]
179	179	---> set -e _$var
631	631	---> set -e _{$var}_done
118	118	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
64	64	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
162	162	---> set -e ___fish_git_prompt_color_$name
163	163	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
153	153	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
165	165	---> set -e ___fish_git_prompt_color_$name
246	246	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
144	144	---> set -e ___fish_git_prompt_color_$name
192	192	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
140	140	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
138	138	---> set -e ___fish_git_prompt_color_$name
163	163	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
132	132	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
10	10	---> end
37	37	---> commandline -f repaint ^/dev/null
11	11	---> end
61	3418	-> set -g __fish_git_prompt_color_flags red
273	3357	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
38	38	---> if status --is-interactive
35	35	---> set -l var $argv[3]
108	108	---> set -e _$var
111	111	---> set -e _{$var}_done
86	86	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
109	109	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
100	100	---> set -e ___fish_git_prompt_color_$name
93	93	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
87	87	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
86	86	---> set -e ___fish_git_prompt_color_$name
88	88	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
93	93	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
31	31	---> commandline -f repaint ^/dev/null
9	9	---> end
38	38	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
212	3579	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
86	3367	--> prompt_pwd
3281	3281	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
756	3105	-> __fish_git_prompt
109	2286	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2177	2177	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
49	49	--> test -n "$repo_info"; 
14	14	--> or return
23	23	-> if begin
2430	2430	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
28	28	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
28	28	> echo $_ " "; 
44	109	> __fish_pwd
65	65	-> pwd
332	17507	> fish_prompt
44	44	-> set -l last_status $status
31	31	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
70	110	-> set -l normal (set_color normal)
40	40	--> set_color normal
59	90	-> set -l red (set_color red)
31	31	--> set_color red
57	82	-> set -l cyan (set_color cyan)
25	25	--> set_color cyan
57	83	-> set -l white (set_color white)
26	26	--> set_color white
89	133	-> set -l gray (set_color -o cyan)
44	44	--> set_color -o cyan
168	205	-> set -l brwhite (set_color -o white)
37	37	--> set_color -o white
83	344	-> set -g __fish_git_prompt_showdirtystate true
138	261	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
36	36	---> if status --is-interactive
47	47	---> if test $argv[3] = __fish_git_prompt_show_informative_status
30	30	---> commandline -f repaint ^/dev/null
10	10	---> end
46	250	-> set -g __fish_git_prompt_showuntrackedfiles true
93	204	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
34	34	---> if status --is-interactive
42	42	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
53	271	-> set -g __fish_git_prompt_showstashstate true
98	218	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
32	32	---> if status --is-interactive
42	42	---> if test $argv[3] = __fish_git_prompt_show_informative_status
31	31	---> commandline -f repaint ^/dev/null
15	15	---> end
73	3947	-> set -g __fish_git_prompt_color green
281	3874	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
32	32	---> if status --is-interactive
36	36	---> set -l var $argv[3]
161	161	---> set -e _$var
115	115	---> set -e _{$var}_done
83	83	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
49	49	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
112	112	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
473	473	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
97	97	---> set -e ___fish_git_prompt_color_$name
101	101	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
88	88	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
49	3173	-> set -g __fish_git_prompt_color_flags red
246	3124	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
33	33	---> if status --is-interactive
34	34	---> set -l var $argv[3]
80	80	---> set -e _$var
84	84	---> set -e _{$var}_done
82	82	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
82	82	---> set -e ___fish_git_prompt_color_$name
139	139	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
97	97	---> set -e ___fish_git_prompt_color_$name
91	91	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
88	88	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
157	157	---> set -e ___fish_git_prompt_color_$name
104	104	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
99	99	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
94	94	---> set -e ___fish_git_prompt_color_$name
98	98	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
88	88	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
30	30	---> commandline -f repaint ^/dev/null
10	10	---> end
37	37	-> set -l pcolor $gray
37	37	-> if test $last_status -ne 0
141	3024	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
112	2883	--> prompt_pwd
2771	2771	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
722	2856	-> __fish_git_prompt
123	2065	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1942	1942	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
56	56	--> test -n "$repo_info"; 
13	13	--> or return
18	18	-> if begin
2287	2287	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
39	39	-> end
31	31	-> echo
53	53	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
36	36	> echo $_ " "; 
60	164	> __fish_pwd
104	104	-> pwd
95	95	> echo $_ " "; 
108	224	> __fish_pwd
116	116	-> pwd
661	2539	> cd node
138	138	-> if status --is-command-substitution
211	211	-> set -l previous $PWD
144	144	-> if test $argv[1] = - ^/dev/null
325	325	-> builtin cd $argv[1]
129	129	-> set -l cd_status $status
214	214	-> if test $cd_status = 0 -a "$PWD" != "$previous"
255	255	-> set -g dirprev $dirprev $previous
222	222	-> set -e dirnext
115	115	-> set -g __fish_cd_direction prev
51	51	-> end
74	74	-> return $cd_status
454	21954	> fish_prompt
70	70	-> set -l last_status $status
53	53	-> if not set -q __fish_prompt_hostname
53	53	-> if not set -q __fish_prompt_char
141	210	-> set -l normal (set_color normal)
69	69	--> set_color normal
104	152	-> set -l red (set_color red)
48	48	--> set_color red
100	146	-> set -l cyan (set_color cyan)
46	46	--> set_color cyan
110	158	-> set -l white (set_color white)
48	48	--> set_color white
101	147	-> set -l gray (set_color -o cyan)
46	46	--> set_color -o cyan
100	148	-> set -l brwhite (set_color -o white)
48	48	--> set_color -o white
78	421	-> set -g __fish_git_prompt_showdirtystate true
149	343	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
69	69	---> if status --is-interactive
74	74	---> if test $argv[3] = __fish_git_prompt_show_informative_status
38	38	---> commandline -f repaint ^/dev/null
13	13	---> end
73	395	-> set -g __fish_git_prompt_showuntrackedfiles true
147	322	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
37	37	---> if status --is-interactive
63	63	---> if test $argv[3] = __fish_git_prompt_show_informative_status
57	57	---> commandline -f repaint ^/dev/null
18	18	---> end
86	626	-> set -g __fish_git_prompt_showstashstate true
168	540	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
179	179	---> if status --is-interactive
136	136	---> if test $argv[3] = __fish_git_prompt_show_informative_status
43	43	---> commandline -f repaint ^/dev/null
14	14	---> end
71	5369	-> set -g __fish_git_prompt_color green
362	5298	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
51	51	---> if status --is-interactive
53	53	---> set -l var $argv[3]
198	198	---> set -e _$var
204	204	---> set -e _{$var}_done
148	148	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
68	68	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
163	163	---> set -e ___fish_git_prompt_color_$name
161	161	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
155	155	---> set -e ___fish_git_prompt_color_$name
157	157	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
151	151	---> set -e ___fish_git_prompt_color_$name
157	157	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
171	171	---> set -e ___fish_git_prompt_color_{$name}_done
34	34	---> end
572	572	---> set -e ___fish_git_prompt_color_$name
147	147	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
133	133	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
127	127	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
10	10	---> end
46	46	---> commandline -f repaint ^/dev/null
19	19	---> end
59	3671	-> set -g __fish_git_prompt_color_flags red
271	3612	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
45	45	---> if status --is-interactive
42	42	---> set -l var $argv[3]
132	132	---> set -e _$var
133	133	---> set -e _{$var}_done
100	100	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
72	72	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
122	122	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
139	139	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
102	102	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
102	102	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
102	102	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
27	27	---> end
131	131	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
86	86	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
9	9	---> end
30	30	---> commandline -f repaint ^/dev/null
10	10	---> end
38	38	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
146	3427	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
80	3281	--> prompt_pwd
3201	3201	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
822	3272	-> __fish_git_prompt
119	2387	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2268	2268	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
49	49	--> test -n "$repo_info"; 
14	14	--> or return
21	21	-> if begin
2943	2943	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
52	52	-> end
33	33	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
44	118	> __fish_pwd
74	74	-> pwd
371	17748	> fish_prompt
64	64	-> set -l last_status $status
51	51	-> if not set -q __fish_prompt_hostname
49	49	-> if not set -q __fish_prompt_char
108	173	-> set -l normal (set_color normal)
65	65	--> set_color normal
118	163	-> set -l red (set_color red)
45	45	--> set_color red
72	105	-> set -l cyan (set_color cyan)
33	33	--> set_color cyan
62	91	-> set -l white (set_color white)
29	29	--> set_color white
60	89	-> set -l gray (set_color -o cyan)
29	29	--> set_color -o cyan
59	88	-> set -l brwhite (set_color -o white)
29	29	--> set_color -o white
51	275	-> set -g __fish_git_prompt_showdirtystate true
102	224	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
37	37	---> if status --is-interactive
46	46	---> if test $argv[3] = __fish_git_prompt_show_informative_status
30	30	---> commandline -f repaint ^/dev/null
9	9	---> end
44	243	-> set -g __fish_git_prompt_showuntrackedfiles true
90	199	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
33	33	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
44	232	-> set -g __fish_git_prompt_showstashstate true
87	188	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
27	27	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
46	3874	-> set -g __fish_git_prompt_color green
279	3828	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
34	34	---> if status --is-interactive
34	34	---> set -l var $argv[3]
177	177	---> set -e _$var
153	153	---> set -e _{$var}_done
150	150	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
115	115	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
98	98	---> set -e ___fish_git_prompt_color_$name
91	91	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
84	84	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
88	88	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
455	455	---> set -e ___fish_git_prompt_color_$name
104	104	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
195	195	---> set -e ___fish_git_prompt_color_$name
104	104	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
33	33	---> commandline -f repaint ^/dev/null
10	10	---> end
51	2949	-> set -g __fish_git_prompt_color_flags red
234	2898	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
43	43	---> if status --is-interactive
37	37	---> set -l var $argv[3]
84	84	---> set -e _$var
87	87	---> set -e _{$var}_done
89	89	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
84	84	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
106	106	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
86	86	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
87	87	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
29	29	---> commandline -f repaint ^/dev/null
10	10	---> end
37	37	-> set -l pcolor $gray
35	35	-> if test $last_status -ne 0
135	3071	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
210	2936	--> prompt_pwd
2726	2726	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
685	2701	-> __fish_git_prompt
109	1957	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1848	1848	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
44	44	--> test -n "$repo_info"; 
15	15	--> or return
19	19	-> if begin
2950	2950	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
30	30	-> end
31	31	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
45	122	> __fish_pwd
77	77	-> pwd
73	73	> echo $_ " "; 
76	186	> __fish_pwd
110	110	-> pwd
201	4057	> cls
3856	3856	-> clear $argv; 
366	20161	> fish_prompt
74	74	-> set -l last_status $status
45	45	-> if not set -q __fish_prompt_hostname
42	42	-> if not set -q __fish_prompt_char
96	159	-> set -l normal (set_color normal)
63	63	--> set_color normal
77	121	-> set -l red (set_color red)
44	44	--> set_color red
68	99	-> set -l cyan (set_color cyan)
31	31	--> set_color cyan
68	99	-> set -l white (set_color white)
31	31	--> set_color white
67	99	-> set -l gray (set_color -o cyan)
32	32	--> set_color -o cyan
68	101	-> set -l brwhite (set_color -o white)
33	33	--> set_color -o white
56	321	-> set -g __fish_git_prompt_showdirtystate true
123	265	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
41	41	---> if status --is-interactive
55	55	---> if test $argv[3] = __fish_git_prompt_show_informative_status
36	36	---> commandline -f repaint ^/dev/null
10	10	---> end
51	282	-> set -g __fish_git_prompt_showuntrackedfiles true
112	231	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
31	31	---> if status --is-interactive
47	47	---> if test $argv[3] = __fish_git_prompt_show_informative_status
31	31	---> commandline -f repaint ^/dev/null
10	10	---> end
73	507	-> set -g __fish_git_prompt_showstashstate true
213	434	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
36	36	---> if status --is-interactive
54	54	---> if test $argv[3] = __fish_git_prompt_show_informative_status
101	101	---> commandline -f repaint ^/dev/null
30	30	---> end
103	4431	-> set -g __fish_git_prompt_color green
422	4328	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
52	52	---> if status --is-interactive
58	58	---> set -l var $argv[3]
150	150	---> set -e _$var
134	134	---> set -e _{$var}_done
98	98	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
55	55	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
167	167	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
127	127	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
124	124	---> set -e ___fish_git_prompt_color_$name
182	182	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
136	136	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
155	155	---> set -e ___fish_git_prompt_color_$name
178	178	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
141	141	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
49	4480	-> set -g __fish_git_prompt_color_flags red
327	4431	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
38	38	---> if status --is-interactive
35	35	---> set -l var $argv[3]
104	104	---> set -e _$var
110	110	---> set -e _{$var}_done
123	123	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
78	78	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
412	412	---> set -e ___fish_git_prompt_color_$name
144	144	---> set -e ___fish_git_prompt_color_{$name}_done
36	36	---> end
166	166	---> set -e ___fish_git_prompt_color_$name
144	144	---> set -e ___fish_git_prompt_color_{$name}_done
41	41	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
145	145	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
146	146	---> set -e ___fish_git_prompt_color_$name
186	186	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
101	101	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
36	36	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
147	3293	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
107	3146	--> prompt_pwd
3039	3039	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
715	3023	-> __fish_git_prompt
112	2244	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2132	2132	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
51	51	--> test -n "$repo_info"; 
13	13	--> or return
18	18	-> if begin
2411	2411	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
32	32	-> echo
55	55	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
29	29	> echo $_ " "; 
44	103	> __fish_pwd
59	59	-> pwd
314	19851	> fish_prompt
41	41	-> set -l last_status $status
30	30	-> if not set -q __fish_prompt_hostname
29	29	-> if not set -q __fish_prompt_char
64	100	-> set -l normal (set_color normal)
36	36	--> set_color normal
57	84	-> set -l red (set_color red)
27	27	--> set_color red
56	82	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
56	82	-> set -l white (set_color white)
26	26	--> set_color white
55	81	-> set -l gray (set_color -o cyan)
26	26	--> set_color -o cyan
57	83	-> set -l brwhite (set_color -o white)
26	26	--> set_color -o white
45	256	-> set -g __fish_git_prompt_showdirtystate true
101	211	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
32	32	---> if status --is-interactive
44	44	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
8	8	---> end
43	238	-> set -g __fish_git_prompt_showuntrackedfiles true
89	195	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
45	45	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
42	228	-> set -g __fish_git_prompt_showstashstate true
87	186	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
26	26	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
8	8	---> end
45	4173	-> set -g __fish_git_prompt_color green
305	4128	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
29	29	---> if status --is-interactive
38	38	---> set -l var $argv[3]
117	117	---> set -e _$var
131	131	---> set -e _{$var}_done
120	120	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
71	71	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
132	132	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
151	151	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
121	121	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
144	144	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
50	4214	-> set -g __fish_git_prompt_color_flags red
478	4164	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
33	33	---> if status --is-interactive
35	35	---> set -l var $argv[3]
104	104	---> set -e _$var
110	110	---> set -e _{$var}_done
87	87	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
102	102	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
101	101	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
62	62	---> end
443	443	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
37	37	-> set -l pcolor $gray
43	43	-> if test $last_status -ne 0
144	3314	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
124	3170	--> prompt_pwd
3046	3046	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
717	3011	-> __fish_git_prompt
98	2231	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2133	2133	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
49	49	--> test -n "$repo_info"; 
14	14	--> or return
19	19	-> if begin
3232	3232	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
37	37	-> end
41	41	-> echo
82	82	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
44	44	> echo $_ " "; 
66	159	> __fish_pwd
93	93	-> pwd
80	80	> echo $_ " "; 
75	234	> __fish_pwd
159	159	-> pwd
3272031	3272031	> learnyounode
285	16912	> fish_prompt
60	60	-> set -l last_status $status
30	30	-> if not set -q __fish_prompt_hostname
27	27	-> if not set -q __fish_prompt_char
61	108	-> set -l normal (set_color normal)
47	47	--> set_color normal
55	80	-> set -l red (set_color red)
25	25	--> set_color red
53	77	-> set -l cyan (set_color cyan)
24	24	--> set_color cyan
52	76	-> set -l white (set_color white)
24	24	--> set_color white
52	77	-> set -l gray (set_color -o cyan)
25	25	--> set_color -o cyan
53	78	-> set -l brwhite (set_color -o white)
25	25	--> set_color -o white
44	252	-> set -g __fish_git_prompt_showdirtystate true
95	208	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
28	28	---> if status --is-interactive
47	47	---> if test $argv[3] = __fish_git_prompt_show_informative_status
29	29	---> commandline -f repaint ^/dev/null
9	9	---> end
41	223	-> set -g __fish_git_prompt_showuntrackedfiles true
88	182	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
24	24	---> if status --is-interactive
38	38	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
8	8	---> end
39	214	-> set -g __fish_git_prompt_showstashstate true
83	175	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
24	24	---> if status --is-interactive
37	37	---> if test $argv[3] = __fish_git_prompt_show_informative_status
23	23	---> commandline -f repaint ^/dev/null
8	8	---> end
42	3355	-> set -g __fish_git_prompt_color green
255	3313	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
27	27	---> if status --is-interactive
31	31	---> set -l var $argv[3]
151	151	---> set -e _$var
146	146	---> set -e _{$var}_done
101	101	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
44	44	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
130	130	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
98	98	---> set -e ___fish_git_prompt_color_$name
99	99	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
98	98	---> set -e ___fish_git_prompt_color_$name
104	104	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
94	94	---> set -e ___fish_git_prompt_color_$name
98	98	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
99	99	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
31	31	---> commandline -f repaint ^/dev/null
10	10	---> end
46	3494	-> set -g __fish_git_prompt_color_flags red
283	3448	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
35	35	---> if status --is-interactive
36	36	---> set -l var $argv[3]
94	94	---> set -e _$var
95	95	---> set -e _{$var}_done
90	90	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
48	48	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
92	92	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
101	101	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
96	96	---> set -e ___fish_git_prompt_color_$name
94	94	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
98	98	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
386	386	---> set -e ___fish_git_prompt_color_$name
99	99	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
8	8	---> end
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
36	36	-> set -l pcolor $gray
35	35	-> if test $last_status -ne 0
138	3471	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
214	3333	--> prompt_pwd
3119	3119	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
666	2636	-> __fish_git_prompt
95	1911	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1816	1816	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
46	46	--> test -n "$repo_info"; 
13	13	--> or return
19	19	-> if begin
2169	2169	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
29	29	-> echo
52	52	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
28	28	> echo $_ " "; 
42	102	> __fish_pwd
60	60	-> pwd
327	27785	> fish_prompt
49	49	-> set -l last_status $status
32	32	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
66	106	-> set -l normal (set_color normal)
40	40	--> set_color normal
58	85	-> set -l red (set_color red)
27	27	--> set_color red
56	82	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
57	89	-> set -l white (set_color white)
32	32	--> set_color white
57	84	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
57	85	-> set -l brwhite (set_color -o white)
28	28	--> set_color -o white
103	543	-> set -g __fish_git_prompt_showdirtystate true
243	440	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
58	58	---> if status --is-interactive
76	76	---> if test $argv[3] = __fish_git_prompt_show_informative_status
49	49	---> commandline -f repaint ^/dev/null
14	14	---> end
76	331	-> set -g __fish_git_prompt_showuntrackedfiles true
119	255	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
54	54	---> if status --is-interactive
46	46	---> if test $argv[3] = __fish_git_prompt_show_informative_status
27	27	---> commandline -f repaint ^/dev/null
9	9	---> end
45	245	-> set -g __fish_git_prompt_showstashstate true
90	200	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
28	28	---> if status --is-interactive
47	47	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
46	3786	-> set -g __fish_git_prompt_color green
294	3740	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
33	33	---> if status --is-interactive
38	38	---> set -l var $argv[3]
158	158	---> set -e _$var
125	125	---> set -e _{$var}_done
85	85	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
113	113	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
36	36	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
121	121	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
33	33	---> commandline -f repaint ^/dev/null
10	10	---> end
59	13929	-> set -g __fish_git_prompt_color_flags red
322	13870	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
35	35	---> if status --is-interactive
36	36	---> set -l var $argv[3]
114	114	---> set -e _$var
109	109	---> set -e _{$var}_done
87	87	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
50	50	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
110	110	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
10286	10286	---> set -e ___fish_git_prompt_color_$name
165	165	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
10	10	---> end
42	42	---> commandline -f repaint ^/dev/null
10	10	---> end
40	40	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
141	3017	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
115	2876	--> prompt_pwd
2761	2761	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
697	2640	-> __fish_git_prompt
109	1886	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1777	1777	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
41	41	--> test -n "$repo_info"; 
16	16	--> or return
18	18	-> if begin
2113	2113	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
35	35	-> end
29	29	-> echo
52	52	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
28	28	> echo $_ " "; 
43	104	> __fish_pwd
61	61	-> pwd
75893	147838	> down-or-search
155	155	-> if commandline --search-mode
368	443	-> set lineno (commandline -L)
75	75	--> commandline -L
482	71156	-> set line_count (commandline|wc -l)
70674	70674	--> commandline|wc -l
91	91	-> switch $lineno
70	70	-> commandline -f down-line
30	30	-> end
545	1340	> up-or-search
146	146	-> if commandline --search-mode
383	458	-> set lineno (commandline -L)
75	75	--> commandline -L
77	77	-> switch $lineno
70	70	-> commandline -f history-search-backward
44	44	-> case '*'
335	548	> up-or-search
108	108	-> if commandline --search-mode
69	69	-> commandline -f history-search-backward
36	36	-> return
341	552	> up-or-search
107	107	-> if commandline --search-mode
68	68	-> commandline -f history-search-backward
36	36	-> return
469	718	> up-or-search
143	143	-> if commandline --search-mode
70	70	-> commandline -f history-search-backward
36	36	-> return
483	691	> down-or-search
103	103	-> if commandline --search-mode
68	68	-> commandline -f history-search-forward
37	37	-> return
289	454	> down-or-search
84	84	-> if commandline --search-mode
53	53	-> commandline -f history-search-forward
28	28	-> return
386	599	> down-or-search
104	104	-> if commandline --search-mode
72	72	-> commandline -f history-search-forward
37	37	-> return
370	601	> down-or-search
126	126	-> if commandline --search-mode
69	69	-> commandline -f history-search-forward
36	36	-> return
478	776	> up-or-search
162	162	-> if commandline --search-mode
94	94	-> commandline -f history-search-backward
42	42	-> return
351	351	> echo $_ " "; 
237	454	> __fish_pwd
217	217	-> pwd
1595481	1595481	> learnyounode verify httpGetAsync.js 
314	66910	> fish_prompt
76	76	-> set -l last_status $status
33	33	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
68	131	-> set -l normal (set_color normal)
63	63	--> set_color normal
66	94	-> set -l red (set_color red)
28	28	--> set_color red
54	81	-> set -l cyan (set_color cyan)
27	27	--> set_color cyan
54	78	-> set -l white (set_color white)
24	24	--> set_color white
54	79	-> set -l gray (set_color -o cyan)
25	25	--> set_color -o cyan
54	82	-> set -l brwhite (set_color -o white)
28	28	--> set_color -o white
43	304	-> set -g __fish_git_prompt_showdirtystate true
116	261	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
44	44	---> if status --is-interactive
61	61	---> if test $argv[3] = __fish_git_prompt_show_informative_status
31	31	---> commandline -f repaint ^/dev/null
9	9	---> end
42	223	-> set -g __fish_git_prompt_showuntrackedfiles true
84	181	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
25	25	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
23	23	---> commandline -f repaint ^/dev/null
8	8	---> end
40	214	-> set -g __fish_git_prompt_showstashstate true
83	174	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
24	24	---> if status --is-interactive
37	37	---> if test $argv[3] = __fish_git_prompt_show_informative_status
22	22	---> commandline -f repaint ^/dev/null
8	8	---> end
41	3764	-> set -g __fish_git_prompt_color green
283	3723	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
28	28	---> if status --is-interactive
31	31	---> set -l var $argv[3]
183	183	---> set -e _$var
139	139	---> set -e _{$var}_done
96	96	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
44	44	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
127	127	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
97	97	---> set -e ___fish_git_prompt_color_$name
99	99	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
107	107	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
98	98	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
98	98	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
445	445	---> set -e ___fish_git_prompt_color_$name
99	99	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
94	94	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
100	100	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
89	89	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
29	29	---> commandline -f repaint ^/dev/null
9	9	---> end
49	3149	-> set -g __fish_git_prompt_color_flags red
261	3100	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
34	34	---> if status --is-interactive
35	35	---> set -l var $argv[3]
90	90	---> set -e _$var
94	94	---> set -e _{$var}_done
80	80	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
49	49	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
92	92	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
89	89	---> set -e ___fish_git_prompt_color_$name
94	94	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
90	90	---> set -e ___fish_git_prompt_color_$name
94	94	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
9	9	---> end
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
36	36	-> set -l pcolor $gray
40	40	-> if test $last_status -ne 0
33	33	-> set pcolor $red
11	11	-> end
149	28725	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
107	28576	--> prompt_pwd
28469	28469	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
1172	24837	-> __fish_git_prompt
143	23558	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
23415	23415	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
80	80	--> test -n "$repo_info"; 
27	27	--> or return
35	35	-> if begin
4389	4389	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
36	36	-> end
41	41	-> echo
75	75	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
41	41	> echo $_ " "; 
62	166	> __fish_pwd
104	104	-> pwd
461	21205	> fish_prompt
102	102	-> set -l last_status $status
73	73	-> if not set -q __fish_prompt_hostname
72	72	-> if not set -q __fish_prompt_char
190	295	-> set -l normal (set_color normal)
105	105	--> set_color normal
115	167	-> set -l red (set_color red)
52	52	--> set_color red
113	169	-> set -l cyan (set_color cyan)
56	56	--> set_color cyan
115	168	-> set -l white (set_color white)
53	53	--> set_color white
111	166	-> set -l gray (set_color -o cyan)
55	55	--> set_color -o cyan
117	174	-> set -l brwhite (set_color -o white)
57	57	--> set_color -o white
88	490	-> set -g __fish_git_prompt_showdirtystate true
191	402	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
59	59	---> if status --is-interactive
81	81	---> if test $argv[3] = __fish_git_prompt_show_informative_status
54	54	---> commandline -f repaint ^/dev/null
17	17	---> end
89	479	-> set -g __fish_git_prompt_showuntrackedfiles true
178	390	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
62	62	---> if status --is-interactive
82	82	---> if test $argv[3] = __fish_git_prompt_show_informative_status
51	51	---> commandline -f repaint ^/dev/null
17	17	---> end
81	475	-> set -g __fish_git_prompt_showstashstate true
180	394	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
52	52	---> if status --is-interactive
92	92	---> if test $argv[3] = __fish_git_prompt_show_informative_status
53	53	---> commandline -f repaint ^/dev/null
17	17	---> end
79	4656	-> set -g __fish_git_prompt_color green
390	4577	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
52	52	---> if status --is-interactive
59	59	---> set -l var $argv[3]
173	173	---> set -e _$var
140	140	---> set -e _{$var}_done
127	127	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
79	79	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
133	133	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
133	133	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
134	134	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
132	132	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
146	146	---> set -e ___fish_git_prompt_color_$name
145	145	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
134	134	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
15	15	---> end
48	48	---> commandline -f repaint ^/dev/null
17	17	---> end
70	4480	-> set -g __fish_git_prompt_color_flags red
350	4410	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
53	53	---> if status --is-interactive
59	59	---> set -l var $argv[3]
180	180	---> set -e _$var
137	137	---> set -e _{$var}_done
134	134	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
77	77	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
151	151	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
153	153	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
153	153	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
146	146	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
38	38	---> end
145	145	---> set -e ___fish_git_prompt_color_$name
189	189	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
139	139	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
9	9	---> end
33	33	---> commandline -f repaint ^/dev/null
10	10	---> end
38	38	-> set -l pcolor $gray
39	39	-> if test $last_status -ne 0
34	34	-> set pcolor $red
11	11	-> end
140	3553	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
167	3413	--> prompt_pwd
3246	3246	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
638	2759	-> __fish_git_prompt
112	2055	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1943	1943	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
53	53	--> test -n "$repo_info"; 
13	13	--> or return
18	18	-> if begin
2209	2209	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
36	36	-> end
29	29	-> echo
52	52	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
28	28	> echo $_ " "; 
42	98	> __fish_pwd
56	56	-> pwd
737	81957	> down-or-search
188	188	-> if commandline --search-mode
423	498	-> set lineno (commandline -L)
75	75	--> commandline -L
745	80279	-> set line_count (commandline|wc -l)
79534	79534	--> commandline|wc -l
127	127	-> switch $lineno
88	88	-> commandline -f down-line
40	40	-> end
546	6326	> down-or-search
110	110	-> if commandline --search-mode
344	433	-> set lineno (commandline -L)
89	89	--> commandline -L
501	5008	-> set line_count (commandline|wc -l)
4507	4507	--> commandline|wc -l
89	89	-> switch $lineno
110	110	-> commandline -f down-line
30	30	-> end
577	1489	> up-or-search
113	113	-> if commandline --search-mode
397	469	-> set lineno (commandline -L)
72	72	--> commandline -L
118	118	-> switch $lineno
163	163	-> commandline -f history-search-backward
49	49	-> case '*'
222	222	> echo $_ " "; 
170	428	> __fish_pwd
258	258	-> pwd
699245	699245	> learnyounode verify httpGetAsync.js 
360	167857	> fish_prompt
70	70	-> set -l last_status $status
33	33	-> if not set -q __fish_prompt_hostname
65	65	-> if not set -q __fish_prompt_char
74	165	-> set -l normal (set_color normal)
91	91	--> set_color normal
61	90	-> set -l red (set_color red)
29	29	--> set_color red
58	85	-> set -l cyan (set_color cyan)
27	27	--> set_color cyan
58	85	-> set -l white (set_color white)
27	27	--> set_color white
58	90	-> set -l gray (set_color -o cyan)
32	32	--> set_color -o cyan
65	95	-> set -l brwhite (set_color -o white)
30	30	--> set_color -o white
47	330	-> set -g __fish_git_prompt_showdirtystate true
127	283	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
47	47	---> if status --is-interactive
71	71	---> if test $argv[3] = __fish_git_prompt_show_informative_status
29	29	---> commandline -f repaint ^/dev/null
9	9	---> end
41	222	-> set -g __fish_git_prompt_showuntrackedfiles true
83	181	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
38	38	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
9	9	---> end
41	219	-> set -g __fish_git_prompt_showstashstate true
83	178	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
24	24	---> if status --is-interactive
37	37	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
8	8	---> end
44	3510	-> set -g __fish_git_prompt_color green
300	3466	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
28	28	---> if status --is-interactive
31	31	---> set -l var $argv[3]
158	158	---> set -e _$var
122	122	---> set -e _{$var}_done
118	118	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
61	61	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
146	146	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
86	86	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
88	88	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
156	156	---> set -e ___fish_git_prompt_color_$name
153	153	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
136	136	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
53	3969	-> set -g __fish_git_prompt_color_flags red
292	3916	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
34	34	---> if status --is-interactive
36	36	---> set -l var $argv[3]
111	111	---> set -e _$var
113	113	---> set -e _{$var}_done
131	131	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
85	85	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
330	330	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
156	156	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
37	37	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
32	32	-> set pcolor $red
11	11	-> end
220	93260	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
175	93040	--> prompt_pwd
92865	92865	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
1205	35295	-> __fish_git_prompt
176	33985	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
33809	33809	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
81	81	--> test -n "$repo_info"; 
24	24	--> or return
34	34	-> if begin
29574	29574	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
44	44	-> end
50	50	-> echo
94	94	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
51	51	> echo $_ " "; 
78	185	> __fish_pwd
107	107	-> pwd
472	32968	> fish_prompt
90	90	-> set -l last_status $status
55	55	-> if not set -q __fish_prompt_hostname
51	51	-> if not set -q __fish_prompt_char
116	215	-> set -l normal (set_color normal)
99	99	--> set_color normal
104	151	-> set -l red (set_color red)
47	47	--> set_color red
99	144	-> set -l cyan (set_color cyan)
45	45	--> set_color cyan
102	147	-> set -l white (set_color white)
45	45	--> set_color white
99	146	-> set -l gray (set_color -o cyan)
47	47	--> set_color -o cyan
200	455	-> set -l brwhite (set_color -o white)
255	255	--> set_color -o white
138	683	-> set -g __fish_git_prompt_showdirtystate true
272	545	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
77	77	---> if status --is-interactive
106	106	---> if test $argv[3] = __fish_git_prompt_show_informative_status
66	66	---> commandline -f repaint ^/dev/null
24	24	---> end
115	635	-> set -g __fish_git_prompt_showuntrackedfiles true
257	520	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
70	70	---> if status --is-interactive
104	104	---> if test $argv[3] = __fish_git_prompt_show_informative_status
65	65	---> commandline -f repaint ^/dev/null
24	24	---> end
107	568	-> set -g __fish_git_prompt_showstashstate true
222	461	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
65	65	---> if status --is-interactive
96	96	---> if test $argv[3] = __fish_git_prompt_show_informative_status
58	58	---> commandline -f repaint ^/dev/null
20	20	---> end
91	5045	-> set -g __fish_git_prompt_color green
372	4954	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
70	70	---> if status --is-interactive
81	81	---> set -l var $argv[3]
188	188	---> set -e _$var
162	162	---> set -e _{$var}_done
123	123	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
65	65	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
157	157	---> set -e ___fish_git_prompt_color_$name
161	161	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
154	154	---> set -e ___fish_git_prompt_color_$name
159	159	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
153	153	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
151	151	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
157	157	---> set -e ___fish_git_prompt_color_$name
198	198	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
159	159	---> set -e ___fish_git_prompt_color_$name
160	160	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
153	153	---> set -e ___fish_git_prompt_color_$name
159	159	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
159	159	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
170	170	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
10	10	---> end
38	38	---> commandline -f repaint ^/dev/null
11	11	---> end
56	15680	-> set -g __fish_git_prompt_color_flags red
292	15624	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
39	39	---> if status --is-interactive
42	42	---> set -l var $argv[3]
134	134	---> set -e _$var
129	129	---> set -e _{$var}_done
103	103	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
54	54	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
127	127	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
11928	11928	---> set -e ___fish_git_prompt_color_$name
387	387	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
225	225	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
88	88	---> set -e ___fish_git_prompt_color_$name
89	89	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
85	85	---> set -e ___fish_git_prompt_color_$name
92	92	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
84	84	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
94	94	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
37	37	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
33	33	-> set pcolor $red
11	11	-> end
134	3253	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
217	3119	--> prompt_pwd
2902	2902	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
640	2616	-> __fish_git_prompt
95	1909	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1814	1814	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
54	54	--> test -n "$repo_info"; 
13	13	--> or return
18	18	-> if begin
2317	2317	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
28	28	-> end
28	28	-> echo
52	52	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
29	29	> echo $_ " "; 
43	101	> __fish_pwd
58	58	-> pwd
600	1453	> up-or-search
177	177	-> if commandline --search-mode
394	501	-> set lineno (commandline -L)
107	107	--> commandline -L
88	88	-> switch $lineno
53	53	-> commandline -f history-search-backward
34	34	-> case '*'
111	111	> echo $_ " "; 
130	280	> __fish_pwd
150	150	-> pwd
1046857	1046857	> learnyounode verify httpGetAsync.js 
286	18701	> fish_prompt
53	53	-> set -l last_status $status
32	32	-> if not set -q __fish_prompt_hostname
28	28	-> if not set -q __fish_prompt_char
62	120	-> set -l normal (set_color normal)
58	58	--> set_color normal
54	79	-> set -l red (set_color red)
25	25	--> set_color red
52	76	-> set -l cyan (set_color cyan)
24	24	--> set_color cyan
53	77	-> set -l white (set_color white)
24	24	--> set_color white
51	77	-> set -l gray (set_color -o cyan)
26	26	--> set_color -o cyan
55	85	-> set -l brwhite (set_color -o white)
30	30	--> set_color -o white
43	301	-> set -g __fish_git_prompt_showdirtystate true
114	258	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
46	46	---> if status --is-interactive
60	60	---> if test $argv[3] = __fish_git_prompt_show_informative_status
30	30	---> commandline -f repaint ^/dev/null
8	8	---> end
41	223	-> set -g __fish_git_prompt_showuntrackedfiles true
84	182	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
25	25	---> if status --is-interactive
42	42	---> if test $argv[3] = __fish_git_prompt_show_informative_status
23	23	---> commandline -f repaint ^/dev/null
8	8	---> end
48	224	-> set -g __fish_git_prompt_showstashstate true
83	176	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
25	25	---> if status --is-interactive
37	37	---> if test $argv[3] = __fish_git_prompt_show_informative_status
23	23	---> commandline -f repaint ^/dev/null
8	8	---> end
46	3891	-> set -g __fish_git_prompt_color green
300	3845	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
70	70	---> if status --is-interactive
52	52	---> set -l var $argv[3]
147	147	---> set -e _$var
145	145	---> set -e _{$var}_done
92	92	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
49	49	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
106	106	---> set -e ___fish_git_prompt_color_$name
103	103	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
402	402	---> set -e ___fish_git_prompt_color_$name
88	88	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
91	91	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
84	84	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
146	146	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
30	30	---> commandline -f repaint ^/dev/null
9	9	---> end
49	3754	-> set -g __fish_git_prompt_color_flags red
284	3705	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
32	32	---> if status --is-interactive
35	35	---> set -l var $argv[3]
105	105	---> set -e _$var
155	155	---> set -e _{$var}_done
222	222	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
53	53	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
114	114	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
88	88	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
88	88	---> set -e ___fish_git_prompt_color_$name
94	94	---> set -e ___fish_git_prompt_color_{$name}_done
84	84	---> end
142	142	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
107	107	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
100	100	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
86	86	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
10	10	---> end
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
38	38	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
33	33	-> set pcolor $red
11	11	-> end
165	3323	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
319	3158	--> prompt_pwd
2839	2839	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
901	2996	-> __fish_git_prompt
108	2029	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1921	1921	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
53	53	--> test -n "$repo_info"; 
13	13	--> or return
19	19	-> if begin
2816	2816	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
30	30	-> end
33	33	-> echo
58	58	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
29	29	> echo $_ " "; 
45	117	> __fish_pwd
72	72	-> pwd
473	21704	> fish_prompt
73	73	-> set -l last_status $status
53	53	-> if not set -q __fish_prompt_hostname
48	48	-> if not set -q __fish_prompt_char
104	172	-> set -l normal (set_color normal)
68	68	--> set_color normal
97	139	-> set -l red (set_color red)
42	42	--> set_color red
100	144	-> set -l cyan (set_color cyan)
44	44	--> set_color cyan
100	147	-> set -l white (set_color white)
47	47	--> set_color white
103	152	-> set -l gray (set_color -o cyan)
49	49	--> set_color -o cyan
142	190	-> set -l brwhite (set_color -o white)
48	48	--> set_color -o white
82	445	-> set -g __fish_git_prompt_showdirtystate true
182	363	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
50	50	---> if status --is-interactive
71	71	---> if test $argv[3] = __fish_git_prompt_show_informative_status
46	46	---> commandline -f repaint ^/dev/null
14	14	---> end
74	426	-> set -g __fish_git_prompt_showuntrackedfiles true
170	352	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
51	51	---> if status --is-interactive
72	72	---> if test $argv[3] = __fish_git_prompt_show_informative_status
44	44	---> commandline -f repaint ^/dev/null
15	15	---> end
73	397	-> set -g __fish_git_prompt_showstashstate true
151	324	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
47	47	---> if status --is-interactive
68	68	---> if test $argv[3] = __fish_git_prompt_show_informative_status
43	43	---> commandline -f repaint ^/dev/null
15	15	---> end
80	5176	-> set -g __fish_git_prompt_color green
383	5096	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
48	48	---> if status --is-interactive
61	61	---> set -l var $argv[3]
194	194	---> set -e _$var
204	204	---> set -e _{$var}_done
131	131	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
79	79	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
191	191	---> set -e ___fish_git_prompt_color_$name
183	183	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
190	190	---> set -e ___fish_git_prompt_color_$name
194	194	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
182	182	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
461	461	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
143	143	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
135	135	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
14	14	---> end
50	50	---> commandline -f repaint ^/dev/null
17	17	---> end
73	4240	-> set -g __fish_git_prompt_color_flags red
350	4167	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
54	54	---> if status --is-interactive
59	59	---> set -l var $argv[3]
132	132	---> set -e _$var
136	136	---> set -e _{$var}_done
134	134	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
84	84	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
133	133	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
135	135	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
162	162	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
145	145	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
132	132	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
30	30	---> commandline -f repaint ^/dev/null
9	9	---> end
38	38	-> set -l pcolor $gray
37	37	-> if test $last_status -ne 0
33	33	-> set pcolor $red
11	11	-> end
154	3098	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
74	2944	--> prompt_pwd
2870	2870	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
755	2918	-> __fish_git_prompt
159	2101	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1942	1942	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
48	48	--> test -n "$repo_info"; 
14	14	--> or return
20	20	-> if begin
3114	3114	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
36	36	-> end
41	41	-> echo
83	83	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
47	47	> echo $_ " "; 
68	160	> __fish_pwd
92	92	-> pwd
543	1262	> up-or-search
109	109	-> if commandline --search-mode
322	402	-> set lineno (commandline -L)
80	80	--> commandline -L
108	108	-> switch $lineno
64	64	-> commandline -f history-search-backward
36	36	-> case '*'
109	109	> echo $_ " "; 
181	395	> __fish_pwd
214	214	-> pwd
710032	710032	> learnyounode verify httpGetAsync.js 
367	180343	> fish_prompt
73	73	-> set -l last_status $status
34	34	-> if not set -q __fish_prompt_hostname
31	31	-> if not set -q __fish_prompt_char
71	138	-> set -l normal (set_color normal)
67	67	--> set_color normal
68	97	-> set -l red (set_color red)
29	29	--> set_color red
65	93	-> set -l cyan (set_color cyan)
28	28	--> set_color cyan
59	86	-> set -l white (set_color white)
27	27	--> set_color white
58	86	-> set -l gray (set_color -o cyan)
28	28	--> set_color -o cyan
59	88	-> set -l brwhite (set_color -o white)
29	29	--> set_color -o white
51	337	-> set -g __fish_git_prompt_showdirtystate true
127	286	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
52	52	---> if status --is-interactive
65	65	---> if test $argv[3] = __fish_git_prompt_show_informative_status
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
45	250	-> set -g __fish_git_prompt_showuntrackedfiles true
100	205	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
28	28	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
10	10	---> end
45	373	-> set -g __fish_git_prompt_showstashstate true
183	328	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
44	44	---> if status --is-interactive
46	46	---> if test $argv[3] = __fish_git_prompt_show_informative_status
40	40	---> commandline -f repaint ^/dev/null
15	15	---> end
50	16338	-> set -g __fish_git_prompt_color green
286	16288	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
31	31	---> if status --is-interactive
34	34	---> set -l var $argv[3]
152	152	---> set -e _$var
111	111	---> set -e _{$var}_done
96	96	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
49	49	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
91	91	---> set -e ___fish_git_prompt_color_$name
90	90	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
84	84	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
93	93	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
86	86	---> set -e ___fish_git_prompt_color_$name
88	88	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
13053	13053	---> set -e ___fish_git_prompt_color_$name
153	153	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
134	134	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
9	9	---> end
34	34	---> commandline -f repaint ^/dev/null
11	11	---> end
52	3850	-> set -g __fish_git_prompt_color_flags red
313	3798	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
35	35	---> if status --is-interactive
41	41	---> set -l var $argv[3]
113	113	---> set -e _$var
110	110	---> set -e _{$var}_done
84	84	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
108	108	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
146	146	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
168	168	---> set -e ___fish_git_prompt_color_$name
150	150	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
36	36	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
8	8	---> end
30	30	---> commandline -f repaint ^/dev/null
10	10	---> end
37	37	-> set -l pcolor $gray
36	36	-> if test $last_status -ne 0
70	70	-> set pcolor $red
20	20	-> end
306	58587	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
263	58281	--> prompt_pwd
58018	58018	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
1554	33321	-> __fish_git_prompt
200	31630	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
31430	31430	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
105	105	--> test -n "$repo_info"; 
32	32	--> or return
45	45	-> if begin
65818	65818	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
47	47	-> end
45	45	-> echo
76	76	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
41	41	> echo $_ " "; 
63	187	> __fish_pwd
124	124	-> pwd
324	20158	> fish_prompt
52	52	-> set -l last_status $status
36	36	-> if not set -q __fish_prompt_hostname
35	35	-> if not set -q __fish_prompt_char
75	119	-> set -l normal (set_color normal)
44	44	--> set_color normal
68	98	-> set -l red (set_color red)
30	30	--> set_color red
65	94	-> set -l cyan (set_color cyan)
29	29	--> set_color cyan
66	96	-> set -l white (set_color white)
30	30	--> set_color white
65	96	-> set -l gray (set_color -o cyan)
31	31	--> set_color -o cyan
67	99	-> set -l brwhite (set_color -o white)
32	32	--> set_color -o white
104	448	-> set -g __fish_git_prompt_showdirtystate true
158	344	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
55	55	---> if status --is-interactive
80	80	---> if test $argv[3] = __fish_git_prompt_show_informative_status
35	35	---> commandline -f repaint ^/dev/null
16	16	---> end
163	556	-> set -g __fish_git_prompt_showuntrackedfiles true
228	393	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
65	65	---> if status --is-interactive
57	57	---> if test $argv[3] = __fish_git_prompt_show_informative_status
32	32	---> commandline -f repaint ^/dev/null
11	11	---> end
60	271	-> set -g __fish_git_prompt_showstashstate true
104	211	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
29	29	---> if status --is-interactive
43	43	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
49	3869	-> set -g __fish_git_prompt_color green
282	3820	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
56	56	---> if status --is-interactive
57	57	---> set -l var $argv[3]
174	174	---> set -e _$var
149	149	---> set -e _{$var}_done
116	116	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
48	48	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
116	116	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
154	154	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
33	33	---> commandline -f repaint ^/dev/null
10	10	---> end
51	4041	-> set -g __fish_git_prompt_color_flags red
286	3990	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
36	36	---> if status --is-interactive
35	35	---> set -l var $argv[3]
106	106	---> set -e _$var
109	109	---> set -e _{$var}_done
84	84	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
107	107	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
522	522	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
37	37	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
33	33	-> set pcolor $red
11	11	-> end
186	3150	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
84	2964	--> prompt_pwd
2880	2880	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
1086	3630	-> __fish_git_prompt
120	2479	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2359	2359	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
48	48	--> test -n "$repo_info"; 
17	17	--> or return
34	34	-> if begin
2874	2874	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
32	32	-> echo
56	56	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
32	32	> echo $_ " "; 
46	109	> __fish_pwd
63	63	-> pwd
536	1274	> up-or-search
160	160	-> if commandline --search-mode
363	423	-> set lineno (commandline -L)
60	60	--> commandline -L
65	65	-> switch $lineno
55	55	-> commandline -f history-search-backward
35	35	-> case '*'
132	132	> echo $_ " "; 
129	305	> __fish_pwd
176	176	-> pwd
838347	838347	> learnyounode verify httpGetAsync.js 
366	21070	> fish_prompt
55	55	-> set -l last_status $status
35	35	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
67	131	-> set -l normal (set_color normal)
64	64	--> set_color normal
59	87	-> set -l red (set_color red)
28	28	--> set_color red
57	83	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
57	83	-> set -l white (set_color white)
26	26	--> set_color white
57	84	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
58	85	-> set -l brwhite (set_color -o white)
27	27	--> set_color -o white
61	339	-> set -g __fish_git_prompt_showdirtystate true
124	278	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
50	50	---> if status --is-interactive
64	64	---> if test $argv[3] = __fish_git_prompt_show_informative_status
31	31	---> commandline -f repaint ^/dev/null
9	9	---> end
67	369	-> set -g __fish_git_prompt_showuntrackedfiles true
144	302	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
42	42	---> if status --is-interactive
63	63	---> if test $argv[3] = __fish_git_prompt_show_informative_status
39	39	---> commandline -f repaint ^/dev/null
14	14	---> end
84	286	-> set -g __fish_git_prompt_showstashstate true
93	202	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
28	28	---> if status --is-interactive
46	46	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
47	4409	-> set -g __fish_git_prompt_color green
489	4362	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
31	31	---> if status --is-interactive
34	34	---> set -l var $argv[3]
116	116	---> set -e _$var
112	112	---> set -e _{$var}_done
87	87	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
104	104	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
102	102	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
102	102	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
160	160	---> set -e ___fish_git_prompt_color_$name
166	166	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
145	145	---> set -e ___fish_git_prompt_color_$name
184	184	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
154	154	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
258	258	---> set -e ___fish_git_prompt_color_$name
196	196	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
14	14	---> end
50	50	---> commandline -f repaint ^/dev/null
12	12	---> end
52	4310	-> set -g __fish_git_prompt_color_flags red
337	4258	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
33	33	---> if status --is-interactive
43	43	---> set -l var $argv[3]
122	122	---> set -e _$var
124	124	---> set -e _{$var}_done
92	92	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
114	114	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
464	464	---> set -e ___fish_git_prompt_color_$name
133	133	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
39	39	-> set -l pcolor $gray
40	40	-> if test $last_status -ne 0
149	3639	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
196	3490	--> prompt_pwd
3294	3294	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
798	3075	-> __fish_git_prompt
102	2213	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2111	2111	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
50	50	--> test -n "$repo_info"; 
14	14	--> or return
19	19	-> if begin
3324	3324	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
42	42	-> end
50	50	-> echo
90	90	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
55	55	> echo $_ " "; 
77	209	> __fish_pwd
132	132	-> pwd
451	23633	> fish_prompt
78	78	-> set -l last_status $status
157	157	-> if not set -q __fish_prompt_hostname
52	52	-> if not set -q __fish_prompt_char
96	160	-> set -l normal (set_color normal)
64	64	--> set_color normal
81	118	-> set -l red (set_color red)
37	37	--> set_color red
78	116	-> set -l cyan (set_color cyan)
38	38	--> set_color cyan
80	116	-> set -l white (set_color white)
36	36	--> set_color white
78	114	-> set -l gray (set_color -o cyan)
36	36	--> set_color -o cyan
80	117	-> set -l brwhite (set_color -o white)
37	37	--> set_color -o white
73	409	-> set -g __fish_git_prompt_showdirtystate true
159	336	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
45	45	---> if status --is-interactive
74	74	---> if test $argv[3] = __fish_git_prompt_show_informative_status
44	44	---> commandline -f repaint ^/dev/null
14	14	---> end
76	405	-> set -g __fish_git_prompt_showuntrackedfiles true
155	329	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
48	48	---> if status --is-interactive
70	70	---> if test $argv[3] = __fish_git_prompt_show_informative_status
41	41	---> commandline -f repaint ^/dev/null
15	15	---> end
75	408	-> set -g __fish_git_prompt_showstashstate true
153	333	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
54	54	---> if status --is-interactive
73	73	---> if test $argv[3] = __fish_git_prompt_show_informative_status
40	40	---> commandline -f repaint ^/dev/null
13	13	---> end
66	4410	-> set -g __fish_git_prompt_color green
368	4344	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
48	48	---> if status --is-interactive
58	58	---> set -l var $argv[3]
166	166	---> set -e _$var
208	208	---> set -e _{$var}_done
125	125	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
82	82	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
145	145	---> set -e ___fish_git_prompt_color_$name
161	161	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
140	140	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
134	134	---> set -e ___fish_git_prompt_color_$name
143	143	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
138	138	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
10	10	---> end
31	31	---> commandline -f repaint ^/dev/null
9	9	---> end
49	4069	-> set -g __fish_git_prompt_color_flags red
337	4020	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
38	38	---> if status --is-interactive
35	35	---> set -l var $argv[3]
109	109	---> set -e _$var
120	120	---> set -e _{$var}_done
90	90	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
111	111	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
209	209	---> set -e ___fish_git_prompt_color_$name
146	146	---> set -e ___fish_git_prompt_color_{$name}_done
48	48	---> end
141	141	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
10	10	---> end
31	31	---> commandline -f repaint ^/dev/null
10	10	---> end
37	37	-> set -l pcolor $gray
36	36	-> if test $last_status -ne 0
185	4314	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
107	4129	--> prompt_pwd
4022	4022	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
1220	4404	-> __fish_git_prompt
202	3100	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2898	2898	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
64	64	--> test -n "$repo_info"; 
20	20	--> or return
29	29	-> if begin
3477	3477	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
36	36	-> end
39	39	-> echo
81	81	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
57	57	> echo $_ " "; 
54	124	> __fish_pwd
70	70	-> pwd
698	1837	> up-or-search
166	166	-> if commandline --search-mode
558	673	-> set lineno (commandline -L)
115	115	--> commandline -L
94	94	-> switch $lineno
145	145	-> commandline -f history-search-backward
61	61	-> case '*'
176	176	> echo $_ " "; 
168	402	> __fish_pwd
234	234	-> pwd
849663	849663	> learnyounode verify httpGetAsync.js 
380	20948	> fish_prompt
62	62	-> set -l last_status $status
32	32	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
97	194	-> set -l normal (set_color normal)
97	97	--> set_color normal
68	97	-> set -l red (set_color red)
29	29	--> set_color red
57	83	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
57	83	-> set -l white (set_color white)
26	26	--> set_color white
56	83	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
57	85	-> set -l brwhite (set_color -o white)
28	28	--> set_color -o white
46	339	-> set -g __fish_git_prompt_showdirtystate true
138	293	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
51	51	---> if status --is-interactive
64	64	---> if test $argv[3] = __fish_git_prompt_show_informative_status
31	31	---> commandline -f repaint ^/dev/null
9	9	---> end
44	234	-> set -g __fish_git_prompt_showuntrackedfiles true
89	190	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
44	318	-> set -g __fish_git_prompt_showstashstate true
103	274	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
70	70	---> if status --is-interactive
65	65	---> if test $argv[3] = __fish_git_prompt_show_informative_status
27	27	---> commandline -f repaint ^/dev/null
9	9	---> end
47	4419	-> set -g __fish_git_prompt_color green
510	4372	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
31	31	---> if status --is-interactive
33	33	---> set -l var $argv[3]
128	128	---> set -e _$var
119	119	---> set -e _{$var}_done
88	88	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
133	133	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
410	410	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
161	161	---> set -e ___fish_git_prompt_color_{$name}_done
28	28	---> end
142	142	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
10	10	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
59	4082	-> set -g __fish_git_prompt_color_flags red
506	4023	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
36	36	---> if status --is-interactive
35	35	---> set -l var $argv[3]
102	102	---> set -e _$var
109	109	---> set -e _{$var}_done
94	94	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
49	49	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
103	103	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
102	102	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
102	102	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
142	142	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
121	121	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
170	170	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
9	9	---> end
34	34	---> commandline -f repaint ^/dev/null
10	10	---> end
42	42	-> set -l pcolor $gray
40	40	-> if test $last_status -ne 0
281	4596	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
217	4315	--> prompt_pwd
4098	4098	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
1029	3237	-> __fish_git_prompt
183	2145	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1962	1962	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
48	48	--> test -n "$repo_info"; 
15	15	--> or return
23	23	-> if begin
2370	2370	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
30	30	-> end
32	32	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
46	119	> __fish_pwd
73	73	-> pwd
371	84892	> fish_prompt
50	50	-> set -l last_status $status
31	31	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
64	104	-> set -l normal (set_color normal)
40	40	--> set_color normal
58	85	-> set -l red (set_color red)
27	27	--> set_color red
57	83	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
56	82	-> set -l white (set_color white)
26	26	--> set_color white
56	83	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
73	100	-> set -l brwhite (set_color -o white)
27	27	--> set_color -o white
147	513	-> set -g __fish_git_prompt_showdirtystate true
158	366	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
67	67	---> if status --is-interactive
79	79	---> if test $argv[3] = __fish_git_prompt_show_informative_status
46	46	---> commandline -f repaint ^/dev/null
16	16	---> end
61	273	-> set -g __fish_git_prompt_showuntrackedfiles true
99	212	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
34	34	---> if status --is-interactive
44	44	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
44	239	-> set -g __fish_git_prompt_showstashstate true
90	195	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
27	27	---> if status --is-interactive
44	44	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
46	68004	-> set -g __fish_git_prompt_color green
370	67958	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
31	31	---> if status --is-interactive
53	53	---> set -l var $argv[3]
139	139	---> set -e _$var
117	117	---> set -e _{$var}_done
84	84	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
109	109	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
64451	64451	---> set -e ___fish_git_prompt_color_$name
147	147	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
100	100	---> set -e ___fish_git_prompt_color_$name
91	91	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
97	97	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
74	3618	-> set -g __fish_git_prompt_color_flags red
287	3544	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
39	39	---> if status --is-interactive
36	36	---> set -l var $argv[3]
82	82	---> set -e _$var
84	84	---> set -e _{$var}_done
85	85	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
83	83	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
88	88	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
219	219	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
96	96	---> set -e ___fish_git_prompt_color_$name
104	104	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
98	98	---> set -e ___fish_git_prompt_color_$name
100	100	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
189	189	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
141	141	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
17	17	---> end
48	48	---> commandline -f repaint ^/dev/null
17	17	---> end
66	66	-> set -l pcolor $gray
61	61	-> if test $last_status -ne 0
290	4945	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
319	4655	--> prompt_pwd
4336	4336	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
897	3451	-> __fish_git_prompt
129	2463	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2334	2334	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
52	52	--> test -n "$repo_info"; 
39	39	--> or return
22	22	-> if begin
2563	2563	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
33	33	-> echo
56	56	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
54	54	> echo $_ " "; 
67	186	> __fish_pwd
119	119	-> pwd
108	108	> echo $_ " "; 
133	259	> __fish_pwd
126	126	-> pwd
139	106872	> cls
106733	106733	-> clear $argv; 
313	17735	> fish_prompt
59	59	-> set -l last_status $status
32	32	-> if not set -q __fish_prompt_hostname
32	32	-> if not set -q __fish_prompt_char
67	119	-> set -l normal (set_color normal)
52	52	--> set_color normal
59	87	-> set -l red (set_color red)
28	28	--> set_color red
56	83	-> set -l cyan (set_color cyan)
27	27	--> set_color cyan
58	84	-> set -l white (set_color white)
26	26	--> set_color white
57	84	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
59	87	-> set -l brwhite (set_color -o white)
28	28	--> set_color -o white
48	274	-> set -g __fish_git_prompt_showdirtystate true
104	226	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
35	35	---> if status --is-interactive
47	47	---> if test $argv[3] = __fish_git_prompt_show_informative_status
31	31	---> commandline -f repaint ^/dev/null
9	9	---> end
45	243	-> set -g __fish_git_prompt_showuntrackedfiles true
95	198	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
43	232	-> set -g __fish_git_prompt_showstashstate true
89	189	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
26	26	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
47	3637	-> set -g __fish_git_prompt_color green
254	3590	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
30	30	---> if status --is-interactive
34	34	---> set -l var $argv[3]
146	146	---> set -e _$var
115	115	---> set -e _{$var}_done
88	88	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
113	113	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
94	94	---> set -e ___fish_git_prompt_color_$name
88	88	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
91	91	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
84	84	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
444	444	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
8	8	---> end
31	31	---> commandline -f repaint ^/dev/null
9	9	---> end
48	2974	-> set -g __fish_git_prompt_color_flags red
238	2926	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
43	43	---> if status --is-interactive
45	45	---> set -l var $argv[3]
115	115	---> set -e _$var
85	85	---> set -e _{$var}_done
83	83	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
79	79	---> set -e ___fish_git_prompt_color_$name
82	82	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
144	144	---> set -e ___fish_git_prompt_color_$name
94	94	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
88	88	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
90	90	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
8	8	---> end
30	30	---> commandline -f repaint ^/dev/null
9	9	---> end
36	36	-> set -l pcolor $gray
36	36	-> if test $last_status -ne 0
142	3288	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
154	3146	--> prompt_pwd
2992	2992	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
748	2749	-> __fish_git_prompt
114	1939	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1825	1825	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
47	47	--> test -n "$repo_info"; 
15	15	--> or return
18	18	-> if begin
3136	3136	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
38	38	-> end
31	31	-> echo
63	63	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
34	34	> echo $_ " "; 
56	187	> __fish_pwd
131	131	-> pwd
537	24313	> fish_prompt
70	70	-> set -l last_status $status
53	53	-> if not set -q __fish_prompt_hostname
52	52	-> if not set -q __fish_prompt_char
114	185	-> set -l normal (set_color normal)
71	71	--> set_color normal
101	145	-> set -l red (set_color red)
44	44	--> set_color red
89	132	-> set -l cyan (set_color cyan)
43	43	--> set_color cyan
91	144	-> set -l white (set_color white)
53	53	--> set_color white
84	124	-> set -l gray (set_color -o cyan)
40	40	--> set_color -o cyan
99	155	-> set -l brwhite (set_color -o white)
56	56	--> set_color -o white
86	477	-> set -g __fish_git_prompt_showdirtystate true
172	391	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
61	61	---> if status --is-interactive
74	74	---> if test $argv[3] = __fish_git_prompt_show_informative_status
56	56	---> commandline -f repaint ^/dev/null
28	28	---> end
79	400	-> set -g __fish_git_prompt_showuntrackedfiles true
157	321	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
37	37	---> if status --is-interactive
69	69	---> if test $argv[3] = __fish_git_prompt_show_informative_status
41	41	---> commandline -f repaint ^/dev/null
17	17	---> end
69	375	-> set -g __fish_git_prompt_showstashstate true
141	306	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
43	43	---> if status --is-interactive
64	64	---> if test $argv[3] = __fish_git_prompt_show_informative_status
42	42	---> commandline -f repaint ^/dev/null
16	16	---> end
70	5937	-> set -g __fish_git_prompt_color green
356	5867	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
51	51	---> if status --is-interactive
60	60	---> set -l var $argv[3]
183	183	---> set -e _$var
145	145	---> set -e _{$var}_done
137	137	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
129	129	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
345	345	---> set -e ___fish_git_prompt_color_$name
220	220	---> set -e ___fish_git_prompt_color_{$name}_done
29	29	---> end
330	330	---> set -e ___fish_git_prompt_color_$name
352	352	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
149	149	---> set -e ___fish_git_prompt_color_$name
162	162	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
147	147	---> set -e ___fish_git_prompt_color_$name
180	180	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
689	689	---> set -e ___fish_git_prompt_color_$name
215	215	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
139	139	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
60	4655	-> set -g __fish_git_prompt_color_flags red
335	4595	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
34	34	---> if status --is-interactive
37	37	---> set -l var $argv[3]
108	108	---> set -e _$var
138	138	---> set -e _{$var}_done
132	132	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
77	77	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
154	154	---> set -e ___fish_git_prompt_color_$name
146	146	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
151	151	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
124	124	---> set -e ___fish_git_prompt_color_$name
155	155	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
150	150	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
152	152	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
143	143	---> set -e ___fish_git_prompt_color_$name
162	162	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
146	146	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
39	39	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
133	133	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
169	169	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
29	29	---> end
35	35	---> commandline -f repaint ^/dev/null
10	10	---> end
63	63	-> set -l pcolor $gray
180	180	-> if test $last_status -ne 0
261	4244	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
116	3983	--> prompt_pwd
3867	3867	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
981	3261	-> __fish_git_prompt
123	2187	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2064	2064	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
62	62	--> test -n "$repo_info"; 
31	31	--> or return
31	31	-> if begin
2938	2938	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
34	34	-> end
30	30	-> echo
91	91	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
32	32	> echo $_ " "; 
46	126	> __fish_pwd
80	80	-> pwd
436	1134	> up-or-search
107	107	-> if commandline --search-mode
322	393	-> set lineno (commandline -L)
71	71	--> commandline -L
82	82	-> switch $lineno
71	71	-> commandline -f history-search-backward
45	45	-> case '*'
259	420	> up-or-search
83	83	-> if commandline --search-mode
50	50	-> commandline -f history-search-backward
28	28	-> return
341	574	> up-or-search
126	126	-> if commandline --search-mode
70	70	-> commandline -f history-search-backward
37	37	-> return
350	511	> down-or-search
79	79	-> if commandline --search-mode
52	52	-> commandline -f history-search-forward
30	30	-> return
118	118	> echo $_ " "; 
100	220	> __fish_pwd
120	120	-> pwd
702786	702786	> learnyounode verify httpGet.js 
391	19999	> fish_prompt
70	70	-> set -l last_status $status
52	52	-> if not set -q __fish_prompt_hostname
49	49	-> if not set -q __fish_prompt_char
102	178	-> set -l normal (set_color normal)
76	76	--> set_color normal
96	143	-> set -l red (set_color red)
47	47	--> set_color red
71	105	-> set -l cyan (set_color cyan)
34	34	--> set_color cyan
58	85	-> set -l white (set_color white)
27	27	--> set_color white
56	84	-> set -l gray (set_color -o cyan)
28	28	--> set_color -o cyan
58	86	-> set -l brwhite (set_color -o white)
28	28	--> set_color -o white
47	287	-> set -g __fish_git_prompt_showdirtystate true
108	240	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
34	34	---> if status --is-interactive
55	55	---> if test $argv[3] = __fish_git_prompt_show_informative_status
34	34	---> commandline -f repaint ^/dev/null
9	9	---> end
44	239	-> set -g __fish_git_prompt_showuntrackedfiles true
94	195	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
8	8	---> end
41	229	-> set -g __fish_git_prompt_showstashstate true
87	188	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
27	27	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
54	4904	-> set -g __fish_git_prompt_color green
466	4850	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
29	29	---> if status --is-interactive
33	33	---> set -l var $argv[3]
147	147	---> set -e _$var
138	138	---> set -e _{$var}_done
96	96	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
52	52	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
113	113	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
136	136	---> set -e ___fish_git_prompt_color_$name
151	151	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
401	401	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
319	319	---> set -e ___fish_git_prompt_color_{$name}_done
28	28	---> end
202	202	---> set -e ___fish_git_prompt_color_$name
166	166	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
173	173	---> set -e ___fish_git_prompt_color_$name
160	160	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
146	146	---> set -e ___fish_git_prompt_color_$name
153	153	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
13	13	---> end
46	46	---> commandline -f repaint ^/dev/null
13	13	---> end
68	4201	-> set -g __fish_git_prompt_color_flags red
340	4133	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
52	52	---> if status --is-interactive
52	52	---> set -l var $argv[3]
130	130	---> set -e _$var
123	123	---> set -e _{$var}_done
130	130	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
73	73	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
133	133	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
164	164	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
143	143	---> set -e ___fish_git_prompt_color_$name
143	143	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
135	135	---> set -e ___fish_git_prompt_color_$name
147	147	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
135	135	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
136	136	---> set -e ___fish_git_prompt_color_$name
127	127	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
40	40	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
89	89	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
92	92	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
90	90	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
9	9	---> end
34	34	---> commandline -f repaint ^/dev/null
9	9	---> end
41	41	-> set -l pcolor $gray
40	40	-> if test $last_status -ne 0
34	34	-> set pcolor $red
11	11	-> end
157	3337	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
247	3180	--> prompt_pwd
2933	2933	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
835	2938	-> __fish_git_prompt
114	2033	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1919	1919	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
57	57	--> test -n "$repo_info"; 
13	13	--> or return
21	21	-> if begin
2356	2356	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
32	32	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
48	110	> __fish_pwd
62	62	-> pwd
301	19890	> fish_prompt
52	52	-> set -l last_status $status
33	33	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
71	112	-> set -l normal (set_color normal)
41	41	--> set_color normal
59	86	-> set -l red (set_color red)
27	27	--> set_color red
57	89	-> set -l cyan (set_color cyan)
32	32	--> set_color cyan
58	84	-> set -l white (set_color white)
26	26	--> set_color white
57	84	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
77	105	-> set -l brwhite (set_color -o white)
28	28	--> set_color -o white
85	528	-> set -g __fish_git_prompt_showdirtystate true
172	443	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
69	69	---> if status --is-interactive
140	140	---> if test $argv[3] = __fish_git_prompt_show_informative_status
47	47	---> commandline -f repaint ^/dev/null
15	15	---> end
74	313	-> set -g __fish_git_prompt_showuntrackedfiles true
123	239	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
33	33	---> if status --is-interactive
47	47	---> if test $argv[3] = __fish_git_prompt_show_informative_status
27	27	---> commandline -f repaint ^/dev/null
9	9	---> end
44	234	-> set -g __fish_git_prompt_showstashstate true
90	190	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
27	27	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
8	8	---> end
46	4249	-> set -g __fish_git_prompt_color green
301	4203	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
29	29	---> if status --is-interactive
34	34	---> set -l var $argv[3]
143	143	---> set -e _$var
136	136	---> set -e _{$var}_done
91	91	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
48	48	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
116	116	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
179	179	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
456	456	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
8	8	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
51	4117	-> set -g __fish_git_prompt_color_flags red
323	4066	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
40	40	---> if status --is-interactive
37	37	---> set -l var $argv[3]
107	107	---> set -e _$var
110	110	---> set -e _{$var}_done
86	86	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
61	61	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
186	186	---> set -e ___fish_git_prompt_color_$name
205	205	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
141	141	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
144	144	---> set -e ___fish_git_prompt_color_$name
155	155	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
154	154	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
165	165	---> set -e ___fish_git_prompt_color_$name
150	150	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
13	13	---> end
35	35	---> commandline -f repaint ^/dev/null
11	11	---> end
41	41	-> set -l pcolor $gray
40	40	-> if test $last_status -ne 0
34	34	-> set pcolor $red
11	11	-> end
144	3734	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
176	3590	--> prompt_pwd
3414	3414	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
695	2995	-> __fish_git_prompt
112	2238	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2126	2126	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
48	48	--> test -n "$repo_info"; 
14	14	--> or return
18	18	-> if begin
2483	2483	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
32	32	-> echo
56	56	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
29	29	> echo $_ " "; 
45	111	> __fish_pwd
66	66	-> pwd
402	114154	> down-or-search
135	135	-> if commandline --search-mode
273	327	-> set lineno (commandline -L)
54	54	--> commandline -L
583	113135	-> set line_count (commandline|wc -l)
112552	112552	--> commandline|wc -l
74	74	-> switch $lineno
58	58	-> commandline -f down-line
23	23	-> end
630	1451	> up-or-search
106	106	-> if commandline --search-mode
332	416	-> set lineno (commandline -L)
84	84	--> commandline -L
86	86	-> switch $lineno
88	88	-> commandline -f history-search-backward
125	125	-> case '*'
166	166	> echo $_ " "; 
183	425	> __fish_pwd
242	242	-> pwd
221124	221124	> learnyounode verify httpC.js 
301	18996	> fish_prompt
67	67	-> set -l last_status $status
50	50	-> if not set -q __fish_prompt_hostname
31	31	-> if not set -q __fish_prompt_char
73	137	-> set -l normal (set_color normal)
64	64	--> set_color normal
58	86	-> set -l red (set_color red)
28	28	--> set_color red
56	82	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
65	91	-> set -l white (set_color white)
26	26	--> set_color white
58	85	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
55	89	-> set -l brwhite (set_color -o white)
34	34	--> set_color -o white
47	304	-> set -g __fish_git_prompt_showdirtystate true
114	257	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
45	45	---> if status --is-interactive
60	60	---> if test $argv[3] = __fish_git_prompt_show_informative_status
29	29	---> commandline -f repaint ^/dev/null
9	9	---> end
40	223	-> set -g __fish_git_prompt_showuntrackedfiles true
84	183	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
25	25	---> if status --is-interactive
42	42	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
8	8	---> end
39	214	-> set -g __fish_git_prompt_showstashstate true
83	175	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
25	25	---> if status --is-interactive
36	36	---> if test $argv[3] = __fish_git_prompt_show_informative_status
23	23	---> commandline -f repaint ^/dev/null
8	8	---> end
53	4459	-> set -g __fish_git_prompt_color green
352	4406	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
28	28	---> if status --is-interactive
31	31	---> set -l var $argv[3]
129	129	---> set -e _$var
120	120	---> set -e _{$var}_done
108	108	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
126	126	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
181	181	---> set -e ___fish_git_prompt_color_$name
159	159	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
142	142	---> set -e ___fish_git_prompt_color_$name
146	146	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
139	139	---> set -e ___fish_git_prompt_color_$name
160	160	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
166	166	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
164	164	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
179	179	---> set -e ___fish_git_prompt_color_$name
127	127	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
36	36	---> commandline -f repaint ^/dev/null
10	10	---> end
60	4185	-> set -g __fish_git_prompt_color_flags red
357	4125	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
58	58	---> if status --is-interactive
60	60	---> set -l var $argv[3]
144	144	---> set -e _$var
513	513	---> set -e _{$var}_done
152	152	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
70	70	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
141	141	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
138	138	---> set -e ___fish_git_prompt_color_$name
154	154	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
98	98	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
94	94	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
94	94	---> set -e ___fish_git_prompt_color_$name
98	98	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
94	94	---> set -e ___fish_git_prompt_color_$name
98	98	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
31	31	---> commandline -f repaint ^/dev/null
10	10	---> end
37	37	-> set -l pcolor $gray
37	37	-> if test $last_status -ne 0
33	33	-> set pcolor $red
11	11	-> end
145	3166	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
225	3021	--> prompt_pwd
2796	2796	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
771	2781	-> __fish_git_prompt
95	1944	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1849	1849	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
53	53	--> test -n "$repo_info"; 
13	13	--> or return
18	18	-> if begin
2396	2396	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
28	28	-> end
31	31	-> echo
54	54	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
46	46	> echo $_ " "; 
59	121	> __fish_pwd
62	62	-> pwd
281	19742	> fish_prompt
49	49	-> set -l last_status $status
31	31	-> if not set -q __fish_prompt_hostname
29	29	-> if not set -q __fish_prompt_char
67	111	-> set -l normal (set_color normal)
44	44	--> set_color normal
59	86	-> set -l red (set_color red)
27	27	--> set_color red
56	82	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
57	84	-> set -l white (set_color white)
27	27	--> set_color white
56	83	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
58	91	-> set -l brwhite (set_color -o white)
33	33	--> set_color -o white
73	519	-> set -g __fish_git_prompt_showdirtystate true
196	446	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
73	73	---> if status --is-interactive
107	107	---> if test $argv[3] = __fish_git_prompt_show_informative_status
54	54	---> commandline -f repaint ^/dev/null
16	16	---> end
86	309	-> set -g __fish_git_prompt_showuntrackedfiles true
103	223	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
37	37	---> if status --is-interactive
46	46	---> if test $argv[3] = __fish_git_prompt_show_informative_status
27	27	---> commandline -f repaint ^/dev/null
10	10	---> end
46	247	-> set -g __fish_git_prompt_showstashstate true
91	201	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
29	29	---> if status --is-interactive
46	46	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
56	4105	-> set -g __fish_git_prompt_color green
288	4049	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
30	30	---> if status --is-interactive
151	151	---> set -l var $argv[3]
158	158	---> set -e _$var
145	145	---> set -e _{$var}_done
95	95	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
149	149	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
182	182	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
204	204	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
9	9	---> end
33	33	---> commandline -f repaint ^/dev/null
10	10	---> end
52	4213	-> set -g __fish_git_prompt_color_flags red
288	4161	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
41	41	---> if status --is-interactive
37	37	---> set -l var $argv[3]
109	109	---> set -e _$var
111	111	---> set -e _{$var}_done
91	91	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
109	109	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
627	627	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
136	136	---> set -e ___fish_git_prompt_color_$name
151	151	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
37	37	-> set -l pcolor $gray
37	37	-> if test $last_status -ne 0
32	32	-> set pcolor $red
11	11	-> end
253	3720	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
155	3467	--> prompt_pwd
3312	3312	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
764	2905	-> __fish_git_prompt
105	2081	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1976	1976	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
47	47	--> test -n "$repo_info"; 
13	13	--> or return
18	18	-> if begin
2545	2545	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
31	31	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
47	111	> __fish_pwd
64	64	-> pwd
490	1061	> up-or-search
100	100	-> if commandline --search-mode
252	306	-> set lineno (commandline -L)
54	54	--> commandline -L
59	59	-> switch $lineno
53	53	-> commandline -f history-search-backward
53	53	-> case '*'
356	569	> up-or-search
109	109	-> if commandline --search-mode
68	68	-> commandline -f history-search-backward
36	36	-> return
458	665	> down-or-search
104	104	-> if commandline --search-mode
67	67	-> commandline -f history-search-forward
36	36	-> return
74	74	> echo $_ " "; 
70	217	> __fish_pwd
147	147	-> pwd
663719	663719	> learnyounode verify httpCollect.js 
286	16530	> fish_prompt
55	55	-> set -l last_status $status
31	31	-> if not set -q __fish_prompt_hostname
29	29	-> if not set -q __fish_prompt_char
62	108	-> set -l normal (set_color normal)
46	46	--> set_color normal
56	88	-> set -l red (set_color red)
32	32	--> set_color red
55	80	-> set -l cyan (set_color cyan)
25	25	--> set_color cyan
54	79	-> set -l white (set_color white)
25	25	--> set_color white
55	81	-> set -l gray (set_color -o cyan)
26	26	--> set_color -o cyan
55	81	-> set -l brwhite (set_color -o white)
26	26	--> set_color -o white
44	260	-> set -g __fish_git_prompt_showdirtystate true
101	216	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
30	30	---> if status --is-interactive
46	46	---> if test $argv[3] = __fish_git_prompt_show_informative_status
31	31	---> commandline -f repaint ^/dev/null
8	8	---> end
40	217	-> set -g __fish_git_prompt_showuntrackedfiles true
83	177	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
25	25	---> if status --is-interactive
37	37	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
8	8	---> end
39	219	-> set -g __fish_git_prompt_showstashstate true
82	180	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
25	25	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
8	8	---> end
42	3014	-> set -g __fish_git_prompt_color green
229	2972	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
27	27	---> if status --is-interactive
31	31	---> set -l var $argv[3]
122	122	---> set -e _$var
152	152	---> set -e _{$var}_done
97	97	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
45	45	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
119	119	---> set -e ___fish_git_prompt_color_$name
105	105	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
88	88	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
90	90	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
90	90	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
8	8	---> end
28	28	---> commandline -f repaint ^/dev/null
10	10	---> end
46	3485	-> set -g __fish_git_prompt_color_flags red
258	3439	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
38	38	---> if status --is-interactive
36	36	---> set -l var $argv[3]
131	131	---> set -e _$var
116	116	---> set -e _{$var}_done
101	101	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
53	53	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
169	169	---> set -e ___fish_git_prompt_color_$name
101	101	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
85	85	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
421	421	---> set -e ___fish_git_prompt_color_$name
89	89	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
106	106	---> set -e ___fish_git_prompt_color_{$name}_done
32	32	---> end
87	87	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
8	8	---> end
31	31	---> commandline -f repaint ^/dev/null
10	10	---> end
37	37	-> set -l pcolor $gray
36	36	-> if test $last_status -ne 0
33	33	-> set pcolor $red
12	12	-> end
136	3190	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
177	3054	--> prompt_pwd
2877	2877	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
705	2681	-> __fish_git_prompt
100	1918	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1818	1818	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
45	45	--> test -n "$repo_info"; 
13	13	--> or return
19	19	-> if begin
2282	2282	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
38	38	-> end
32	32	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
46	108	> __fish_pwd
62	62	-> pwd
282	20049	> fish_prompt
72	72	-> set -l last_status $status
32	32	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
71	110	-> set -l normal (set_color normal)
39	39	--> set_color normal
59	86	-> set -l red (set_color red)
27	27	--> set_color red
57	83	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
58	84	-> set -l white (set_color white)
26	26	--> set_color white
57	84	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
58	85	-> set -l brwhite (set_color -o white)
27	27	--> set_color -o white
114	731	-> set -g __fish_git_prompt_showdirtystate true
341	617	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
35	35	---> if status --is-interactive
190	190	---> if test $argv[3] = __fish_git_prompt_show_informative_status
37	37	---> commandline -f repaint ^/dev/null
14	14	---> end
97	353	-> set -g __fish_git_prompt_showuntrackedfiles true
127	256	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
46	46	---> if status --is-interactive
47	47	---> if test $argv[3] = __fish_git_prompt_show_informative_status
27	27	---> commandline -f repaint ^/dev/null
9	9	---> end
45	245	-> set -g __fish_git_prompt_showstashstate true
97	200	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
27	27	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
47	3893	-> set -g __fish_git_prompt_color green
287	3846	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
37	37	---> if status --is-interactive
43	43	---> set -l var $argv[3]
149	149	---> set -e _$var
116	116	---> set -e _{$var}_done
85	85	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
110	110	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
209	209	---> set -e ___fish_git_prompt_color_{$name}_done
31	31	---> end
146	146	---> set -e ___fish_git_prompt_color_$name
194	194	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
50	4366	-> set -g __fish_git_prompt_color_flags red
306	4316	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
33	33	---> if status --is-interactive
35	35	---> set -l var $argv[3]
106	106	---> set -e _$var
109	109	---> set -e _{$var}_done
88	88	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
108	108	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
146	146	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
140	140	---> set -e ___fish_git_prompt_color_$name
153	153	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
548	548	---> set -e ___fish_git_prompt_color_$name
170	170	---> set -e ___fish_git_prompt_color_{$name}_done
29	29	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
38	38	-> set -l pcolor $gray
39	39	-> if test $last_status -ne 0
32	32	-> set pcolor $red
12	12	-> end
155	3452	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
125	3297	--> prompt_pwd
3172	3172	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
838	3226	-> __fish_git_prompt
102	2326	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2224	2224	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
48	48	--> test -n "$repo_info"; 
14	14	--> or return
19	19	-> if begin
2576	2576	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
37	37	-> end
30	30	-> echo
52	52	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
27	27	> echo $_ " "; 
42	103	> __fish_pwd
61	61	-> pwd
158	158	> echo $_ " "; 
308	548	> __fish_pwd
240	240	-> pwd
188	4971	> cls
4783	4783	-> clear $argv; 
441	21877	> fish_prompt
98	98	-> set -l last_status $status
45	45	-> if not set -q __fish_prompt_hostname
42	42	-> if not set -q __fish_prompt_char
92	177	-> set -l normal (set_color normal)
85	85	--> set_color normal
85	124	-> set -l red (set_color red)
39	39	--> set_color red
82	126	-> set -l cyan (set_color cyan)
44	44	--> set_color cyan
82	119	-> set -l white (set_color white)
37	37	--> set_color white
79	117	-> set -l gray (set_color -o cyan)
38	38	--> set_color -o cyan
80	119	-> set -l brwhite (set_color -o white)
39	39	--> set_color -o white
65	472	-> set -g __fish_git_prompt_showdirtystate true
174	407	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
64	64	---> if status --is-interactive
87	87	---> if test $argv[3] = __fish_git_prompt_show_informative_status
69	69	---> commandline -f repaint ^/dev/null
13	13	---> end
62	329	-> set -g __fish_git_prompt_showuntrackedfiles true
124	267	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
38	38	---> if status --is-interactive
58	58	---> if test $argv[3] = __fish_git_prompt_show_informative_status
35	35	---> commandline -f repaint ^/dev/null
12	12	---> end
58	326	-> set -g __fish_git_prompt_showstashstate true
130	268	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
37	37	---> if status --is-interactive
55	55	---> if test $argv[3] = __fish_git_prompt_show_informative_status
34	34	---> commandline -f repaint ^/dev/null
12	12	---> end
57	4543	-> set -g __fish_git_prompt_color green
386	4486	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
48	48	---> if status --is-interactive
39	39	---> set -l var $argv[3]
143	143	---> set -e _$var
144	144	---> set -e _{$var}_done
105	105	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
54	54	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
136	136	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
139	139	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
261	261	---> set -e ___fish_git_prompt_color_$name
212	212	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
140	140	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
9	9	---> end
31	31	---> commandline -f repaint ^/dev/null
9	9	---> end
55	4073	-> set -g __fish_git_prompt_color_flags red
313	4018	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
32	32	---> if status --is-interactive
34	34	---> set -l var $argv[3]
106	106	---> set -e _$var
119	119	---> set -e _{$var}_done
92	92	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
110	110	---> set -e ___fish_git_prompt_color_$name
147	147	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
161	161	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
134	134	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
131	131	---> set -e ___fish_git_prompt_color_$name
143	143	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
152	152	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
14	14	---> end
58	58	---> commandline -f repaint ^/dev/null
16	16	---> end
57	57	-> set -l pcolor $gray
60	60	-> if test $last_status -ne 0
199	3831	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
234	3632	--> prompt_pwd
3398	3398	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
877	3704	-> __fish_git_prompt
126	2762	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2636	2636	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
51	51	--> test -n "$repo_info"; 
14	14	--> or return
21	21	-> if begin
2888	2888	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
41	41	-> end
42	42	-> echo
82	82	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
32	32	> echo $_ " "; 
46	108	> __fish_pwd
62	62	-> pwd
317	21918	> fish_prompt
45	45	-> set -l last_status $status
31	31	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
64	102	-> set -l normal (set_color normal)
38	38	--> set_color normal
58	84	-> set -l red (set_color red)
26	26	--> set_color red
56	81	-> set -l cyan (set_color cyan)
25	25	--> set_color cyan
56	82	-> set -l white (set_color white)
26	26	--> set_color white
55	82	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
58	85	-> set -l brwhite (set_color -o white)
27	27	--> set_color -o white
45	257	-> set -g __fish_git_prompt_showdirtystate true
98	212	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
33	33	---> if status --is-interactive
45	45	---> if test $argv[3] = __fish_git_prompt_show_informative_status
27	27	---> commandline -f repaint ^/dev/null
9	9	---> end
43	239	-> set -g __fish_git_prompt_showuntrackedfiles true
89	196	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
32	32	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
42	235	-> set -g __fish_git_prompt_showstashstate true
88	193	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
26	26	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
30	30	---> commandline -f repaint ^/dev/null
9	9	---> end
45	4083	-> set -g __fish_git_prompt_color green
502	4038	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
29	29	---> if status --is-interactive
33	33	---> set -l var $argv[3]
119	119	---> set -e _$var
114	114	---> set -e _{$var}_done
83	83	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
110	110	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
27	27	---> end
141	141	---> set -e ___fish_git_prompt_color_$name
144	144	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
167	167	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
140	140	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
142	142	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
30	30	---> commandline -f repaint ^/dev/null
9	9	---> end
48	3952	-> set -g __fish_git_prompt_color_flags red
397	3904	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
32	32	---> if status --is-interactive
35	35	---> set -l var $argv[3]
105	105	---> set -e _$var
110	110	---> set -e _{$var}_done
85	85	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
97	97	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
109	109	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
168	168	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
161	161	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
127	127	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
9	9	---> end
37	37	---> commandline -f repaint ^/dev/null
10	10	---> end
54	54	-> set -l pcolor $gray
85	85	-> if test $last_status -ne 0
222	4823	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
132	4601	--> prompt_pwd
4469	4469	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
1134	4106	-> __fish_git_prompt
106	2906	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2800	2800	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
51	51	--> test -n "$repo_info"; 
15	15	--> or return
102	102	-> if begin
2927	2927	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
31	31	-> echo
56	56	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
46	117	> __fish_pwd
71	71	-> pwd
109	109	> echo $_ " "; 
110	252	> __fish_pwd
142	142	-> pwd
2869516	2869516	> learnyounode
432	21085	> fish_prompt
98	98	-> set -l last_status $status
57	57	-> if not set -q __fish_prompt_hostname
54	54	-> if not set -q __fish_prompt_char
178	313	-> set -l normal (set_color normal)
135	135	--> set_color normal
183	271	-> set -l red (set_color red)
88	88	--> set_color red
166	272	-> set -l cyan (set_color cyan)
106	106	--> set_color cyan
154	221	-> set -l white (set_color white)
67	67	--> set_color white
93	136	-> set -l gray (set_color -o cyan)
43	43	--> set_color -o cyan
93	139	-> set -l brwhite (set_color -o white)
46	46	--> set_color -o white
68	389	-> set -g __fish_git_prompt_showdirtystate true
154	321	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
45	45	---> if status --is-interactive
66	66	---> if test $argv[3] = __fish_git_prompt_show_informative_status
43	43	---> commandline -f repaint ^/dev/null
13	13	---> end
61	338	-> set -g __fish_git_prompt_showuntrackedfiles true
127	277	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
44	44	---> if status --is-interactive
58	58	---> if test $argv[3] = __fish_git_prompt_show_informative_status
36	36	---> commandline -f repaint ^/dev/null
12	12	---> end
59	331	-> set -g __fish_git_prompt_showstashstate true
126	272	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
37	37	---> if status --is-interactive
56	56	---> if test $argv[3] = __fish_git_prompt_show_informative_status
41	41	---> commandline -f repaint ^/dev/null
12	12	---> end
59	5388	-> set -g __fish_git_prompt_color green
387	5329	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
42	42	---> if status --is-interactive
47	47	---> set -l var $argv[3]
207	207	---> set -e _$var
255	255	---> set -e _{$var}_done
217	217	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
118	118	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
370	370	---> set -e ___fish_git_prompt_color_$name
167	167	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
170	170	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
148	148	---> set -e ___fish_git_prompt_color_$name
154	154	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
177	177	---> set -e ___fish_git_prompt_color_$name
167	167	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
151	151	---> set -e ___fish_git_prompt_color_$name
154	154	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
133	133	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
138	138	---> set -e ___fish_git_prompt_color_$name
173	173	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
155	155	---> set -e ___fish_git_prompt_color_$name
169	169	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
127	127	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
10	10	---> end
36	36	---> commandline -f repaint ^/dev/null
11	11	---> end
54	4010	-> set -g __fish_git_prompt_color_flags red
292	3956	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
38	38	---> if status --is-interactive
41	41	---> set -l var $argv[3]
122	122	---> set -e _$var
128	128	---> set -e _{$var}_done
101	101	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
54	54	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
124	124	---> set -e ___fish_git_prompt_color_$name
134	134	---> set -e ___fish_git_prompt_color_{$name}_done
49	49	---> end
241	241	---> set -e ___fish_git_prompt_color_$name
186	186	---> set -e ___fish_git_prompt_color_{$name}_done
29	29	---> end
141	141	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
8	8	---> end
38	38	---> commandline -f repaint ^/dev/null
10	10	---> end
37	37	-> set -l pcolor $gray
36	36	-> if test $last_status -ne 0
148	3247	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
125	3099	--> prompt_pwd
2974	2974	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
753	2814	-> __fish_git_prompt
104	2002	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1898	1898	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
46	46	--> test -n "$repo_info"; 
13	13	--> or return
19	19	-> if begin
2361	2361	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
43	43	-> end
27	27	-> echo
52	52	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
29	29	> echo $_ " "; 
44	107	> __fish_pwd
63	63	-> pwd
356	19726	> fish_prompt
64	64	-> set -l last_status $status
44	44	-> if not set -q __fish_prompt_hostname
48	48	-> if not set -q __fish_prompt_char
66	106	-> set -l normal (set_color normal)
40	40	--> set_color normal
59	85	-> set -l red (set_color red)
26	26	--> set_color red
56	81	-> set -l cyan (set_color cyan)
25	25	--> set_color cyan
64	91	-> set -l white (set_color white)
27	27	--> set_color white
57	84	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
56	84	-> set -l brwhite (set_color -o white)
28	28	--> set_color -o white
47	264	-> set -g __fish_git_prompt_showdirtystate true
103	217	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
33	33	---> if status --is-interactive
45	45	---> if test $argv[3] = __fish_git_prompt_show_informative_status
27	27	---> commandline -f repaint ^/dev/null
9	9	---> end
42	238	-> set -g __fish_git_prompt_showuntrackedfiles true
95	196	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
42	230	-> set -g __fish_git_prompt_showstashstate true
89	188	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
26	26	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
8	8	---> end
44	4259	-> set -g __fish_git_prompt_color green
345	4215	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
28	28	---> if status --is-interactive
33	33	---> set -l var $argv[3]
119	119	---> set -e _$var
134	134	---> set -e _{$var}_done
87	87	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
105	105	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
151	151	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
153	153	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
430	430	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
30	30	---> commandline -f repaint ^/dev/null
9	9	---> end
49	3759	-> set -g __fish_git_prompt_color_flags red
297	3710	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
38	38	---> if status --is-interactive
35	35	---> set -l var $argv[3]
112	112	---> set -e _$var
116	116	---> set -e _{$var}_done
86	86	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
45	45	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
108	108	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
147	147	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
145	145	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
10	10	---> end
31	31	---> commandline -f repaint ^/dev/null
10	10	---> end
37	37	-> set -l pcolor $gray
55	55	-> if test $last_status -ne 0
252	4176	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
211	3924	--> prompt_pwd
3713	3713	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
795	2924	-> __fish_git_prompt
102	2068	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1966	1966	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
47	47	--> test -n "$repo_info"; 
14	14	--> or return
18	18	-> if begin
2606	2606	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
30	30	-> end
32	32	-> echo
55	55	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
29	29	> echo $_ " "; 
45	106	> __fish_pwd
61	61	-> pwd
427	994	> up-or-search
81	81	-> if commandline --search-mode
263	327	-> set lineno (commandline -L)
64	64	--> commandline -L
66	66	-> switch $lineno
58	58	-> commandline -f history-search-backward
35	35	-> case '*'
382	596	> up-or-search
109	109	-> if commandline --search-mode
69	69	-> commandline -f history-search-backward
36	36	-> return
314	556	> up-or-search
105	105	-> if commandline --search-mode
58	58	-> commandline -f history-search-backward
79	79	-> return
344	578	> up-or-search
108	108	-> if commandline --search-mode
89	89	-> commandline -f history-search-backward
37	37	-> return
336	548	> up-or-search
108	108	-> if commandline --search-mode
68	68	-> commandline -f history-search-backward
36	36	-> return
108	108	> echo $_ " "; 
122	243	> __fish_pwd
121	121	-> pwd
597509	597509	> learnyounode verify httpGet.js 
341	19489	> fish_prompt
58	58	-> set -l last_status $status
31	31	-> if not set -q __fish_prompt_hostname
29	29	-> if not set -q __fish_prompt_char
69	117	-> set -l normal (set_color normal)
48	48	--> set_color normal
58	86	-> set -l red (set_color red)
28	28	--> set_color red
56	82	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
57	83	-> set -l white (set_color white)
26	26	--> set_color white
56	84	-> set -l gray (set_color -o cyan)
28	28	--> set_color -o cyan
60	96	-> set -l brwhite (set_color -o white)
36	36	--> set_color -o white
93	350	-> set -g __fish_git_prompt_showdirtystate true
123	257	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
38	38	---> if status --is-interactive
54	54	---> if test $argv[3] = __fish_git_prompt_show_informative_status
33	33	---> commandline -f repaint ^/dev/null
9	9	---> end
47	245	-> set -g __fish_git_prompt_showuntrackedfiles true
92	198	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
28	28	---> if status --is-interactive
44	44	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
8	8	---> end
42	228	-> set -g __fish_git_prompt_showstashstate true
88	186	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
26	26	---> if status --is-interactive
39	39	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
8	8	---> end
54	3598	-> set -g __fish_git_prompt_color green
244	3544	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
27	27	---> if status --is-interactive
31	31	---> set -l var $argv[3]
157	157	---> set -e _$var
139	139	---> set -e _{$var}_done
92	92	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
52	52	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
93	93	---> set -e ___fish_git_prompt_color_$name
90	90	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
84	84	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
90	90	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
479	479	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
94	94	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
85	85	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
147	147	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
94	94	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
85	85	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
31	31	---> commandline -f repaint ^/dev/null
12	12	---> end
84	3887	-> set -g __fish_git_prompt_color_flags red
300	3803	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
34	34	---> if status --is-interactive
36	36	---> set -l var $argv[3]
83	83	---> set -e _$var
112	112	---> set -e _{$var}_done
90	90	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
65	65	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
117	117	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
159	159	---> set -e ___fish_git_prompt_color_{$name}_done
59	59	---> end
135	135	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
33	33	---> commandline -f repaint ^/dev/null
9	9	---> end
71	71	-> set -l pcolor $gray
53	53	-> if test $last_status -ne 0
171	3649	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
91	3478	--> prompt_pwd
3387	3387	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
738	2902	-> __fish_git_prompt
141	2103	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1962	1962	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
48	48	--> test -n "$repo_info"; 
13	13	--> or return
19	19	-> if begin
3313	3313	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
37	37	-> end
47	47	-> echo
83	83	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
52	52	> echo $_ " "; 
74	191	> __fish_pwd
117	117	-> pwd
511	136591	> fish_prompt
65	65	-> set -l last_status $status
48	48	-> if not set -q __fish_prompt_hostname
41	41	-> if not set -q __fish_prompt_char
90	147	-> set -l normal (set_color normal)
57	57	--> set_color normal
79	115	-> set -l red (set_color red)
36	36	--> set_color red
76	111	-> set -l cyan (set_color cyan)
35	35	--> set_color cyan
118	164	-> set -l white (set_color white)
46	46	--> set_color white
90	134	-> set -l gray (set_color -o cyan)
44	44	--> set_color -o cyan
97	141	-> set -l brwhite (set_color -o white)
44	44	--> set_color -o white
79	437	-> set -g __fish_git_prompt_showdirtystate true
167	358	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
49	49	---> if status --is-interactive
71	71	---> if test $argv[3] = __fish_git_prompt_show_informative_status
55	55	---> commandline -f repaint ^/dev/null
16	16	---> end
72	399	-> set -g __fish_git_prompt_showuntrackedfiles true
150	327	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
50	50	---> if status --is-interactive
69	69	---> if test $argv[3] = __fish_git_prompt_show_informative_status
43	43	---> commandline -f repaint ^/dev/null
15	15	---> end
70	401	-> set -g __fish_git_prompt_showstashstate true
159	331	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
45	45	---> if status --is-interactive
65	65	---> if test $argv[3] = __fish_git_prompt_show_informative_status
46	46	---> commandline -f repaint ^/dev/null
16	16	---> end
78	115321	-> set -g __fish_git_prompt_color green
408	115243	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
53	53	---> if status --is-interactive
60	60	---> set -l var $argv[3]
183	183	---> set -e _$var
143	143	---> set -e _{$var}_done
139	139	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
80	80	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
144	144	---> set -e ___fish_git_prompt_color_$name
151	151	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
151	151	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
138	138	---> set -e ___fish_git_prompt_color_$name
144	144	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
142	142	---> set -e ___fish_git_prompt_color_$name
143	143	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
139	139	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
141	141	---> set -e ___fish_git_prompt_color_$name
143	143	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
176	176	---> set -e ___fish_git_prompt_color_$name
175	175	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
156	156	---> set -e ___fish_git_prompt_color_$name
181	181	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
138	138	---> set -e ___fish_git_prompt_color_$name
110012	110012	---> set -e ___fish_git_prompt_color_{$name}_done
37	37	---> end
230	230	---> set -e ___fish_git_prompt_color_$name
208	208	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
193	193	---> set -e ___fish_git_prompt_color_$name
222	222	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
189	189	---> set -e ___fish_git_prompt_color_$name
194	194	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
15	15	---> end
55	55	---> commandline -f repaint ^/dev/null
17	17	---> end
91	6662	-> set -g __fish_git_prompt_color_flags red
488	6571	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
62	62	---> if status --is-interactive
67	67	---> set -l var $argv[3]
245	245	---> set -e _$var
250	250	---> set -e _{$var}_done
161	161	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
90	90	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
357	357	---> set -e ___fish_git_prompt_color_$name
247	247	---> set -e ___fish_git_prompt_color_{$name}_done
40	40	---> end
216	216	---> set -e ___fish_git_prompt_color_$name
215	215	---> set -e ___fish_git_prompt_color_{$name}_done
60	60	---> end
218	218	---> set -e ___fish_git_prompt_color_$name
226	226	---> set -e ___fish_git_prompt_color_{$name}_done
32	32	---> end
156	156	---> set -e ___fish_git_prompt_color_$name
180	180	---> set -e ___fish_git_prompt_color_{$name}_done
28	28	---> end
178	178	---> set -e ___fish_git_prompt_color_$name
154	154	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
155	155	---> set -e ___fish_git_prompt_color_$name
152	152	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
145	145	---> set -e ___fish_git_prompt_color_$name
152	152	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
152	152	---> set -e ___fish_git_prompt_color_$name
170	170	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
208	208	---> set -e ___fish_git_prompt_color_{$name}_done
56	56	---> end
217	217	---> set -e ___fish_git_prompt_color_$name
256	256	---> set -e ___fish_git_prompt_color_{$name}_done
36	36	---> end
190	190	---> set -e ___fish_git_prompt_color_$name
218	218	---> set -e ___fish_git_prompt_color_{$name}_done
38	38	---> end
186	186	---> set -e ___fish_git_prompt_color_$name
205	205	---> set -e ___fish_git_prompt_color_{$name}_done
35	35	---> end
16	16	---> end
59	59	---> commandline -f repaint ^/dev/null
13	13	---> end
55	55	-> set -l pcolor $gray
53	53	-> if test $last_status -ne 0
208	4602	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
108	4394	--> prompt_pwd
4286	4286	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
795	3884	-> __fish_git_prompt
110	3022	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2912	2912	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
53	53	--> test -n "$repo_info"; 
14	14	--> or return
20	20	-> if begin
3075	3075	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
32	32	-> end
34	34	-> echo
139	139	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
39	39	> echo $_ " "; 
76	153	> __fish_pwd
77	77	-> pwd
523	1272	> up-or-search
127	127	-> if commandline --search-mode
302	399	-> set lineno (commandline -L)
97	97	--> commandline -L
94	94	-> switch $lineno
72	72	-> commandline -f history-search-backward
57	57	-> case '*'
340	556	> up-or-search
109	109	-> if commandline --search-mode
70	70	-> commandline -f history-search-backward
37	37	-> return
108	108	> echo $_ " "; 
119	235	> __fish_pwd
116	116	-> pwd
2897908	2897908	> learnyounode
304	18099	> fish_prompt
68	68	-> set -l last_status $status
30	30	-> if not set -q __fish_prompt_hostname
28	28	-> if not set -q __fish_prompt_char
65	123	-> set -l normal (set_color normal)
58	58	--> set_color normal
54	79	-> set -l red (set_color red)
25	25	--> set_color red
51	75	-> set -l cyan (set_color cyan)
24	24	--> set_color cyan
52	76	-> set -l white (set_color white)
24	24	--> set_color white
52	77	-> set -l gray (set_color -o cyan)
25	25	--> set_color -o cyan
53	78	-> set -l brwhite (set_color -o white)
25	25	--> set_color -o white
46	316	-> set -g __fish_git_prompt_showdirtystate true
112	270	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
45	45	---> if status --is-interactive
60	60	---> if test $argv[3] = __fish_git_prompt_show_informative_status
44	44	---> commandline -f repaint ^/dev/null
9	9	---> end
41	222	-> set -g __fish_git_prompt_showuntrackedfiles true
85	181	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
25	25	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
23	23	---> commandline -f repaint ^/dev/null
8	8	---> end
39	214	-> set -g __fish_git_prompt_showstashstate true
81	175	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
25	25	---> if status --is-interactive
37	37	---> if test $argv[3] = __fish_git_prompt_show_informative_status
23	23	---> commandline -f repaint ^/dev/null
9	9	---> end
42	3698	-> set -g __fish_git_prompt_color green
279	3656	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
27	27	---> if status --is-interactive
31	31	---> set -l var $argv[3]
134	134	---> set -e _$var
112	112	---> set -e _{$var}_done
92	92	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
51	51	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
96	96	---> set -e ___fish_git_prompt_color_$name
100	100	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
94	94	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
94	94	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
103	103	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
94	94	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
124	124	---> set -e ___fish_git_prompt_color_$name
468	468	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
8	8	---> end
30	30	---> commandline -f repaint ^/dev/null
10	10	---> end
46	3127	-> set -g __fish_git_prompt_color_flags red
244	3081	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
32	32	---> if status --is-interactive
36	36	---> set -l var $argv[3]
92	92	---> set -e _$var
97	97	---> set -e _{$var}_done
82	82	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
93	93	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
93	93	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
90	90	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
101	101	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
101	101	---> set -e ___fish_git_prompt_color_$name
89	89	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
92	92	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
89	89	---> set -e ___fish_git_prompt_color_$name
93	93	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
36	36	-> set -l pcolor $gray
35	35	-> if test $last_status -ne 0
160	3159	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
130	2999	--> prompt_pwd
2869	2869	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
762	3303	-> __fish_git_prompt
104	2477	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2373	2373	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
50	50	--> test -n "$repo_info"; 
14	14	--> or return
19	19	-> if begin
2915	2915	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
32	32	-> echo
56	56	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
53	53	> echo $_ " "; 
89	250	> __fish_pwd
161	161	-> pwd
337	105319	> fish_prompt
47	47	-> set -l last_status $status
32	32	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
65	108	-> set -l normal (set_color normal)
43	43	--> set_color normal
59	86	-> set -l red (set_color red)
27	27	--> set_color red
57	83	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
56	83	-> set -l white (set_color white)
27	27	--> set_color white
57	84	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
58	85	-> set -l brwhite (set_color -o white)
27	27	--> set_color -o white
46	262	-> set -g __fish_git_prompt_showdirtystate true
103	216	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
28	28	---> if status --is-interactive
48	48	---> if test $argv[3] = __fish_git_prompt_show_informative_status
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
43	234	-> set -g __fish_git_prompt_showuntrackedfiles true
89	191	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
42	235	-> set -g __fish_git_prompt_showstashstate true
89	193	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
31	31	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
9	9	---> end
52	4511	-> set -g __fish_git_prompt_color green
341	4459	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
29	29	---> if status --is-interactive
33	33	---> set -l var $argv[3]
204	204	---> set -e _$var
144	144	---> set -e _{$var}_done
122	122	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
72	72	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
152	152	---> set -e ___fish_git_prompt_color_$name
160	160	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
136	136	---> set -e ___fish_git_prompt_color_$name
134	134	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
149	149	---> set -e ___fish_git_prompt_color_$name
151	151	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
134	134	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
131	131	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
16	16	---> end
48	48	---> commandline -f repaint ^/dev/null
17	17	---> end
70	90002	-> set -g __fish_git_prompt_color_flags red
344	89932	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
62	62	---> if status --is-interactive
60	60	---> set -l var $argv[3]
131	131	---> set -e _$var
134	134	---> set -e _{$var}_done
158	158	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
75	75	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
134	134	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
133	133	---> set -e ___fish_git_prompt_color_$name
85863	85863	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
48	48	---> end
161	161	---> set -e ___fish_git_prompt_color_$name
195	195	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
38	38	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
144	3676	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
100	3532	--> prompt_pwd
3432	3432	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
763	2891	-> __fish_git_prompt
105	2069	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1964	1964	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
46	46	--> test -n "$repo_info"; 
13	13	--> or return
19	19	-> if begin
2317	2317	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
42	42	-> end
27	27	-> echo
52	52	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
28	28	> echo $_ " "; 
44	106	> __fish_pwd
62	62	-> pwd
435	1162	> up-or-search
113	113	-> if commandline --search-mode
332	412	-> set lineno (commandline -L)
80	80	--> commandline -L
86	86	-> switch $lineno
71	71	-> commandline -f history-search-backward
45	45	-> case '*'
342	559	> up-or-search
110	110	-> if commandline --search-mode
70	70	-> commandline -f history-search-backward
37	37	-> return
316	553	> up-or-search
118	118	-> if commandline --search-mode
88	88	-> commandline -f history-search-backward
31	31	-> return
337	549	> up-or-search
108	108	-> if commandline --search-mode
68	68	-> commandline -f history-search-backward
36	36	-> return
120	120	> echo $_ " "; 
113	225	> __fish_pwd
112	112	-> pwd
628783	628783	> learnyounode verify httpCollect.js 
317	20531	> fish_prompt
61	61	-> set -l last_status $status
32	32	-> if not set -q __fish_prompt_hostname
29	29	-> if not set -q __fish_prompt_char
85	134	-> set -l normal (set_color normal)
49	49	--> set_color normal
93	137	-> set -l red (set_color red)
44	44	--> set_color red
91	134	-> set -l cyan (set_color cyan)
43	43	--> set_color cyan
98	143	-> set -l white (set_color white)
45	45	--> set_color white
96	143	-> set -l gray (set_color -o cyan)
47	47	--> set_color -o cyan
93	139	-> set -l brwhite (set_color -o white)
46	46	--> set_color -o white
73	460	-> set -g __fish_git_prompt_showdirtystate true
181	387	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
53	53	---> if status --is-interactive
86	86	---> if test $argv[3] = __fish_git_prompt_show_informative_status
52	52	---> commandline -f repaint ^/dev/null
15	15	---> end
63	335	-> set -g __fish_git_prompt_showuntrackedfiles true
132	272	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
37	37	---> if status --is-interactive
56	56	---> if test $argv[3] = __fish_git_prompt_show_informative_status
35	35	---> commandline -f repaint ^/dev/null
12	12	---> end
59	319	-> set -g __fish_git_prompt_showstashstate true
121	260	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
37	37	---> if status --is-interactive
56	56	---> if test $argv[3] = __fish_git_prompt_show_informative_status
34	34	---> commandline -f repaint ^/dev/null
12	12	---> end
58	4609	-> set -g __fish_git_prompt_color green
339	4551	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
41	41	---> if status --is-interactive
46	46	---> set -l var $argv[3]
189	189	---> set -e _$var
131	131	---> set -e _{$var}_done
108	108	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
63	63	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
135	135	---> set -e ___fish_git_prompt_color_$name
251	251	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
132	132	---> set -e ___fish_git_prompt_color_$name
133	133	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
310	310	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
155	155	---> set -e ___fish_git_prompt_color_$name
155	155	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
145	145	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
162	162	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
33	33	---> commandline -f repaint ^/dev/null
10	10	---> end
50	4304	-> set -g __fish_git_prompt_color_flags red
325	4254	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
39	39	---> if status --is-interactive
36	36	---> set -l var $argv[3]
110	110	---> set -e _$var
111	111	---> set -e _{$var}_done
90	90	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
77	77	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
143	143	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
443	443	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
133	133	---> set -e ___fish_git_prompt_color_$name
143	143	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
133	133	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
152	152	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
139	139	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
8	8	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
38	38	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
193	3400	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
75	3207	--> prompt_pwd
3132	3132	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
879	2873	-> __fish_git_prompt
101	1937	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1836	1836	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
44	44	--> test -n "$repo_info"; 
13	13	--> or return
21	21	-> if begin
2730	2730	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
33	33	-> end
31	31	-> echo
71	71	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
29	29	> echo $_ " "; 
44	111	> __fish_pwd
67	67	-> pwd
314	109825	> fish_prompt
48	48	-> set -l last_status $status
31	31	-> if not set -q __fish_prompt_hostname
29	29	-> if not set -q __fish_prompt_char
65	107	-> set -l normal (set_color normal)
42	42	--> set_color normal
66	93	-> set -l red (set_color red)
27	27	--> set_color red
88	156	-> set -l cyan (set_color cyan)
68	68	--> set_color cyan
103	152	-> set -l white (set_color white)
49	49	--> set_color white
75	106	-> set -l gray (set_color -o cyan)
31	31	--> set_color -o cyan
59	87	-> set -l brwhite (set_color -o white)
28	28	--> set_color -o white
49	265	-> set -g __fish_git_prompt_showdirtystate true
104	216	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
30	30	---> if status --is-interactive
45	45	---> if test $argv[3] = __fish_git_prompt_show_informative_status
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
44	235	-> set -g __fish_git_prompt_showuntrackedfiles true
90	191	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
26	26	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
42	237	-> set -g __fish_git_prompt_showstashstate true
95	195	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
26	26	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
44	3824	-> set -g __fish_git_prompt_color green
340	3780	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
30	30	---> if status --is-interactive
34	34	---> set -l var $argv[3]
129	129	---> set -e _$var
124	124	---> set -e _{$var}_done
91	91	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
114	114	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
8	8	---> end
31	31	---> commandline -f repaint ^/dev/null
9	9	---> end
49	94337	-> set -g __fish_git_prompt_color_flags red
353	94288	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
37	37	---> if status --is-interactive
35	35	---> set -l var $argv[3]
105	105	---> set -e _$var
108	108	---> set -e _{$var}_done
152	152	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
80	80	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
141	141	---> set -e ___fish_git_prompt_color_$name
153	153	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
90288	90288	---> set -e ___fish_git_prompt_color_$name
239	239	---> set -e ___fish_git_prompt_color_{$name}_done
27	27	---> end
148	148	---> set -e ___fish_git_prompt_color_$name
157	157	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
32	32	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
33	33	---> commandline -f repaint ^/dev/null
10	10	---> end
40	40	-> set -l pcolor $gray
39	39	-> if test $last_status -ne 0
153	3674	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
96	3521	--> prompt_pwd
3425	3425	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
1075	3428	-> __fish_git_prompt
121	2268	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2147	2147	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
66	66	--> test -n "$repo_info"; 
19	19	--> or return
27	27	-> if begin
2478	2478	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
30	30	-> end
31	31	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
46	104	> __fish_pwd
58	58	-> pwd
217	530	> up-or-search
52	52	-> if commandline --search-mode
146	178	-> set lineno (commandline -L)
32	32	--> commandline -L
33	33	-> switch $lineno
31	31	-> commandline -f history-search-backward
19	19	-> case '*'
346	562	> up-or-search
110	110	-> if commandline --search-mode
69	69	-> commandline -f history-search-backward
37	37	-> return
83	83	> echo $_ " "; 
76	225	> __fish_pwd
149	149	-> pwd
3199571	3199571	> learnyounode
314	18665	> fish_prompt
59	59	-> set -l last_status $status
32	32	-> if not set -q __fish_prompt_hostname
29	29	-> if not set -q __fish_prompt_char
65	115	-> set -l normal (set_color normal)
50	50	--> set_color normal
59	87	-> set -l red (set_color red)
28	28	--> set_color red
57	83	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
57	83	-> set -l white (set_color white)
26	26	--> set_color white
58	85	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
58	85	-> set -l brwhite (set_color -o white)
27	27	--> set_color -o white
46	276	-> set -g __fish_git_prompt_showdirtystate true
106	230	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
34	34	---> if status --is-interactive
49	49	---> if test $argv[3] = __fish_git_prompt_show_informative_status
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
43	239	-> set -g __fish_git_prompt_showuntrackedfiles true
90	196	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
44	44	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
42	230	-> set -g __fish_git_prompt_showstashstate true
90	188	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
26	26	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
8	8	---> end
44	3579	-> set -g __fish_git_prompt_color green
275	3535	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
29	29	---> if status --is-interactive
33	33	---> set -l var $argv[3]
115	115	---> set -e _$var
115	115	---> set -e _{$var}_done
83	83	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
48	48	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
111	111	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
29	29	---> commandline -f repaint ^/dev/null
9	9	---> end
52	4235	-> set -g __fish_git_prompt_color_flags red
300	4183	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
32	32	---> if status --is-interactive
34	34	---> set -l var $argv[3]
109	109	---> set -e _$var
109	109	---> set -e _{$var}_done
82	82	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
106	106	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
107	107	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
610	610	---> set -e ___fish_git_prompt_color_$name
152	152	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
139	139	---> set -e ___fish_git_prompt_color_$name
143	143	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
12	12	---> end
40	40	---> commandline -f repaint ^/dev/null
13	13	---> end
49	49	-> set -l pcolor $gray
49	49	-> if test $last_status -ne 0
161	3666	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
134	3505	--> prompt_pwd
3371	3371	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
722	2874	-> __fish_git_prompt
163	2086	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1923	1923	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
53	53	--> test -n "$repo_info"; 
13	13	--> or return
18	18	-> if begin
2367	2367	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
28	28	-> end
30	30	-> echo
53	53	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
28	28	> echo $_ " "; 
41	109	> __fish_pwd
68	68	-> pwd
285	17987	> fish_prompt
47	47	-> set -l last_status $status
32	32	-> if not set -q __fish_prompt_hostname
29	29	-> if not set -q __fish_prompt_char
65	103	-> set -l normal (set_color normal)
38	38	--> set_color normal
58	85	-> set -l red (set_color red)
27	27	--> set_color red
56	81	-> set -l cyan (set_color cyan)
25	25	--> set_color cyan
57	83	-> set -l white (set_color white)
26	26	--> set_color white
56	84	-> set -l gray (set_color -o cyan)
28	28	--> set_color -o cyan
58	86	-> set -l brwhite (set_color -o white)
28	28	--> set_color -o white
71	502	-> set -g __fish_git_prompt_showdirtystate true
239	431	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
48	48	---> if status --is-interactive
56	56	---> if test $argv[3] = __fish_git_prompt_show_informative_status
57	57	---> commandline -f repaint ^/dev/null
31	31	---> end
56	272	-> set -g __fish_git_prompt_showuntrackedfiles true
105	216	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
31	31	---> if status --is-interactive
44	44	---> if test $argv[3] = __fish_git_prompt_show_informative_status
27	27	---> commandline -f repaint ^/dev/null
9	9	---> end
45	238	-> set -g __fish_git_prompt_showstashstate true
89	193	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
28	28	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
47	3788	-> set -g __fish_git_prompt_color green
297	3741	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
31	31	---> if status --is-interactive
35	35	---> set -l var $argv[3]
160	160	---> set -e _$var
170	170	---> set -e _{$var}_done
89	89	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
58	58	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
124	124	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
62	3575	-> set -g __fish_git_prompt_color_flags red
280	3513	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
37	37	---> if status --is-interactive
35	35	---> set -l var $argv[3]
107	107	---> set -e _$var
111	111	---> set -e _{$var}_done
85	85	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
49	49	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
29	29	---> commandline -f repaint ^/dev/null
10	10	---> end
37	37	-> set -l pcolor $gray
37	37	-> if test $last_status -ne 0
157	3379	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
132	3222	--> prompt_pwd
3090	3090	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
708	2957	-> __fish_git_prompt
115	2192	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2077	2077	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
44	44	--> test -n "$repo_info"; 
13	13	--> or return
18	18	-> if begin
2152	2152	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
35	35	-> end
30	30	-> echo
52	52	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
27	27	> echo $_ " "; 
43	122	> __fish_pwd
79	79	-> pwd
492	1148	> up-or-search
109	109	-> if commandline --search-mode
329	387	-> set lineno (commandline -L)
58	58	--> commandline -L
64	64	-> switch $lineno
60	60	-> commandline -f history-search-backward
36	36	-> case '*'
220	348	> up-or-search
66	66	-> if commandline --search-mode
40	40	-> commandline -f history-search-backward
22	22	-> return
464	679	> down-or-search
106	106	-> if commandline --search-mode
71	71	-> commandline -f history-search-forward
38	38	-> return
161	161	> echo $_ " "; 
169	366	> __fish_pwd
197	197	-> pwd
2987652	2987652	> learnyounode
445	122598	> fish_prompt
81	81	-> set -l last_status $status
51	51	-> if not set -q __fish_prompt_hostname
50	50	-> if not set -q __fish_prompt_char
74	146	-> set -l normal (set_color normal)
72	72	--> set_color normal
60	89	-> set -l red (set_color red)
29	29	--> set_color red
57	84	-> set -l cyan (set_color cyan)
27	27	--> set_color cyan
60	87	-> set -l white (set_color white)
27	27	--> set_color white
63	91	-> set -l gray (set_color -o cyan)
28	28	--> set_color -o cyan
61	91	-> set -l brwhite (set_color -o white)
30	30	--> set_color -o white
48	333	-> set -g __fish_git_prompt_showdirtystate true
126	285	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
47	47	---> if status --is-interactive
66	66	---> if test $argv[3] = __fish_git_prompt_show_informative_status
37	37	---> commandline -f repaint ^/dev/null
9	9	---> end
44	236	-> set -g __fish_git_prompt_showuntrackedfiles true
90	192	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
42	237	-> set -g __fish_git_prompt_showstashstate true
95	195	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
26	26	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
8	8	---> end
46	4528	-> set -g __fish_git_prompt_color green
333	4482	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
30	30	---> if status --is-interactive
34	34	---> set -l var $argv[3]
164	164	---> set -e _$var
135	135	---> set -e _{$var}_done
99	99	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
48	48	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
114	114	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
262	262	---> set -e ___fish_git_prompt_color_{$name}_done
29	29	---> end
160	160	---> set -e ___fish_git_prompt_color_$name
152	152	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
138	138	---> set -e ___fish_git_prompt_color_$name
139	139	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
132	132	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
132	132	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
166	166	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
174	174	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
162	162	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
10	10	---> end
33	33	---> commandline -f repaint ^/dev/null
10	10	---> end
52	3135	-> set -g __fish_git_prompt_color_flags red
265	3083	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
34	34	---> if status --is-interactive
44	44	---> set -l var $argv[3]
140	140	---> set -e _$var
99	99	---> set -e _{$var}_done
87	87	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
49	49	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
84	84	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
87	87	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
146	146	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
102	102	---> set -e ___fish_git_prompt_color_$name
92	92	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
86	86	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
88	88	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
9	9	---> end
29	29	---> commandline -f repaint ^/dev/null
10	10	---> end
37	37	-> set -l pcolor $gray
36	36	-> if test $last_status -ne 0
153	46333	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
154	46180	--> prompt_pwd
46026	46026	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
825	33402	-> __fish_git_prompt
120	32512	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
32392	32392	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
51	51	--> test -n "$repo_info"; 
14	14	--> or return
20	20	-> if begin
32897	32897	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
42	42	-> end
50	50	-> echo
97	97	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
54	54	> echo $_ " "; 
89	257	> __fish_pwd
168	168	-> pwd
554	31887	> fish_prompt
124	124	-> set -l last_status $status
93	93	-> if not set -q __fish_prompt_hostname
65	65	-> if not set -q __fish_prompt_char
120	194	-> set -l normal (set_color normal)
74	74	--> set_color normal
115	164	-> set -l red (set_color red)
49	49	--> set_color red
91	141	-> set -l cyan (set_color cyan)
50	50	--> set_color cyan
82	121	-> set -l white (set_color white)
39	39	--> set_color white
81	126	-> set -l gray (set_color -o cyan)
45	45	--> set_color -o cyan
82	123	-> set -l brwhite (set_color -o white)
41	41	--> set_color -o white
68	381	-> set -g __fish_git_prompt_showdirtystate true
149	313	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
47	47	---> if status --is-interactive
64	64	---> if test $argv[3] = __fish_git_prompt_show_informative_status
39	39	---> commandline -f repaint ^/dev/null
14	14	---> end
63	351	-> set -g __fish_git_prompt_showuntrackedfiles true
138	288	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
40	40	---> if status --is-interactive
59	59	---> if test $argv[3] = __fish_git_prompt_show_informative_status
38	38	---> commandline -f repaint ^/dev/null
13	13	---> end
72	467	-> set -g __fish_git_prompt_showstashstate true
196	395	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
39	39	---> if status --is-interactive
82	82	---> if test $argv[3] = __fish_git_prompt_show_informative_status
58	58	---> commandline -f repaint ^/dev/null
20	20	---> end
84	15939	-> set -g __fish_git_prompt_color green
376	15855	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
65	65	---> if status --is-interactive
75	75	---> set -l var $argv[3]
208	208	---> set -e _$var
195	195	---> set -e _{$var}_done
197	197	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
102	102	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
11699	11699	---> set -e ___fish_git_prompt_color_$name
205	205	---> set -e ___fish_git_prompt_color_{$name}_done
32	32	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
60	3722	-> set -g __fish_git_prompt_color_flags red
296	3662	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
33	33	---> if status --is-interactive
35	35	---> set -l var $argv[3]
100	100	---> set -e _$var
105	105	---> set -e _{$var}_done
90	90	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
94	94	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
166	166	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
39	39	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
106	106	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
100	100	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
94	94	---> set -e ___fish_git_prompt_color_$name
98	98	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
67	67	---> commandline -f repaint ^/dev/null
16	16	---> end
59	59	-> set -l pcolor $gray
62	62	-> if test $last_status -ne 0
190	3489	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
222	3299	--> prompt_pwd
3077	3077	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
760	3138	-> __fish_git_prompt
116	2317	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2201	2201	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
48	48	--> test -n "$repo_info"; 
13	13	--> or return
18	18	-> if begin
2435	2435	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
33	33	-> end
29	29	-> echo
59	59	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
47	120	> __fish_pwd
73	73	-> pwd
458	1176	> up-or-search
107	107	-> if commandline --search-mode
326	396	-> set lineno (commandline -L)
70	70	--> commandline -L
81	81	-> switch $lineno
76	76	-> commandline -f history-search-backward
58	58	-> case '*'
53	53	> echo $_ " "; 
44	91	> __fish_pwd
47	47	-> pwd
2267960	2267960	> learnyounode
294	17555	> fish_prompt
57	57	-> set -l last_status $status
30	30	-> if not set -q __fish_prompt_hostname
28	28	-> if not set -q __fish_prompt_char
61	106	-> set -l normal (set_color normal)
45	45	--> set_color normal
55	81	-> set -l red (set_color red)
26	26	--> set_color red
53	77	-> set -l cyan (set_color cyan)
24	24	--> set_color cyan
52	78	-> set -l white (set_color white)
26	26	--> set_color white
53	78	-> set -l gray (set_color -o cyan)
25	25	--> set_color -o cyan
53	80	-> set -l brwhite (set_color -o white)
27	27	--> set_color -o white
46	256	-> set -g __fish_git_prompt_showdirtystate true
95	210	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
31	31	---> if status --is-interactive
46	46	---> if test $argv[3] = __fish_git_prompt_show_informative_status
29	29	---> commandline -f repaint ^/dev/null
9	9	---> end
41	222	-> set -g __fish_git_prompt_showuntrackedfiles true
86	181	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
25	25	---> if status --is-interactive
38	38	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
8	8	---> end
40	235	-> set -g __fish_git_prompt_showstashstate true
83	195	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
25	25	---> if status --is-interactive
38	38	---> if test $argv[3] = __fish_git_prompt_show_informative_status
39	39	---> commandline -f repaint ^/dev/null
10	10	---> end
48	3693	-> set -g __fish_git_prompt_color green
285	3645	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
31	31	---> if status --is-interactive
41	41	---> set -l var $argv[3]
170	170	---> set -e _$var
107	107	---> set -e _{$var}_done
82	82	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
87	87	---> set -e ___fish_git_prompt_color_$name
88	88	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
437	437	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
89	89	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
84	84	---> set -e ___fish_git_prompt_color_$name
91	91	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
88	88	---> set -e ___fish_git_prompt_color_$name
139	139	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
99	99	---> set -e ___fish_git_prompt_color_$name
92	92	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
87	87	---> set -e ___fish_git_prompt_color_$name
89	89	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
30	30	---> commandline -f repaint ^/dev/null
10	10	---> end
50	2983	-> set -g __fish_git_prompt_color_flags red
248	2933	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
34	34	---> if status --is-interactive
35	35	---> set -l var $argv[3]
82	82	---> set -e _$var
85	85	---> set -e _{$var}_done
87	87	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
83	83	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
86	86	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
102	102	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
87	87	---> set -e ___fish_git_prompt_color_$name
107	107	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
9	9	---> end
29	29	---> commandline -f repaint ^/dev/null
9	9	---> end
37	37	-> set -l pcolor $gray
36	36	-> if test $last_status -ne 0
135	3184	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
168	3049	--> prompt_pwd
2881	2881	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
725	3004	-> __fish_git_prompt
102	2220	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2118	2118	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
47	47	--> test -n "$repo_info"; 
12	12	--> or return
18	18	-> if begin
2858	2858	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
33	33	-> end
30	30	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
33	33	> echo $_ " "; 
48	152	> __fish_pwd
104	104	-> pwd
443	21165	> fish_prompt
68	68	-> set -l last_status $status
48	48	-> if not set -q __fish_prompt_hostname
52	52	-> if not set -q __fish_prompt_char
110	179	-> set -l normal (set_color normal)
69	69	--> set_color normal
104	152	-> set -l red (set_color red)
48	48	--> set_color red
100	147	-> set -l cyan (set_color cyan)
47	47	--> set_color cyan
101	146	-> set -l white (set_color white)
45	45	--> set_color white
100	154	-> set -l gray (set_color -o cyan)
54	54	--> set_color -o cyan
102	153	-> set -l brwhite (set_color -o white)
51	51	--> set_color -o white
80	464	-> set -g __fish_git_prompt_showdirtystate true
186	384	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
56	56	---> if status --is-interactive
77	77	---> if test $argv[3] = __fish_git_prompt_show_informative_status
48	48	---> commandline -f repaint ^/dev/null
17	17	---> end
76	431	-> set -g __fish_git_prompt_showuntrackedfiles true
177	355	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
48	48	---> if status --is-interactive
71	71	---> if test $argv[3] = __fish_git_prompt_show_informative_status
44	44	---> commandline -f repaint ^/dev/null
15	15	---> end
126	489	-> set -g __fish_git_prompt_showstashstate true
169	363	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
59	59	---> if status --is-interactive
71	71	---> if test $argv[3] = __fish_git_prompt_show_informative_status
47	47	---> commandline -f repaint ^/dev/null
17	17	---> end
94	5137	-> set -g __fish_git_prompt_color green
393	5043	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
49	49	---> if status --is-interactive
60	60	---> set -l var $argv[3]
157	157	---> set -e _$var
136	136	---> set -e _{$var}_done
128	128	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
80	80	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
137	137	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
132	132	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
131	131	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
132	132	---> set -e ___fish_git_prompt_color_$name
139	139	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
139	139	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
132	132	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
155	155	---> set -e ___fish_git_prompt_color_$name
151	151	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
605	605	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
140	140	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
132	132	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
131	131	---> set -e ___fish_git_prompt_color_$name
161	161	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
9	9	---> end
33	33	---> commandline -f repaint ^/dev/null
9	9	---> end
53	4181	-> set -g __fish_git_prompt_color_flags red
348	4128	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
40	40	---> if status --is-interactive
36	36	---> set -l var $argv[3]
106	106	---> set -e _$var
110	110	---> set -e _{$var}_done
89	89	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
109	109	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
195	195	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
220	220	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
34	34	---> end
124	124	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
31	31	---> end
214	214	---> set -e ___fish_git_prompt_color_$name
150	150	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
38	38	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
182	3391	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
131	3209	--> prompt_pwd
3078	3078	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
701	2892	-> __fish_git_prompt
105	2131	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2026	2026	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
47	47	--> test -n "$repo_info"; 
13	13	--> or return
18	18	-> if begin
2424	2424	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
27	27	-> end
34	34	-> echo
59	59	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
32	32	> echo $_ " "; 
46	118	> __fish_pwd
72	72	-> pwd
271	703	> up-or-search
67	67	-> if commandline --search-mode
198	240	-> set lineno (commandline -L)
42	42	--> commandline -L
48	48	-> switch $lineno
49	49	-> commandline -f history-search-backward
28	28	-> case '*'
442	687	> up-or-search
140	140	-> if commandline --search-mode
69	69	-> commandline -f history-search-backward
36	36	-> return
167	167	> echo $_ " "; 
159	342	> __fish_pwd
183	183	-> pwd
463065	463065	> learnyounode verify httpCollect.js 
327	87991	> fish_prompt
73	73	-> set -l last_status $status
32	32	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
65	133	-> set -l normal (set_color normal)
68	68	--> set_color normal
57	85	-> set -l red (set_color red)
28	28	--> set_color red
56	82	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
56	83	-> set -l white (set_color white)
27	27	--> set_color white
113	181	-> set -l gray (set_color -o cyan)
68	68	--> set_color -o cyan
110	166	-> set -l brwhite (set_color -o white)
56	56	--> set_color -o white
87	394	-> set -g __fish_git_prompt_showdirtystate true
150	307	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
49	49	---> if status --is-interactive
65	65	---> if test $argv[3] = __fish_git_prompt_show_informative_status
33	33	---> commandline -f repaint ^/dev/null
10	10	---> end
45	243	-> set -g __fish_git_prompt_showuntrackedfiles true
91	198	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
32	32	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
51	245	-> set -g __fish_git_prompt_showstashstate true
93	194	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
27	27	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
8	8	---> end
46	4361	-> set -g __fish_git_prompt_color green
551	4315	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
30	30	---> if status --is-interactive
33	33	---> set -l var $argv[3]
137	137	---> set -e _$var
118	118	---> set -e _{$var}_done
86	86	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
106	106	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
102	102	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
138	138	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
434	434	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
142	142	---> set -e ___fish_git_prompt_color_$name
108	108	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
9	9	---> end
30	30	---> commandline -f repaint ^/dev/null
9	9	---> end
47	4109	-> set -g __fish_git_prompt_color_flags red
488	4062	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
51	51	---> if status --is-interactive
56	56	---> set -l var $argv[3]
127	127	---> set -e _$var
155	155	---> set -e _{$var}_done
91	91	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
111	111	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
102	102	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
102	102	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
127	127	---> set -e ___fish_git_prompt_color_{$name}_done
27	27	---> end
149	149	---> set -e ___fish_git_prompt_color_$name
169	169	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
135	135	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
9	9	---> end
30	30	---> commandline -f repaint ^/dev/null
10	10	---> end
38	38	-> set -l pcolor $gray
37	37	-> if test $last_status -ne 0
37	37	-> set pcolor $red
11	11	-> end
154	33270	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
139	33116	--> prompt_pwd
32977	32977	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
865	15373	-> __fish_git_prompt
117	14445	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
14328	14328	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
49	49	--> test -n "$repo_info"; 
14	14	--> or return
20	20	-> if begin
28513	28513	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
43	43	-> end
41	41	-> echo
64	64	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
46	126	> __fish_pwd
80	80	-> pwd
300	23566	> fish_prompt
46	46	-> set -l last_status $status
31	31	-> if not set -q __fish_prompt_hostname
29	29	-> if not set -q __fish_prompt_char
69	117	-> set -l normal (set_color normal)
48	48	--> set_color normal
59	86	-> set -l red (set_color red)
27	27	--> set_color red
57	83	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
56	82	-> set -l white (set_color white)
26	26	--> set_color white
56	83	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
57	90	-> set -l brwhite (set_color -o white)
33	33	--> set_color -o white
46	255	-> set -g __fish_git_prompt_showdirtystate true
95	209	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
33	33	---> if status --is-interactive
45	45	---> if test $argv[3] = __fish_git_prompt_show_informative_status
27	27	---> commandline -f repaint ^/dev/null
9	9	---> end
43	237	-> set -g __fish_git_prompt_showuntrackedfiles true
88	194	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
31	31	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
42	230	-> set -g __fish_git_prompt_showstashstate true
89	188	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
26	26	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
8	8	---> end
44	3817	-> set -g __fish_git_prompt_color green
309	3773	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
34	34	---> if status --is-interactive
34	34	---> set -l var $argv[3]
126	126	---> set -e _$var
141	141	---> set -e _{$var}_done
96	96	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
115	115	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
144	144	---> set -e ___fish_git_prompt_color_$name
164	164	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
9	9	---> end
31	31	---> commandline -f repaint ^/dev/null
10	10	---> end
57	7281	-> set -g __fish_git_prompt_color_flags red
413	7224	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
38	38	---> if status --is-interactive
35	35	---> set -l var $argv[3]
101	101	---> set -e _$var
114	114	---> set -e _{$var}_done
162	162	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
100	100	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
223	223	---> set -e ___fish_git_prompt_color_$name
2764	2764	---> set -e ___fish_git_prompt_color_{$name}_done
30	30	---> end
145	145	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
28	28	---> end
156	156	---> set -e ___fish_git_prompt_color_$name
152	152	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
148	148	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
139	139	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
139	139	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
135	135	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
13	13	---> end
48	48	---> commandline -f repaint ^/dev/null
17	17	---> end
61	61	-> set -l pcolor $gray
60	60	-> if test $last_status -ne 0
56	56	-> set pcolor $red
34	34	-> end
168	3982	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
123	3814	--> prompt_pwd
3691	3691	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
817	3449	-> __fish_git_prompt
201	2567	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2366	2366	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
51	51	--> test -n "$repo_info"; 
14	14	--> or return
21	21	-> if begin
3018	3018	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
32	32	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
46	109	> __fish_pwd
63	63	-> pwd
346	999	> up-or-search
85	85	-> if commandline --search-mode
340	408	-> set lineno (commandline -L)
68	68	--> commandline -L
67	67	-> switch $lineno
58	58	-> commandline -f history-search-backward
35	35	-> case '*'
209	340	> up-or-search
67	67	-> if commandline --search-mode
42	42	-> commandline -f history-search-backward
22	22	-> return
121	121	> echo $_ " "; 
117	222	> __fish_pwd
105	105	-> pwd
1713776	1713776	> learnyounode
361	17625	> fish_prompt
58	58	-> set -l last_status $status
34	34	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
98	151	-> set -l normal (set_color normal)
53	53	--> set_color normal
62	96	-> set -l red (set_color red)
34	34	--> set_color red
58	91	-> set -l cyan (set_color cyan)
33	33	--> set_color cyan
61	90	-> set -l white (set_color white)
29	29	--> set_color white
56	84	-> set -l gray (set_color -o cyan)
28	28	--> set_color -o cyan
56	83	-> set -l brwhite (set_color -o white)
27	27	--> set_color -o white
55	288	-> set -g __fish_git_prompt_showdirtystate true
106	233	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
32	32	---> if status --is-interactive
54	54	---> if test $argv[3] = __fish_git_prompt_show_informative_status
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
41	219	-> set -g __fish_git_prompt_showuntrackedfiles true
84	178	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
24	24	---> if status --is-interactive
38	38	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
8	8	---> end
40	247	-> set -g __fish_git_prompt_showstashstate true
102	207	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
27	27	---> if status --is-interactive
45	45	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
8	8	---> end
51	3242	-> set -g __fish_git_prompt_color green
238	3191	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
28	28	---> if status --is-interactive
31	31	---> set -l var $argv[3]
130	130	---> set -e _$var
113	113	---> set -e _{$var}_done
95	95	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
97	97	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
95	95	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
212	212	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
94	94	---> set -e ___fish_git_prompt_color_$name
90	90	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
84	84	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
86	86	---> set -e ___fish_git_prompt_color_$name
93	93	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
84	84	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
94	94	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
8	8	---> end
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
45	3285	-> set -g __fish_git_prompt_color_flags red
229	3240	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
31	31	---> if status --is-interactive
33	33	---> set -l var $argv[3]
79	79	---> set -e _$var
88	88	---> set -e _{$var}_done
83	83	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
45	45	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
82	82	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
139	139	---> set -e ___fish_git_prompt_color_$name
390	390	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
96	96	---> set -e ___fish_git_prompt_color_$name
90	90	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
86	86	---> set -e ___fish_git_prompt_color_$name
88	88	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
93	93	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
8	8	---> end
29	29	---> commandline -f repaint ^/dev/null
10	10	---> end
37	37	-> set -l pcolor $gray
35	35	-> if test $last_status -ne 0
139	3091	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
206	2952	--> prompt_pwd
2746	2746	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
721	3191	-> __fish_git_prompt
100	2406	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2306	2306	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
50	50	--> test -n "$repo_info"; 
14	14	--> or return
19	19	-> if begin
2764	2764	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
38	38	-> end
31	31	-> echo
60	60	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
45	170	> __fish_pwd
125	125	-> pwd
329	21174	> fish_prompt
44	44	-> set -l last_status $status
31	31	-> if not set -q __fish_prompt_hostname
29	29	-> if not set -q __fish_prompt_char
69	111	-> set -l normal (set_color normal)
42	42	--> set_color normal
58	85	-> set -l red (set_color red)
27	27	--> set_color red
57	82	-> set -l cyan (set_color cyan)
25	25	--> set_color cyan
58	84	-> set -l white (set_color white)
26	26	--> set_color white
56	83	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
57	84	-> set -l brwhite (set_color -o white)
27	27	--> set_color -o white
45	260	-> set -g __fish_git_prompt_showdirtystate true
103	215	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
33	33	---> if status --is-interactive
43	43	---> if test $argv[3] = __fish_git_prompt_show_informative_status
27	27	---> commandline -f repaint ^/dev/null
9	9	---> end
42	237	-> set -g __fish_git_prompt_showuntrackedfiles true
91	195	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
26	26	---> if status --is-interactive
44	44	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
42	229	-> set -g __fish_git_prompt_showstashstate true
89	187	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
26	26	---> if status --is-interactive
39	39	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
9	9	---> end
55	4283	-> set -g __fish_git_prompt_color green
344	4228	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
29	29	---> if status --is-interactive
33	33	---> set -l var $argv[3]
123	123	---> set -e _$var
128	128	---> set -e _{$var}_done
91	91	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
111	111	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
141	141	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
135	135	---> set -e ___fish_git_prompt_color_$name
145	145	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
139	139	---> set -e ___fish_git_prompt_color_$name
143	143	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
133	133	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
133	133	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
131	131	---> set -e ___fish_git_prompt_color_$name
139	139	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
16	16	---> end
49	49	---> commandline -f repaint ^/dev/null
19	19	---> end
80	4784	-> set -g __fish_git_prompt_color_flags red
396	4704	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
56	56	---> if status --is-interactive
70	70	---> set -l var $argv[3]
137	137	---> set -e _$var
132	132	---> set -e _{$var}_done
124	124	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
74	74	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
132	132	---> set -e ___fish_git_prompt_color_$name
133	133	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
152	152	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
124	124	---> set -e ___fish_git_prompt_color_$name
134	134	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
608	608	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
133	133	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
15	15	---> end
48	48	---> commandline -f repaint ^/dev/null
16	16	---> end
69	69	-> set -l pcolor $gray
61	61	-> if test $last_status -ne 0
177	3555	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
176	3378	--> prompt_pwd
3202	3202	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
965	3688	-> __fish_git_prompt
118	2631	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2513	2513	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
68	68	--> test -n "$repo_info"; 
24	24	--> or return
22	22	-> if begin
2903	2903	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
30	30	-> end
29	29	-> echo
62	62	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
46	153	> __fish_pwd
107	107	-> pwd
63	63	> echo $_ " "; 
72	163	> __fish_pwd
91	91	-> pwd
189	96327	> cls
96138	96138	-> clear $argv; 
356	21509	> fish_prompt
74	74	-> set -l last_status $status
33	33	-> if not set -q __fish_prompt_hostname
42	42	-> if not set -q __fish_prompt_char
63	124	-> set -l normal (set_color normal)
61	61	--> set_color normal
55	81	-> set -l red (set_color red)
26	26	--> set_color red
69	96	-> set -l cyan (set_color cyan)
27	27	--> set_color cyan
57	84	-> set -l white (set_color white)
27	27	--> set_color white
66	93	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
80	121	-> set -l brwhite (set_color -o white)
41	41	--> set_color -o white
63	591	-> set -g __fish_git_prompt_showdirtystate true
254	528	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
71	71	---> if status --is-interactive
81	81	---> if test $argv[3] = __fish_git_prompt_show_informative_status
95	95	---> commandline -f repaint ^/dev/null
27	27	---> end
87	362	-> set -g __fish_git_prompt_showuntrackedfiles true
120	275	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
46	46	---> if status --is-interactive
64	64	---> if test $argv[3] = __fish_git_prompt_show_informative_status
36	36	---> commandline -f repaint ^/dev/null
9	9	---> end
50	276	-> set -g __fish_git_prompt_showstashstate true
104	226	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
31	31	---> if status --is-interactive
44	44	---> if test $argv[3] = __fish_git_prompt_show_informative_status
37	37	---> commandline -f repaint ^/dev/null
10	10	---> end
49	3900	-> set -g __fish_git_prompt_color green
323	3851	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
33	33	---> if status --is-interactive
37	37	---> set -l var $argv[3]
154	154	---> set -e _$var
118	118	---> set -e _{$var}_done
86	86	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
111	111	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
170	170	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
136	136	---> set -e ___fish_git_prompt_color_$name
167	167	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
132	132	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
8	8	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
51	4070	-> set -g __fish_git_prompt_color_flags red
255	4019	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
33	33	---> if status --is-interactive
35	35	---> set -l var $argv[3]
383	383	---> set -e _$var
162	162	---> set -e _{$var}_done
156	156	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
78	78	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
170	170	---> set -e ___fish_git_prompt_color_$name
146	146	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
89	89	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
93	93	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
94	94	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
557	557	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
89	89	---> set -e ___fish_git_prompt_color_$name
89	89	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
10	10	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
38	38	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
168	3348	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
162	3180	--> prompt_pwd
3018	3018	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
832	3596	-> __fish_git_prompt
105	2699	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2594	2594	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
50	50	--> test -n "$repo_info"; 
15	15	--> or return
19	19	-> if begin
4026	4026	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
39	39	-> end
32	32	-> echo
70	70	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
34	34	> echo $_ " "; 
47	197	> __fish_pwd
150	150	-> pwd
408	19133	> fish_prompt
83	83	-> set -l last_status $status
56	56	-> if not set -q __fish_prompt_hostname
52	52	-> if not set -q __fish_prompt_char
122	200	-> set -l normal (set_color normal)
78	78	--> set_color normal
82	120	-> set -l red (set_color red)
38	38	--> set_color red
60	88	-> set -l cyan (set_color cyan)
28	28	--> set_color cyan
59	86	-> set -l white (set_color white)
27	27	--> set_color white
58	87	-> set -l gray (set_color -o cyan)
29	29	--> set_color -o cyan
97	172	-> set -l brwhite (set_color -o white)
75	75	--> set_color -o white
86	547	-> set -g __fish_git_prompt_showdirtystate true
200	461	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
58	58	---> if status --is-interactive
138	138	---> if test $argv[3] = __fish_git_prompt_show_informative_status
48	48	---> commandline -f repaint ^/dev/null
17	17	---> end
68	286	-> set -g __fish_git_prompt_showuntrackedfiles true
103	218	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
36	36	---> if status --is-interactive
44	44	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
44	236	-> set -g __fish_git_prompt_showstashstate true
90	192	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
27	27	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
48	3747	-> set -g __fish_git_prompt_color green
276	3699	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
30	30	---> if status --is-interactive
40	40	---> set -l var $argv[3]
152	152	---> set -e _$var
118	118	---> set -e _{$var}_done
116	116	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
50	50	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
112	112	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
155	155	---> set -e ___fish_git_prompt_color_$name
155	155	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
196	196	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
150	150	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
96	96	---> set -e ___fish_git_prompt_color_$name
91	91	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
84	84	---> set -e ___fish_git_prompt_color_$name
95	95	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
31	31	---> commandline -f repaint ^/dev/null
9	9	---> end
57	3447	-> set -g __fish_git_prompt_color_flags red
281	3390	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
33	33	---> if status --is-interactive
35	35	---> set -l var $argv[3]
85	85	---> set -e _$var
110	110	---> set -e _{$var}_done
112	112	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
61	61	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
124	124	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
97	97	---> set -e ___fish_git_prompt_color_$name
99	99	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
92	92	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
91	91	---> set -e ___fish_git_prompt_color_$name
96	96	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
101	101	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
86	86	---> set -e ___fish_git_prompt_color_$name
90	90	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
92	92	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
141	141	---> set -e ___fish_git_prompt_color_$name
178	178	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
16	16	---> end
50	50	---> commandline -f repaint ^/dev/null
16	16	---> end
59	59	-> set -l pcolor $gray
41	41	-> if test $last_status -ne 0
152	3679	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
115	3527	--> prompt_pwd
3412	3412	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
773	3178	-> __fish_git_prompt
103	2340	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2237	2237	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
51	51	--> test -n "$repo_info"; 
14	14	--> or return
18	18	-> if begin
2420	2420	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
41	41	-> end
30	30	-> echo
52	52	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
28	28	> echo $_ " "; 
43	104	> __fish_pwd
61	61	-> pwd
323	766	> up-or-search
67	67	-> if commandline --search-mode
204	247	-> set lineno (commandline -L)
43	43	--> commandline -L
54	54	-> switch $lineno
47	47	-> commandline -f history-search-backward
28	28	-> case '*'
165	262	> up-or-search
52	52	-> if commandline --search-mode
29	29	-> commandline -f history-search-backward
16	16	-> return
82	82	> echo $_ " "; 
77	161	> __fish_pwd
84	84	-> pwd
5814523	5814523	> learnyounode
306	18075	> fish_prompt
62	62	-> set -l last_status $status
31	31	-> if not set -q __fish_prompt_hostname
29	29	-> if not set -q __fish_prompt_char
64	111	-> set -l normal (set_color normal)
47	47	--> set_color normal
56	84	-> set -l red (set_color red)
28	28	--> set_color red
55	81	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
57	88	-> set -l white (set_color white)
31	31	--> set_color white
68	96	-> set -l gray (set_color -o cyan)
28	28	--> set_color -o cyan
63	89	-> set -l brwhite (set_color -o white)
26	26	--> set_color -o white
43	254	-> set -g __fish_git_prompt_showdirtystate true
97	211	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
31	31	---> if status --is-interactive
46	46	---> if test $argv[3] = __fish_git_prompt_show_informative_status
29	29	---> commandline -f repaint ^/dev/null
8	8	---> end
41	236	-> set -g __fish_git_prompt_showuntrackedfiles true
94	195	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
29	29	---> if status --is-interactive
38	38	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
42	234	-> set -g __fish_git_prompt_showstashstate true
94	192	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
26	26	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
8	8	---> end
43	3228	-> set -g __fish_git_prompt_color green
250	3185	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
29	29	---> if status --is-interactive
34	34	---> set -l var $argv[3]
123	123	---> set -e _$var
135	135	---> set -e _{$var}_done
96	96	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
124	124	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
98	98	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
89	89	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
93	93	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
93	93	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
9	9	---> end
30	30	---> commandline -f repaint ^/dev/null
9	9	---> end
49	3082	-> set -g __fish_git_prompt_color_flags red
254	3033	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
32	32	---> if status --is-interactive
35	35	---> set -l var $argv[3]
79	79	---> set -e _$var
83	83	---> set -e _{$var}_done
85	85	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
49	49	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
82	82	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
82	82	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
90	90	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
89	89	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
81	81	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
124	124	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
9	9	---> end
37	37	---> commandline -f repaint ^/dev/null
11	11	---> end
42	42	-> set -l pcolor $gray
39	39	-> if test $last_status -ne 0
163	3658	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
118	3495	--> prompt_pwd
3377	3377	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
869	3064	-> __fish_git_prompt
148	2113	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1965	1965	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
68	68	--> test -n "$repo_info"; 
14	14	--> or return
26	26	-> if begin
3115	3115	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
30	30	-> end
32	32	-> echo
58	58	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
47	112	> __fish_pwd
65	65	-> pwd
312	17927	> fish_prompt
73	73	-> set -l last_status $status
47	47	-> if not set -q __fish_prompt_hostname
31	31	-> if not set -q __fish_prompt_char
74	118	-> set -l normal (set_color normal)
44	44	--> set_color normal
60	86	-> set -l red (set_color red)
26	26	--> set_color red
55	81	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
56	82	-> set -l white (set_color white)
26	26	--> set_color white
72	101	-> set -l gray (set_color -o cyan)
29	29	--> set_color -o cyan
59	94	-> set -l brwhite (set_color -o white)
35	35	--> set_color -o white
46	261	-> set -g __fish_git_prompt_showdirtystate true
99	215	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
33	33	---> if status --is-interactive
46	46	---> if test $argv[3] = __fish_git_prompt_show_informative_status
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
43	248	-> set -g __fish_git_prompt_showuntrackedfiles true
91	205	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
53	53	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
43	231	-> set -g __fish_git_prompt_showstashstate true
88	188	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
26	26	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
46	4372	-> set -g __fish_git_prompt_color green
326	4326	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
33	33	---> if status --is-interactive
34	34	---> set -l var $argv[3]
136	136	---> set -e _$var
186	186	---> set -e _{$var}_done
181	181	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
98	98	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
148	148	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
422	422	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
159	159	---> set -e ___fish_git_prompt_color_$name
146	146	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
140	140	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
85	85	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
30	30	---> commandline -f repaint ^/dev/null
9	9	---> end
48	3011	-> set -g __fish_git_prompt_color_flags red
264	2963	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
35	35	---> if status --is-interactive
35	35	---> set -l var $argv[3]
89	89	---> set -e _$var
84	84	---> set -e _{$var}_done
84	84	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
83	83	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
27	27	---> end
131	131	---> set -e ___fish_git_prompt_color_$name
101	101	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
86	86	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
84	84	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
80	80	---> set -e ___fish_git_prompt_color_$name
83	83	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
9	9	---> end
29	29	---> commandline -f repaint ^/dev/null
9	9	---> end
37	37	-> set -l pcolor $gray
44	44	-> if test $last_status -ne 0
132	2995	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
112	2863	--> prompt_pwd
2751	2751	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
740	2804	-> __fish_git_prompt
108	2009	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1901	1901	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
42	42	--> test -n "$repo_info"; 
13	13	--> or return
19	19	-> if begin
2758	2758	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
31	31	-> end
32	32	-> echo
59	59	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
46	114	> __fish_pwd
68	68	-> pwd
144	144	> echo $_ " "; 
175	357	> __fish_pwd
182	182	-> pwd
4506807	4506807	> npm install strftime
441	217527	> fish_prompt
117	117	-> set -l last_status $status
59	59	-> if not set -q __fish_prompt_hostname
50	50	-> if not set -q __fish_prompt_char
217	327	-> set -l normal (set_color normal)
110	110	--> set_color normal
116	176	-> set -l red (set_color red)
60	60	--> set_color red
150	205	-> set -l cyan (set_color cyan)
55	55	--> set_color cyan
109	193	-> set -l white (set_color white)
84	84	--> set_color white
94	144	-> set -l gray (set_color -o cyan)
50	50	--> set_color -o cyan
159	211	-> set -l brwhite (set_color -o white)
52	52	--> set_color -o white
56	369	-> set -g __fish_git_prompt_showdirtystate true
146	313	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
47	47	---> if status --is-interactive
62	62	---> if test $argv[3] = __fish_git_prompt_show_informative_status
49	49	---> commandline -f repaint ^/dev/null
9	9	---> end
43	231	-> set -g __fish_git_prompt_showuntrackedfiles true
86	188	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
30	30	---> if status --is-interactive
39	39	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
9	9	---> end
41	220	-> set -g __fish_git_prompt_showstashstate true
83	179	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
25	25	---> if status --is-interactive
38	38	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
9	9	---> end
45	21230	-> set -g __fish_git_prompt_color green
312	21185	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
32	32	---> if status --is-interactive
32	32	---> set -l var $argv[3]
135	135	---> set -e _$var
103	103	---> set -e _{$var}_done
81	81	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
87	87	---> set -e ___fish_git_prompt_color_$name
88	88	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
85	85	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
139	139	---> set -e ___fish_git_prompt_color_$name
180	180	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
152	152	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
89	89	---> set -e ___fish_git_prompt_color_$name
17292	17292	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
144	144	---> set -e ___fish_git_prompt_color_$name
180	180	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
229	229	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
155	155	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
103	103	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
87	87	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
33	33	---> commandline -f repaint ^/dev/null
10	10	---> end
57	3792	-> set -g __fish_git_prompt_color_flags red
313	3735	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
33	33	---> if status --is-interactive
36	36	---> set -l var $argv[3]
111	111	---> set -e _$var
135	135	---> set -e _{$var}_done
88	88	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
54	54	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
116	116	---> set -e ___fish_git_prompt_color_$name
102	102	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
94	94	---> set -e ___fish_git_prompt_color_$name
97	97	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
89	89	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
85	85	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
82	82	---> set -e ___fish_git_prompt_color_$name
84	84	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
90	90	---> set -e ___fish_git_prompt_color_$name
87	87	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
83	83	---> set -e ___fish_git_prompt_color_$name
86	86	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
136	136	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
165	165	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
141	141	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
131	131	---> set -e ___fish_git_prompt_color_$name
188	188	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
12	12	---> end
34	34	---> commandline -f repaint ^/dev/null
10	10	---> end
39	39	-> set -l pcolor $gray
40	40	-> if test $last_status -ne 0
162	90070	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
123	89908	--> prompt_pwd
89785	89785	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
831	54249	-> __fish_git_prompt
188	53352	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
53164	53164	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
52	52	--> test -n "$repo_info"; 
14	14	--> or return
20	20	-> if begin
45198	45198	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
32	32	-> end
48	48	-> echo
66	66	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
34	34	> echo $_ " "; 
47	126	> __fish_pwd
79	79	-> pwd
360	20591	> fish_prompt
47	47	-> set -l last_status $status
33	33	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
67	106	-> set -l normal (set_color normal)
39	39	--> set_color normal
59	91	-> set -l red (set_color red)
32	32	--> set_color red
58	84	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
57	84	-> set -l white (set_color white)
27	27	--> set_color white
180	222	-> set -l gray (set_color -o cyan)
42	42	--> set_color -o cyan
116	164	-> set -l brwhite (set_color -o white)
48	48	--> set_color -o white
94	367	-> set -g __fish_git_prompt_showdirtystate true
149	273	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
37	37	---> if status --is-interactive
48	48	---> if test $argv[3] = __fish_git_prompt_show_informative_status
29	29	---> commandline -f repaint ^/dev/null
10	10	---> end
46	249	-> set -g __fish_git_prompt_showuntrackedfiles true
92	203	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
34	34	---> if status --is-interactive
42	42	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
90	367	-> set -g __fish_git_prompt_showstashstate true
167	277	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
29	29	---> if status --is-interactive
46	46	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
72	4443	-> set -g __fish_git_prompt_color green
306	4371	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
50	50	---> if status --is-interactive
59	59	---> set -l var $argv[3]
182	182	---> set -e _$var
120	120	---> set -e _{$var}_done
95	95	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
131	131	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
216	216	---> set -e ___fish_git_prompt_color_$name
139	139	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
135	135	---> set -e ___fish_git_prompt_color_$name
476	476	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
140	140	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
31	31	---> commandline -f repaint ^/dev/null
10	10	---> end
49	3754	-> set -g __fish_git_prompt_color_flags red
293	3705	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
33	33	---> if status --is-interactive
35	35	---> set -l var $argv[3]
104	104	---> set -e _$var
109	109	---> set -e _{$var}_done
85	85	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
109	109	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
50	50	---> end
141	141	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
110	110	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
31	31	---> commandline -f repaint ^/dev/null
10	10	---> end
37	37	-> set -l pcolor $gray
65	65	-> if test $last_status -ne 0
191	3830	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
93	3639	--> prompt_pwd
3546	3546	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
793	3241	-> __fish_git_prompt
111	2384	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2273	2273	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
50	50	--> test -n "$repo_info"; 
14	14	--> or return
19	19	-> if begin
2878	2878	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
31	31	-> end
31	31	-> echo
58	58	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
34	34	> echo $_ " "; 
46	124	> __fish_pwd
78	78	-> pwd
288	698	> up-or-search
72	72	-> if commandline --search-mode
211	245	-> set lineno (commandline -L)
34	34	--> commandline -L
39	39	-> switch $lineno
34	34	-> commandline -f history-search-backward
20	20	-> case '*'
533	796	> down-or-search
149	149	-> if commandline --search-mode
77	77	-> commandline -f history-search-forward
37	37	-> return
378	619	> up-or-search
127	127	-> if commandline --search-mode
73	73	-> commandline -f history-search-backward
41	41	-> return
465	673	> down-or-search
103	103	-> if commandline --search-mode
69	69	-> commandline -f history-search-forward
36	36	-> return
206	329	> up-or-search
78	78	-> if commandline --search-mode
30	30	-> commandline -f history-search-backward
15	15	-> return
196	305	> up-or-search
63	63	-> if commandline --search-mode
29	29	-> commandline -f history-search-backward
17	17	-> return
68	68	> echo $_ " "; 
69	130	> __fish_pwd
61	61	-> pwd
2939265	2939265	> learnyounode verify timeServer.js 
439	25699	> fish_prompt
120	120	-> set -l last_status $status
67	67	-> if not set -q __fish_prompt_hostname
35	35	-> if not set -q __fish_prompt_char
71	140	-> set -l normal (set_color normal)
69	69	--> set_color normal
83	112	-> set -l red (set_color red)
29	29	--> set_color red
78	124	-> set -l cyan (set_color cyan)
46	46	--> set_color cyan
62	90	-> set -l white (set_color white)
28	28	--> set_color white
59	88	-> set -l gray (set_color -o cyan)
29	29	--> set_color -o cyan
59	87	-> set -l brwhite (set_color -o white)
28	28	--> set_color -o white
49	345	-> set -g __fish_git_prompt_showdirtystate true
129	296	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
50	50	---> if status --is-interactive
74	74	---> if test $argv[3] = __fish_git_prompt_show_informative_status
34	34	---> commandline -f repaint ^/dev/null
9	9	---> end
43	241	-> set -g __fish_git_prompt_showuntrackedfiles true
91	198	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
30	30	---> commandline -f repaint ^/dev/null
9	9	---> end
43	231	-> set -g __fish_git_prompt_showstashstate true
88	188	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
27	27	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
8	8	---> end
57	5546	-> set -g __fish_git_prompt_color green
404	5489	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
30	30	---> if status --is-interactive
33	33	---> set -l var $argv[3]
189	189	---> set -e _$var
142	142	---> set -e _{$var}_done
98	98	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
50	50	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
138	138	---> set -e ___fish_git_prompt_color_$name
160	160	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
182	182	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
121	121	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
30	30	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
30	30	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
145	145	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
261	261	---> set -e ___fish_git_prompt_color_$name
175	175	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
207	207	---> set -e ___fish_git_prompt_color_$name
229	229	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
668	668	---> set -e ___fish_git_prompt_color_$name
290	290	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
17	17	---> end
55	55	---> commandline -f repaint ^/dev/null
18	18	---> end
80	5889	-> set -g __fish_git_prompt_color_flags red
437	5809	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
63	63	---> if status --is-interactive
66	66	---> set -l var $argv[3]
197	197	---> set -e _$var
769	769	---> set -e _{$var}_done
150	150	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
121	121	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
175	175	---> set -e ___fish_git_prompt_color_$name
189	189	---> set -e ___fish_git_prompt_color_{$name}_done
42	42	---> end
190	190	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
152	152	---> set -e ___fish_git_prompt_color_$name
152	152	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
146	146	---> set -e ___fish_git_prompt_color_$name
153	153	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
151	151	---> set -e ___fish_git_prompt_color_$name
161	161	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
159	159	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
151	151	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
139	139	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
148	148	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
121	121	---> set -e ___fish_git_prompt_color_$name
161	161	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
153	153	---> set -e ___fish_git_prompt_color_$name
161	161	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
141	141	---> set -e ___fish_git_prompt_color_$name
170	170	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
9	9	---> end
34	34	---> commandline -f repaint ^/dev/null
10	10	---> end
39	39	-> set -l pcolor $gray
40	40	-> if test $last_status -ne 0
34	34	-> set pcolor $red
12	12	-> end
171	3533	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
126	3362	--> prompt_pwd
3236	3236	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
1108	4121	-> __fish_git_prompt
156	2921	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2765	2765	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
69	69	--> test -n "$repo_info"; 
23	23	--> or return
37	37	-> if begin
4161	4161	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
39	39	-> end
44	44	-> echo
85	85	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
46	46	> echo $_ " "; 
69	167	> __fish_pwd
98	98	-> pwd
468	30862	> fish_prompt
76	76	-> set -l last_status $status
55	55	-> if not set -q __fish_prompt_hostname
54	54	-> if not set -q __fish_prompt_char
111	176	-> set -l normal (set_color normal)
65	65	--> set_color normal
93	138	-> set -l red (set_color red)
45	45	--> set_color red
94	136	-> set -l cyan (set_color cyan)
42	42	--> set_color cyan
95	140	-> set -l white (set_color white)
45	45	--> set_color white
921	1085	-> set -l gray (set_color -o cyan)
164	164	--> set_color -o cyan
113	168	-> set -l brwhite (set_color -o white)
55	55	--> set_color -o white
74	415	-> set -g __fish_git_prompt_showdirtystate true
164	341	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
50	50	---> if status --is-interactive
69	69	---> if test $argv[3] = __fish_git_prompt_show_informative_status
44	44	---> commandline -f repaint ^/dev/null
14	14	---> end
68	375	-> set -g __fish_git_prompt_showuntrackedfiles true
150	307	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
41	41	---> if status --is-interactive
63	63	---> if test $argv[3] = __fish_git_prompt_show_informative_status
40	40	---> commandline -f repaint ^/dev/null
13	13	---> end
67	363	-> set -g __fish_git_prompt_showstashstate true
142	296	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
41	41	---> if status --is-interactive
61	61	---> if test $argv[3] = __fish_git_prompt_show_informative_status
39	39	---> commandline -f repaint ^/dev/null
13	13	---> end
73	7424	-> set -g __fish_git_prompt_color green
428	7351	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
45	45	---> if status --is-interactive
51	51	---> set -l var $argv[3]
1635	1635	---> set -e _$var
235	235	---> set -e _{$var}_done
139	139	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
76	76	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
169	169	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
148	148	---> set -e ___fish_git_prompt_color_$name
145	145	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
152	152	---> set -e ___fish_git_prompt_color_$name
180	180	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
190	190	---> set -e ___fish_git_prompt_color_$name
162	162	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
145	145	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
135	135	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
148	148	---> set -e ___fish_git_prompt_color_$name
195	195	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
173	173	---> set -e ___fish_git_prompt_color_$name
261	261	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
201	201	---> set -e ___fish_git_prompt_color_$name
187	187	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
272	272	---> set -e ___fish_git_prompt_color_$name
203	203	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
196	196	---> set -e ___fish_git_prompt_color_$name
234	234	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
219	219	---> set -e ___fish_git_prompt_color_$name
225	225	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
16	16	---> end
51	51	---> commandline -f repaint ^/dev/null
18	18	---> end
87	6656	-> set -g __fish_git_prompt_color_flags red
418	6569	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
64	64	---> if status --is-interactive
65	65	---> set -l var $argv[3]
227	227	---> set -e _$var
219	219	---> set -e _{$var}_done
128	128	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
71	71	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
193	193	---> set -e ___fish_git_prompt_color_$name
297	297	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
172	172	---> set -e ___fish_git_prompt_color_$name
217	217	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
194	194	---> set -e ___fish_git_prompt_color_$name
222	222	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
660	660	---> set -e ___fish_git_prompt_color_$name
191	191	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
192	192	---> set -e ___fish_git_prompt_color_$name
248	248	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
323	323	---> set -e ___fish_git_prompt_color_$name
159	159	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
145	145	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
167	167	---> set -e ___fish_git_prompt_color_$name
165	165	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
158	158	---> set -e ___fish_git_prompt_color_$name
181	181	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
174	174	---> set -e ___fish_git_prompt_color_$name
193	193	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
151	151	---> set -e ___fish_git_prompt_color_$name
163	163	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
149	149	---> set -e ___fish_git_prompt_color_$name
159	159	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
16	16	---> end
51	51	---> commandline -f repaint ^/dev/null
18	18	---> end
67	67	-> set -l pcolor $gray
64	64	-> if test $last_status -ne 0
61	61	-> set pcolor $red
21	21	-> end
185	5098	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
100	4913	--> prompt_pwd
4813	4813	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
1350	4439	-> __fish_git_prompt
141	2973	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2832	2832	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
90	90	--> test -n "$repo_info"; 
26	26	--> or return
33	33	-> if begin
3174	3174	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
40	40	-> end
46	46	-> echo
90	90	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
50	50	> echo $_ " "; 
74	170	> __fish_pwd
96	96	-> pwd
293	647	> up-or-search
67	67	-> if commandline --search-mode
168	201	-> set lineno (commandline -L)
33	33	--> commandline -L
36	36	-> switch $lineno
31	31	-> commandline -f history-search-backward
19	19	-> case '*'
73	73	> echo $_ " "; 
69	141	> __fish_pwd
72	72	-> pwd
816429	816429	> learnyounode verify timeServer.js 
306	80627	> fish_prompt
57	57	-> set -l last_status $status
30	30	-> if not set -q __fish_prompt_hostname
38	38	-> if not set -q __fish_prompt_char
123	210	-> set -l normal (set_color normal)
87	87	--> set_color normal
61	89	-> set -l red (set_color red)
28	28	--> set_color red
56	82	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
57	83	-> set -l white (set_color white)
26	26	--> set_color white
56	83	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
57	85	-> set -l brwhite (set_color -o white)
28	28	--> set_color -o white
47	333	-> set -g __fish_git_prompt_showdirtystate true
137	286	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
46	46	---> if status --is-interactive
65	65	---> if test $argv[3] = __fish_git_prompt_show_informative_status
30	30	---> commandline -f repaint ^/dev/null
8	8	---> end
41	226	-> set -g __fish_git_prompt_showuntrackedfiles true
86	185	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
29	29	---> if status --is-interactive
38	38	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
8	8	---> end
39	220	-> set -g __fish_git_prompt_showstashstate true
90	181	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
24	24	---> if status --is-interactive
36	36	---> if test $argv[3] = __fish_git_prompt_show_informative_status
23	23	---> commandline -f repaint ^/dev/null
8	8	---> end
45	4663	-> set -g __fish_git_prompt_color green
388	4618	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
29	29	---> if status --is-interactive
32	32	---> set -l var $argv[3]
172	172	---> set -e _$var
146	146	---> set -e _{$var}_done
102	102	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
157	157	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
151	151	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
27	27	---> end
156	156	---> set -e ___fish_git_prompt_color_$name
151	151	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
138	138	---> set -e ___fish_git_prompt_color_$name
144	144	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
139	139	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
33	33	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
144	144	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
159	159	---> set -e ___fish_git_prompt_color_$name
178	178	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
191	191	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
152	152	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
9	9	---> end
33	33	---> commandline -f repaint ^/dev/null
10	10	---> end
61	4618	-> set -g __fish_git_prompt_color_flags red
372	4557	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
35	35	---> if status --is-interactive
36	36	---> set -l var $argv[3]
122	122	---> set -e _$var
130	130	---> set -e _{$var}_done
90	90	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
115	115	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
33	33	---> end
134	134	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
124	124	---> set -e ___fish_git_prompt_color_$name
424	424	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
157	157	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
148	148	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
134	134	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
43	43	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
131	131	---> set -e ___fish_git_prompt_color_$name
134	134	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
43	43	---> end
72	72	---> commandline -f repaint ^/dev/null
17	17	---> end
67	67	-> set -l pcolor $gray
72	72	-> if test $last_status -ne 0
57	57	-> set pcolor $red
13	13	-> end
151	63757	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
178	63606	--> prompt_pwd
63428	63428	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
883	2937	-> __fish_git_prompt
111	1996	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
1885	1885	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
45	45	--> test -n "$repo_info"; 
13	13	--> or return
21	21	-> if begin
2434	2434	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
27	27	-> end
30	30	-> echo
89	89	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
34	34	> echo $_ " "; 
51	122	> __fish_pwd
71	71	-> pwd
283	21810	> fish_prompt
54	54	-> set -l last_status $status
32	32	-> if not set -q __fish_prompt_hostname
29	29	-> if not set -q __fish_prompt_char
65	110	-> set -l normal (set_color normal)
45	45	--> set_color normal
59	86	-> set -l red (set_color red)
27	27	--> set_color red
57	82	-> set -l cyan (set_color cyan)
25	25	--> set_color cyan
57	83	-> set -l white (set_color white)
26	26	--> set_color white
57	90	-> set -l gray (set_color -o cyan)
33	33	--> set_color -o cyan
58	85	-> set -l brwhite (set_color -o white)
27	27	--> set_color -o white
73	459	-> set -g __fish_git_prompt_showdirtystate true
207	386	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
50	50	---> if status --is-interactive
71	71	---> if test $argv[3] = __fish_git_prompt_show_informative_status
44	44	---> commandline -f repaint ^/dev/null
14	14	---> end
75	447	-> set -g __fish_git_prompt_showuntrackedfiles true
191	372	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
53	53	---> if status --is-interactive
71	71	---> if test $argv[3] = __fish_git_prompt_show_informative_status
42	42	---> commandline -f repaint ^/dev/null
15	15	---> end
76	440	-> set -g __fish_git_prompt_showstashstate true
179	364	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
49	49	---> if status --is-interactive
73	73	---> if test $argv[3] = __fish_git_prompt_show_informative_status
46	46	---> commandline -f repaint ^/dev/null
17	17	---> end
72	4863	-> set -g __fish_git_prompt_color green
487	4791	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
53	53	---> if status --is-interactive
60	60	---> set -l var $argv[3]
189	189	---> set -e _$var
168	168	---> set -e _{$var}_done
127	127	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
75	75	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
225	225	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
127	127	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
165	165	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
49	49	---> end
172	172	---> set -e ___fish_git_prompt_color_$name
155	155	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
140	140	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
30	30	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
127	127	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
30	30	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
158	158	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
8	8	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
51	5167	-> set -g __fish_git_prompt_color_flags red
568	5116	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
77	77	---> if status --is-interactive
41	41	---> set -l var $argv[3]
120	120	---> set -e _$var
163	163	---> set -e _{$var}_done
176	176	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
83	83	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
165	165	---> set -e ___fish_git_prompt_color_$name
143	143	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
143	143	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
168	168	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
165	165	---> set -e ___fish_git_prompt_color_$name
145	145	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
149	149	---> set -e ___fish_git_prompt_color_$name
183	183	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
135	135	---> set -e ___fish_git_prompt_color_$name
455	455	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
34	34	---> end
11	11	---> end
34	34	---> commandline -f repaint ^/dev/null
9	9	---> end
38	38	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
32	32	-> set pcolor $red
11	11	-> end
337	3553	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
226	3216	--> prompt_pwd
2990	2990	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
805	3155	-> __fish_git_prompt
117	2245	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2128	2128	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
82	82	--> test -n "$repo_info"; 
23	23	--> or return
20	20	-> if begin
2538	2538	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
30	30	-> echo
56	56	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
45	136	> __fish_pwd
91	91	-> pwd
282	669	> up-or-search
111	111	-> if commandline --search-mode
159	193	-> set lineno (commandline -L)
34	34	--> commandline -L
33	33	-> switch $lineno
31	31	-> commandline -f history-search-backward
19	19	-> case '*'
67	67	> echo $_ " "; 
109	176	> __fish_pwd
67	67	-> pwd
962791	962791	> learnyounode verify timeServer.js 
401	177734	> fish_prompt
79	79	-> set -l last_status $status
50	50	-> if not set -q __fish_prompt_hostname
46	46	-> if not set -q __fish_prompt_char
174	277	-> set -l normal (set_color normal)
103	103	--> set_color normal
96	140	-> set -l red (set_color red)
44	44	--> set_color red
88	128	-> set -l cyan (set_color cyan)
40	40	--> set_color cyan
87	128	-> set -l white (set_color white)
41	41	--> set_color white
91	135	-> set -l gray (set_color -o cyan)
44	44	--> set_color -o cyan
87	130	-> set -l brwhite (set_color -o white)
43	43	--> set_color -o white
72	497	-> set -g __fish_git_prompt_showdirtystate true
197	425	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
73	73	---> if status --is-interactive
95	95	---> if test $argv[3] = __fish_git_prompt_show_informative_status
45	45	---> commandline -f repaint ^/dev/null
15	15	---> end
67	360	-> set -g __fish_git_prompt_showuntrackedfiles true
139	293	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
40	40	---> if status --is-interactive
62	62	---> if test $argv[3] = __fish_git_prompt_show_informative_status
38	38	---> commandline -f repaint ^/dev/null
14	14	---> end
64	360	-> set -g __fish_git_prompt_showstashstate true
137	296	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
47	47	---> if status --is-interactive
61	61	---> if test $argv[3] = __fish_git_prompt_show_informative_status
38	38	---> commandline -f repaint ^/dev/null
13	13	---> end
70	6560	-> set -g __fish_git_prompt_color green
450	6490	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
45	45	---> if status --is-interactive
51	51	---> set -l var $argv[3]
192	192	---> set -e _$var
176	176	---> set -e _{$var}_done
122	122	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
71	71	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
208	208	---> set -e ___fish_git_prompt_color_$name
159	159	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
157	157	---> set -e ___fish_git_prompt_color_$name
160	160	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
151	151	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
157	157	---> set -e ___fish_git_prompt_color_$name
328	328	---> set -e ___fish_git_prompt_color_{$name}_done
30	30	---> end
234	234	---> set -e ___fish_git_prompt_color_$name
214	214	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
229	229	---> set -e ___fish_git_prompt_color_$name
218	218	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
346	346	---> set -e ___fish_git_prompt_color_$name
212	212	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
245	245	---> set -e ___fish_git_prompt_color_$name
204	204	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
196	196	---> set -e ___fish_git_prompt_color_$name
203	203	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
209	209	---> set -e ___fish_git_prompt_color_$name
206	206	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
194	194	---> set -e ___fish_git_prompt_color_$name
195	195	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
187	187	---> set -e ___fish_git_prompt_color_$name
194	194	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
14	14	---> end
127	127	---> commandline -f repaint ^/dev/null
18	18	---> end
69	5040	-> set -g __fish_git_prompt_color_flags red
373	4971	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
48	48	---> if status --is-interactive
54	54	---> set -l var $argv[3]
214	214	---> set -e _$var
152	152	---> set -e _{$var}_done
136	136	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
76	76	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
170	170	---> set -e ___fish_git_prompt_color_$name
178	178	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
162	162	---> set -e ___fish_git_prompt_color_$name
153	153	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
153	153	---> set -e ___fish_git_prompt_color_$name
146	146	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
143	143	---> set -e ___fish_git_prompt_color_$name
164	164	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
162	162	---> set -e ___fish_git_prompt_color_$name
191	191	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
190	190	---> set -e ___fish_git_prompt_color_$name
163	163	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
150	150	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
132	132	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
147	147	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
132	132	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
139	139	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
10	10	---> end
33	33	---> commandline -f repaint ^/dev/null
9	9	---> end
38	38	-> set -l pcolor $gray
39	39	-> if test $last_status -ne 0
163	77467	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
287	77304	--> prompt_pwd
77017	77017	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
1162	57195	-> __fish_git_prompt
164	55901	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
55737	55737	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
85	85	--> test -n "$repo_info"; 
47	47	--> or return
21	21	-> if begin
28528	28528	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
30	30	-> echo
56	56	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
46	133	> __fish_pwd
87	87	-> pwd
308	20134	> fish_prompt
45	45	-> set -l last_status $status
30	30	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
112	191	-> set -l normal (set_color normal)
79	79	--> set_color normal
98	143	-> set -l red (set_color red)
45	45	--> set_color red
121	164	-> set -l cyan (set_color cyan)
43	43	--> set_color cyan
65	95	-> set -l white (set_color white)
30	30	--> set_color white
59	95	-> set -l gray (set_color -o cyan)
36	36	--> set_color -o cyan
58	87	-> set -l brwhite (set_color -o white)
29	29	--> set_color -o white
78	461	-> set -g __fish_git_prompt_showdirtystate true
225	383	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
25	25	---> if status --is-interactive
50	50	---> if test $argv[3] = __fish_git_prompt_show_informative_status
70	70	---> commandline -f repaint ^/dev/null
13	13	---> end
95	375	-> set -g __fish_git_prompt_showuntrackedfiles true
128	280	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
57	57	---> if status --is-interactive
55	55	---> if test $argv[3] = __fish_git_prompt_show_informative_status
30	30	---> commandline -f repaint ^/dev/null
10	10	---> end
48	258	-> set -g __fish_git_prompt_showstashstate true
97	210	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
29	29	---> if status --is-interactive
47	47	---> if test $argv[3] = __fish_git_prompt_show_informative_status
27	27	---> commandline -f repaint ^/dev/null
10	10	---> end
49	4442	-> set -g __fish_git_prompt_color green
450	4393	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
31	31	---> if status --is-interactive
35	35	---> set -l var $argv[3]
152	152	---> set -e _$var
169	169	---> set -e _{$var}_done
104	104	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
48	48	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
126	126	---> set -e ___fish_git_prompt_color_$name
184	184	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
142	142	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
146	146	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
10	10	---> end
34	34	---> commandline -f repaint ^/dev/null
11	11	---> end
58	4044	-> set -g __fish_git_prompt_color_flags red
359	3986	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
38	38	---> if status --is-interactive
37	37	---> set -l var $argv[3]
114	114	---> set -e _$var
123	123	---> set -e _{$var}_done
89	89	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
112	112	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
127	127	---> set -e ___fish_git_prompt_color_{$name}_done
39	39	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
10	10	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
38	38	-> set -l pcolor $gray
37	37	-> if test $last_status -ne 0
192	3430	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
86	3238	--> prompt_pwd
3152	3152	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
987	3273	-> __fish_git_prompt
124	2219	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2095	2095	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
53	53	--> test -n "$repo_info"; 
14	14	--> or return
22	22	-> if begin
2447	2447	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
33	33	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
46	114	> __fish_pwd
68	68	-> pwd
208	208	> echo $_ " "; 
365	638	> __fish_pwd
273	273	-> pwd
11881	149164	> ls
137283	137283	-> command ls -G $argv
362	282798	> fish_prompt
121	121	-> set -l last_status $status
38	38	-> if not set -q __fish_prompt_hostname
33	33	-> if not set -q __fish_prompt_char
73	139	-> set -l normal (set_color normal)
66	66	--> set_color normal
61	90	-> set -l red (set_color red)
29	29	--> set_color red
60	87	-> set -l cyan (set_color cyan)
27	27	--> set_color cyan
60	88	-> set -l white (set_color white)
28	28	--> set_color white
58	87	-> set -l gray (set_color -o cyan)
29	29	--> set_color -o cyan
59	88	-> set -l brwhite (set_color -o white)
29	29	--> set_color -o white
58	8815	-> set -g __fish_git_prompt_showdirtystate true
163	8757	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
50	50	---> if status --is-interactive
8463	8463	---> if test $argv[3] = __fish_git_prompt_show_informative_status
71	71	---> commandline -f repaint ^/dev/null
10	10	---> end
53	268	-> set -g __fish_git_prompt_showuntrackedfiles true
105	215	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
30	30	---> if status --is-interactive
46	46	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
8	8	---> end
46	246	-> set -g __fish_git_prompt_showstashstate true
94	200	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
32	32	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
8	8	---> end
53	21249	-> set -g __fish_git_prompt_color green
312	21196	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
30	30	---> if status --is-interactive
34	34	---> set -l var $argv[3]
136	136	---> set -e _$var
135	135	---> set -e _{$var}_done
91	91	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
49	49	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
122	122	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
17252	17252	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
121	121	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
162	162	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
127	127	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
12	12	---> end
72	4744	-> set -g __fish_git_prompt_color_flags red
502	4672	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
58	58	---> if status --is-interactive
61	61	---> set -l var $argv[3]
148	148	---> set -e _$var
147	147	---> set -e _{$var}_done
96	96	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
49	49	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
147	147	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
121	121	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
32	32	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
183	183	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
178	178	---> set -e ___fish_git_prompt_color_$name
152	152	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
127	127	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
31	31	---> end
148	148	---> set -e ___fish_git_prompt_color_$name
139	139	---> set -e ___fish_git_prompt_color_{$name}_done
33	33	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
175	175	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
14	14	---> end
49	49	---> commandline -f repaint ^/dev/null
17	17	---> end
62	62	-> set -l pcolor $gray
62	62	-> if test $last_status -ne 0
178	54164	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
1390	53986	--> prompt_pwd
52596	52596	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
2429	110270	-> __fish_git_prompt
153	107781	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
107628	107628	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
47	47	--> test -n "$repo_info"; 
13	13	--> or return
19	19	-> if begin
81647	81647	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
30	30	-> end
32	32	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
45	114	> __fish_pwd
69	69	-> pwd
389	23549	> fish_prompt
63	63	-> set -l last_status $status
77	77	-> if not set -q __fish_prompt_hostname
53	53	-> if not set -q __fish_prompt_char
109	170	-> set -l normal (set_color normal)
61	61	--> set_color normal
91	133	-> set -l red (set_color red)
42	42	--> set_color red
87	127	-> set -l cyan (set_color cyan)
40	40	--> set_color cyan
87	135	-> set -l white (set_color white)
48	48	--> set_color white
87	130	-> set -l gray (set_color -o cyan)
43	43	--> set_color -o cyan
87	130	-> set -l brwhite (set_color -o white)
43	43	--> set_color -o white
71	393	-> set -g __fish_git_prompt_showdirtystate true
152	322	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
44	44	---> if status --is-interactive
65	65	---> if test $argv[3] = __fish_git_prompt_show_informative_status
47	47	---> commandline -f repaint ^/dev/null
14	14	---> end
66	357	-> set -g __fish_git_prompt_showuntrackedfiles true
139	291	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
40	40	---> if status --is-interactive
61	61	---> if test $argv[3] = __fish_git_prompt_show_informative_status
38	38	---> commandline -f repaint ^/dev/null
13	13	---> end
63	358	-> set -g __fish_git_prompt_showstashstate true
143	295	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
40	40	---> if status --is-interactive
60	60	---> if test $argv[3] = __fish_git_prompt_show_informative_status
38	38	---> commandline -f repaint ^/dev/null
14	14	---> end
73	5763	-> set -g __fish_git_prompt_color green
381	5690	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
44	44	---> if status --is-interactive
51	51	---> set -l var $argv[3]
183	183	---> set -e _$var
182	182	---> set -e _{$var}_done
174	174	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
72	72	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
149	149	---> set -e ___fish_git_prompt_color_$name
163	163	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
154	154	---> set -e ___fish_git_prompt_color_$name
160	160	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
147	147	---> set -e ___fish_git_prompt_color_$name
157	157	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
151	151	---> set -e ___fish_git_prompt_color_$name
162	162	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
148	148	---> set -e ___fish_git_prompt_color_$name
160	160	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
635	635	---> set -e ___fish_git_prompt_color_$name
170	170	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
182	182	---> set -e ___fish_git_prompt_color_$name
160	160	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
152	152	---> set -e ___fish_git_prompt_color_$name
157	157	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
148	148	---> set -e ___fish_git_prompt_color_$name
157	157	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
159	159	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
159	159	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
147	147	---> set -e ___fish_git_prompt_color_$name
155	155	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
17	17	---> end
52	52	---> commandline -f repaint ^/dev/null
18	18	---> end
75	4889	-> set -g __fish_git_prompt_color_flags red
412	4814	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
58	58	---> if status --is-interactive
62	62	---> set -l var $argv[3]
147	147	---> set -e _$var
162	162	---> set -e _{$var}_done
137	137	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
81	81	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
148	148	---> set -e ___fish_git_prompt_color_$name
155	155	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
160	160	---> set -e ___fish_git_prompt_color_$name
139	139	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
135	135	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
131	131	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
154	154	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
141	141	---> set -e ___fish_git_prompt_color_$name
174	174	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
152	152	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
149	149	---> set -e ___fish_git_prompt_color_$name
151	151	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
144	144	---> set -e ___fish_git_prompt_color_$name
153	153	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
161	161	---> set -e ___fish_git_prompt_color_{$name}_done
35	35	---> end
124	124	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
121	121	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
10	10	---> end
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
38	38	-> set -l pcolor $gray
39	39	-> if test $last_status -ne 0
182	3852	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
110	3670	--> prompt_pwd
3560	3560	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
856	3662	-> __fish_git_prompt
217	2736	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2519	2519	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
56	56	--> test -n "$repo_info"; 
14	14	--> or return
19	19	-> if begin
2654	2654	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
29	29	-> end
32	32	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
46	112	> __fish_pwd
66	66	-> pwd
139	27082	> . /usr/local/Cellar/fish/2.1.2/share/fish/completions/git.fish
27	27	-> if begin
68	169	-> test (count $argv) -eq 0
101	101	--> count $argv
38	38	-> and tty 0>&0 >/dev/null
15	15	-> end
17623	26675	-> source $argv
50	50	--> function __fish_git_branches
20	20	--> function __fish_git_tags
19	19	--> function __fish_git_heads
18	18	--> function __fish_git_remotes
19	19	--> function __fish_git_modified_files
23	23	--> function __fish_git_ranges
22	22	--> function __fish_git_needs_command
23	23	--> function __fish_git_using_command
100	100	--> complete -f -c git -n 'not __fish_git_needs_command' -l help -d 'Display the manual of a git command'
53	53	--> complete -f -c git -n '__fish_git_needs_command' -a fetch -d 'Download objects and refs from another repository'
55	55	--> complete -f -c git -n '__fish_git_using_command fetch' -a '(__fish_git_remotes)' -d 'Remote'
49	49	--> complete -f -c git -n '__fish_git_using_command fetch' -s q -l quiet -d 'Be quiet'
51	51	--> complete -f -c git -n '__fish_git_using_command fetch' -s v -l verbose -d 'Be verbose'
48	48	--> complete -f -c git -n '__fish_git_using_command fetch' -s a -l append -d 'Append ref names and object names'
47	47	--> complete -f -c git -n '__fish_git_using_command fetch' -s f -l force -d 'Force update of local branches'
48	48	--> complete -f -c git -n '__fish_git_needs_command' -a remote -d 'Manage set of tracked repositories'
46	46	--> complete -f -c git -n '__fish_git_using_command remote' -a '(__fish_git_remotes)'
47	47	--> complete -f -c git -n '__fish_git_using_command remote' -s v -l verbose -d 'Be verbose'
44	44	--> complete -f -c git -n '__fish_git_using_command remote' -a add -d 'Adds a new remote'
44	44	--> complete -f -c git -n '__fish_git_using_command remote' -a rm -d 'Removes a remote'
44	44	--> complete -f -c git -n '__fish_git_using_command remote' -a show -d 'Shows a remote'
50	50	--> complete -f -c git -n '__fish_git_using_command remote' -a prune -d 'Deletes all stale tracking branches'
46	46	--> complete -f -c git -n '__fish_git_using_command remote' -a update -d 'Fetches updates'
43	43	--> complete -f -c git -n '__fish_git_needs_command' -a show -d 'Shows the last commit of a branch'
52	52	--> complete -f -c git -n '__fish_git_using_command show' -a '(__fish_git_branches)' -d 'Branch'
49	49	--> complete -f -c git -n '__fish_git_needs_command' -a show-branch -d 'Shows the commits on branches'
55	55	--> complete -f -c git -n '__fish_git_using_command show-branch' -a '(__fish_git_heads)' --description 'Branch'
45	45	--> complete -c git -n '__fish_git_needs_command'    -a add -d 'Add file contents to the index'
50	50	--> complete -c git -n '__fish_git_using_command add' -s n -l dry-run -d "Don't actually add the file(s)"
54	54	--> complete -c git -n '__fish_git_using_command add' -s v -l verbose -d 'Be verbose'
44	44	--> complete -c git -n '__fish_git_using_command add' -s f -l force -d 'Allow adding otherwise ignored files'
43	43	--> complete -c git -n '__fish_git_using_command add' -s i -l interactive -d 'Interactive mode'
46	46	--> complete -c git -n '__fish_git_using_command add' -s p -l patch -d 'Interactively choose hunks to stage'
42	42	--> complete -c git -n '__fish_git_using_command add' -s e -l edit -d 'Manually create a patch'
43	43	--> complete -c git -n '__fish_git_using_command add' -s u -l update -d 'Only match tracked files'
46	46	--> complete -c git -n '__fish_git_using_command add' -s A -l all -d 'Match files both in working tree and index'
45	45	--> complete -c git -n '__fish_git_using_command add' -s N -l intent-to-add -d 'Record only the fact that the path will be added later'
43	43	--> complete -c git -n '__fish_git_using_command add' -l refresh -d "Don't add the file(s), but only refresh their stat"
42	42	--> complete -c git -n '__fish_git_using_command add' -l ignore-errors -d 'Ignore errors'
46	46	--> complete -c git -n '__fish_git_using_command add' -l ignore-missing -d 'Check if any of the given files would be ignored'
49	49	--> complete -f -c git -n '__fish_git_using_command add; and __fish_contains_opt -s p patch' -a '(__fish_git_modified_files)'
42	42	--> complete -f -c git -n '__fish_git_needs_command'    -a checkout -d 'Checkout and switch to a branch'
54	54	--> complete -f -c git -n '__fish_git_using_command checkout'  -a '(__fish_git_branches)' --description 'Branch'
59	59	--> complete -f -c git -n '__fish_git_using_command checkout'  -a '(__fish_git_tags)' --description 'Tag'
45	45	--> complete -f -c git -n '__fish_git_using_command checkout' -s b -d 'Create a new branch'
58	58	--> complete -f -c git -n '__fish_git_using_command checkout' -s t -l track -d 'Track a new branch'
51	51	--> complete -f -c git -n '__fish_git_needs_command' -a apply -d 'Apply a patch on a git index file and a working tree'
61	61	--> complete -f -c git -n '__fish_git_needs_command' -a archive -d 'Create an archive of files from a named tree'
46	46	--> complete -f -c git -n '__fish_git_needs_command' -a bisect -d 'Find the change that introduced a bug by binary search'
43	43	--> complete -f -c git -n '__fish_git_needs_command' -a branch -d 'List, create, or delete branches'
57	57	--> complete -f -c git -n '__fish_git_using_command branch' -a '(__fish_git_branches)' -d 'Branch'
44	44	--> complete -f -c git -n '__fish_git_using_command branch' -s d -d 'Delete branch'
44	44	--> complete -f -c git -n '__fish_git_using_command branch' -s D -d 'Force deletion of branch'
43	43	--> complete -f -c git -n '__fish_git_using_command branch' -s m -d 'Rename branch'
43	43	--> complete -f -c git -n '__fish_git_using_command branch' -s M -d 'Force renaming branch'
47	47	--> complete -f -c git -n '__fish_git_using_command branch' -s a -d 'Lists both local and remote branches'
48	48	--> complete -f -c git -n '__fish_git_using_command branch' -s t -l track -d 'Track remote branch'
45	45	--> complete -f -c git -n '__fish_git_using_command branch' -l no-track -d 'Do not track remote branch'
45	45	--> complete -f -c git -n '__fish_git_using_command branch' -l set-upstream -d 'Set remote branch to track'
57	57	--> complete -f -c git -n '__fish_git_needs_command' -a cherry-pick -d 'Apply the change introduced by an existing commit'
49	49	--> complete -f -c git -n '__fish_git_using_command cherry-pick' -a '(__fish_git_branches)' -d 'Branch'
42	42	--> complete -f -c git -n '__fish_git_needs_command' -a clone -d 'Clone a repository into a new directory'
41	41	--> complete -c git -n '__fish_git_needs_command'    -a commit -d 'Record changes to the repository'
47	47	--> complete -c git -n '__fish_git_using_command commit' -l amend -d 'Amend the log message of the last commit'
43	43	--> complete -c git -n '__fish_git_needs_command'    -a diff -d 'Show changes between commits, commit and working tree, etc'
48	48	--> complete -c git -n '__fish_git_using_command diff' -a '(__fish_git_ranges)' -d 'Branch'
41	41	--> complete -c git -n '__fish_git_using_command diff' -l cached -d 'Show diff of changes in the index'
41	41	--> complete -c git -n '__fish_git_needs_command'    -a difftool -d 'Open diffs in a visual tool'
52	52	--> complete -c git -n '__fish_git_using_command difftool' -a '(__fish_git_ranges)' -d 'Branch'
43	43	--> complete -c git -n '__fish_git_using_command difftool' -l cached -d 'Visually show diff of changes in the index'
40	40	--> complete -c git -n '__fish_git_needs_command'    -a grep -d 'Print lines matching a pattern'
44	44	--> complete -f -c git -n '__fish_git_needs_command' -a init -d 'Create an empty git repository or reinitialize an existing one'
40	40	--> complete -c git -n '__fish_git_needs_command'    -a log -d 'Show commit logs'
52	52	--> complete -c git -n '__fish_git_using_command log' -a '(__fish_git_heads) (__fish_git_ranges)' -d 'Branch'
47	47	--> complete -f -c git -n '__fish_git_using_command log' -l pretty -a 'oneline short medium full fuller email raw format:'
45	45	--> complete -f -c git -n '__fish_git_needs_command' -a merge -d 'Join two or more development histories together'
49	49	--> complete -f -c git -n '__fish_git_using_command merge' -a '(__fish_git_branches)' -d 'Branch'
41	41	--> complete -f -c git -n '__fish_git_using_command merge' -l commit -d "Autocommit the merge"
42	42	--> complete -f -c git -n '__fish_git_using_command merge' -l no-commit -d "Don't autocommit the merge"
41	41	--> complete -f -c git -n '__fish_git_using_command merge' -l edit -d 'Edit auto-generated merge message'
46	46	--> complete -f -c git -n '__fish_git_using_command merge' -l no-edit -d "Don't edit auto-generated merge message"
42	42	--> complete -f -c git -n '__fish_git_using_command merge' -l ff -d "Don't generate a merge commit if merge is fast-forward"
43	43	--> complete -f -c git -n '__fish_git_using_command merge' -l no-ff -d "Generate a merge commit even if merge is fast-forward"
42	42	--> complete -f -c git -n '__fish_git_using_command merge' -l ff-only -d 'Refuse to merge unless fast-forward possible'
44	44	--> complete -f -c git -n '__fish_git_using_command merge' -l log -d 'Populate the log message with one-line descriptions'
44	44	--> complete -f -c git -n '__fish_git_using_command merge' -l no-log -d "Don't populate the log message with one-line descriptions"
41	41	--> complete -f -c git -n '__fish_git_using_command merge' -l stat -d "Show diffstat of the merge"
44	44	--> complete -f -c git -n '__fish_git_using_command merge' -s n -l no-stat -d "Don't show diffstat of the merge"
46	46	--> complete -f -c git -n '__fish_git_using_command merge' -l squash -d "Squash changes from other branch as a single commit"
42	42	--> complete -f -c git -n '__fish_git_using_command merge' -l no-squash -d "Don't squash changes"
44	44	--> complete -f -c git -n '__fish_git_using_command merge' -s q -l quiet -d 'Be quiet'
43	43	--> complete -f -c git -n '__fish_git_using_command merge' -s v -l verbose -d 'Be verbose'
45	45	--> complete -f -c git -n '__fish_git_using_command merge' -l progress -d 'Force progress status'
46	46	--> complete -f -c git -n '__fish_git_using_command merge' -l no-progress -d 'Force no progress status'
58	58	--> complete -f -c git -n '__fish_git_using_command merge' -s m -d 'Set the commit message'
58	58	--> complete -f -c git -n '__fish_git_using_command merge' -l abort -d 'Abort the current conflict resolution process'
60	60	--> complete -c git -n '__fish_git_needs_command'    -a mv -d 'Move or rename a file, a directory, or a symlink'
46	46	--> complete -f -c git -n '__fish_git_needs_command' -a prune -d 'Prune all unreachable objects from the object database'
45	45	--> complete -f -c git -n '__fish_git_needs_command' -a pull -d 'Fetch from and merge with another repository or a local branch'
46	46	--> complete -f -c git -n '__fish_git_using_command pull' -s q -l quiet -d 'Be quiet'
50	50	--> complete -f -c git -n '__fish_git_using_command pull' -s v -l verbose -d 'Be verbose'
43	43	--> complete -f -c git -n '__fish_git_using_command pull' -l all -d 'Fetch all remotes'
47	47	--> complete -f -c git -n '__fish_git_using_command pull' -s a -l append -d 'Append ref names and object names'
50	50	--> complete -f -c git -n '__fish_git_using_command pull' -s f -l force -d 'Force update of local branches'
46	46	--> complete -f -c git -n '__fish_git_using_command pull' -s k -l keep -d 'Keep downloaded pack'
45	45	--> complete -f -c git -n '__fish_git_using_command pull' -l no-tags -d 'Disable automatic tag following'
44	44	--> complete -f -c git -n '__fish_git_using_command pull' -l progress -d 'Force progress status'
52	52	--> complete -f -c git -n '__fish_git_using_command pull' -a '(git remote)' -d 'Remote alias'
55	55	--> complete -f -c git -n '__fish_git_using_command pull' -a '(__fish_git_branches)' -d 'Branch'
44	44	--> complete -f -c git -n '__fish_git_needs_command' -a push -d 'Update remote refs along with associated objects'
59	59	--> complete -f -c git -n '__fish_git_using_command push' -a '(git remote)' -d 'Remote alias'
48	48	--> complete -f -c git -n '__fish_git_using_command push' -a '(__fish_git_branches)' -d 'Branch'
43	43	--> complete -f -c git -n '__fish_git_using_command push' -l all -d 'Push all refs under refs/heads/'
44	44	--> complete -f -c git -n '__fish_git_using_command push' -l prune -d "Remove remote branches that don't have a local counterpart"
41	41	--> complete -f -c git -n '__fish_git_using_command push' -l mirror -d 'Push all refs under refs/'
42	42	--> complete -f -c git -n '__fish_git_using_command push' -l delete -d 'Delete all listed refs from the remote repository'
42	42	--> complete -f -c git -n '__fish_git_using_command push' -l tags -d 'Push all refs under refs/tags'
45	45	--> complete -f -c git -n '__fish_git_using_command push' -s n -l dry-run -d 'Do everything except actually send the updates'
42	42	--> complete -f -c git -n '__fish_git_using_command push' -l porcelain -d 'Produce machine-readable output'
43	43	--> complete -f -c git -n '__fish_git_using_command push' -s f -l force -d 'Force update of remote refs'
47	47	--> complete -f -c git -n '__fish_git_using_command push' -s u -l set-upstream -d 'Add upstream (tracking) reference'
43	43	--> complete -f -c git -n '__fish_git_using_command push' -s q -l quiet -d 'Be quiet'
43	43	--> complete -f -c git -n '__fish_git_using_command push' -s v -l verbose -d 'Be verbose'
43	43	--> complete -f -c git -n '__fish_git_using_command push' -l progress -d 'Force progress status'
43	43	--> complete -f -c git -n '__fish_git_needs_command' -a rebase -d 'Forward-port local commits to the updated upstream head'
48	48	--> complete -f -c git -n '__fish_git_using_command rebase' -a '(git remote)' -d 'Remote alias'
48	48	--> complete -f -c git -n '__fish_git_using_command rebase' -a '(__fish_git_branches)' -d 'Branch'
42	42	--> complete -f -c git -n '__fish_git_using_command rebase' -l continue -d 'Restart the rebasing process'
45	45	--> complete -f -c git -n '__fish_git_using_command rebase' -l abort -d 'Abort the rebase operation'
43	43	--> complete -f -c git -n '__fish_git_using_command rebase' -l keep-empty -d "Keep the commits that don't cahnge anything"
42	42	--> complete -f -c git -n '__fish_git_using_command rebase' -l skip -d 'Restart the rebasing process by skipping the current patch'
46	46	--> complete -f -c git -n '__fish_git_using_command rebase' -s m -l merge -d 'Use merging strategies to rebase'
44	44	--> complete -f -c git -n '__fish_git_using_command rebase' -s q -l quiet -d 'Be quiet'
44	44	--> complete -f -c git -n '__fish_git_using_command rebase' -s v -l verbose -d 'Be verbose'
41	41	--> complete -f -c git -n '__fish_git_using_command rebase' -l stat -d "Show diffstat of the rebase"
47	47	--> complete -f -c git -n '__fish_git_using_command rebase' -s n -l no-stat -d "Don't show diffstat of the rebase"
42	42	--> complete -f -c git -n '__fish_git_using_command rebase' -l verify -d "Allow the pre-rebase hook to run"
43	43	--> complete -f -c git -n '__fish_git_using_command rebase' -l no-verify -d "Don't allow the pre-rebase hook to run"
45	45	--> complete -f -c git -n '__fish_git_using_command rebase' -s f -l force-rebase -d 'Force the rebase'
48	48	--> complete -f -c git -n '__fish_git_using_command rebase' -s i -l interactive -d 'Interactive mode'
44	44	--> complete -f -c git -n '__fish_git_using_command rebase' -s p -l preserve-merges -d 'Try to recreate merges'
40	40	--> complete -f -c git -n '__fish_git_using_command rebase' -l root -d 'Rebase all reachable commits'
43	43	--> complete -f -c git -n '__fish_git_using_command rebase' -l autosquash -d 'Automatic squashing'
45	45	--> complete -f -c git -n '__fish_git_using_command rebase' -l no-autosquash -d 'No automatic squashing'
43	43	--> complete -f -c git -n '__fish_git_using_command rebase' -l no-ff -d 'No fast-forward'
42	42	--> complete -c git -n '__fish_git_needs_command'    -a reset -d 'Reset current HEAD to the specified state'
41	41	--> complete -f -c git -n '__fish_git_using_command reset' -l hard -d 'Reset files in working directory'
42	42	--> complete -c git -n '__fish_git_using_command reset' -a '(__fish_git_branches)'
45	45	--> complete -f -c git -n '__fish_git_needs_command' -a revert -d 'Revert an existing commit'
41	41	--> complete -c git -n '__fish_git_needs_command'    -a rm     -d 'Remove files from the working tree and from the index'
32	32	--> complete -c git -n '__fish_git_using_command rm' -f
50	50	--> complete -c git -n '__fish_git_using_command rm' -l cached -d 'Keep local copies'
51	51	--> complete -c git -n '__fish_git_using_command rm' -l ignore-unmatch -d 'Exit with a zero status even if no files matched'
74	74	--> complete -c git -n '__fish_git_using_command rm' -s r -d 'Allow recursive removal'
71	71	--> complete -c git -n '__fish_git_using_command rm' -s q -l quiet -d 'Be quiet'
55	55	--> complete -c git -n '__fish_git_using_command rm' -s f -l force -d 'Override the up-to-date check'
55	55	--> complete -c git -n '__fish_git_using_command rm' -s n -l dry-run -d 'Dry run'
46	46	--> complete -f -c git -n '__fish_git_needs_command' -a status -d 'Show the working tree status'
53	53	--> complete -f -c git -n '__fish_git_using_command status' -s s -l short -d 'Give the output in the short-format'
50	50	--> complete -f -c git -n '__fish_git_using_command status' -s b -l branch -d 'Show the branch and tracking info even in short-format'
47	47	--> complete -f -c git -n '__fish_git_using_command status'      -l porcelain -d 'Give the output in a stable, easy-to-parse format'
43	43	--> complete -f -c git -n '__fish_git_using_command status' -s z -d 'Terminate entries with null character'
60	60	--> complete -f -c git -n '__fish_git_using_command status' -s u -l untracked-files -x -a 'no normal all' -d 'The untracked files handling mode'
56	56	--> complete -f -c git -n '__fish_git_using_command status' -l ignore-submodules -x -a 'none untracked dirty all' -d 'Ignore changes to submodules'
45	45	--> complete -f -c git -n '__fish_git_needs_command' -a tag -d 'Create, list, delete or verify a tag object signed with GPG'
83	83	--> complete -f -c git -n '__fish_git_using_command tag; and __fish_not_contain_opt -s d; and __fish_not_contain_opt -s v; and test (count (commandline -opc | sgrep -v -e \'^-\')) -eq 3' -a '(__fish_git_branches)' -d 'Branch'
49	49	--> complete -f -c git -n '__fish_git_using_command tag' -s a -l annotate -d 'Make an unsigned, annotated tag object'
51	51	--> complete -f -c git -n '__fish_git_using_command tag' -s s -l sign -d 'Make a GPG-signed tag'
43	43	--> complete -f -c git -n '__fish_git_using_command tag' -s d -l delete -d 'Remove a tag'
43	43	--> complete -f -c git -n '__fish_git_using_command tag' -s v -l verify -d 'Verify signature of a tag'
47	47	--> complete -f -c git -n '__fish_git_using_command tag' -s f -l force -d 'Force overwriting exising tag'
42	42	--> complete -f -c git -n '__fish_git_using_command tag' -s l -l list -d 'List tags'
47	47	--> complete -f -c git -n '__fish_contains_opt -s d' -a '(__fish_git_tags)' -d 'Tag'
46	46	--> complete -f -c git -n '__fish_contains_opt -s v' -a '(__fish_git_tags)' -d 'Tag'
41	41	--> complete -c git -n '__fish_git_needs_command' -a stash -d 'Stash away changes'
45	45	--> complete -f -c git -n '__fish_git_using_command stash' -a list -d 'List stashes'
42	42	--> complete -f -c git -n '__fish_git_using_command stash' -a show -d 'Show the changes recorded in the stash'
42	42	--> complete -f -c git -n '__fish_git_using_command stash' -a pop -d 'Apply and remove a single stashed state'
42	42	--> complete -f -c git -n '__fish_git_using_command stash' -a apply -d 'Apply a single stashed state'
45	45	--> complete -f -c git -n '__fish_git_using_command stash' -a clear -d 'Remove all stashed states'
42	42	--> complete -f -c git -n '__fish_git_using_command stash' -a drop -d 'Remove a single stashed state from the stash list'
42	42	--> complete -f -c git -n '__fish_git_using_command stash' -a create -d 'Create a stash'
40	40	--> complete -f -c git -n '__fish_git_using_command stash' -a save -d 'Save a new stash'
41	41	--> complete -f -c git -n '__fish_git_using_command stash' -a branch -d 'Create a new branch from a stash'
44	44	--> complete -f -c git -n '__fish_git_needs_command' -a config -d 'Set and read git configuration variables'
43	43	--> complete -f -c git -n '__fish_git_needs_command' -a format-patch -d 'Generate patch series to send upstream'
49	49	--> complete -f -c git -n '__fish_git_using_command format-patch' -a '(__fish_git_branches)' -d 'Branch'
41	41	--> complete -f -c git -n '__fish_git_needs_command' -a submodule -d 'Initialize, update or inspect submodules'
46	46	--> complete -f -c git -n '__fish_git_using_command submodule' -a 'add' -d 'Add a submodule'
46	46	--> complete -f -c git -n '__fish_git_using_command submodule' -a 'status' -d 'Show submodule status'
44	44	--> complete -f -c git -n '__fish_git_using_command submodule' -a 'init' -d 'Initialize all submodules'
46	46	--> complete -f -c git -n '__fish_git_using_command submodule' -a 'update' -d 'Update all submodules'
47	47	--> complete -f -c git -n '__fish_git_using_command submodule' -a 'summary' -d 'Show commit summary'
51	51	--> complete -f -c git -n '__fish_git_using_command submodule' -a 'foreach' -d 'Run command on each submodule'
46	46	--> complete -f -c git -n '__fish_git_using_command submodule' -a 'sync' -d 'Sync submodules\' URL with .gitmodules'
42	42	--> complete -f -c git -n '__fish_git_needs_command' -a whatchanged -d 'Show logs with difference each commit introduces'
60	60	--> complete -c git -n '__fish_git_needs_command' -a '(command git config --get-regexp alias | sed "s/^alias\.\([^ ]*\).*/\1/")' -d 'Alias (user-defined command)'
19	19	-> end
85	85	> echo $_ " "; 
95	173	> __fish_pwd
78	78	-> pwd
3538110	3538110	> git clone https://github.com/imran3/learnyounode_tut.git
385	22275	> fish_prompt
79	79	-> set -l last_status $status
32	32	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
68	133	-> set -l normal (set_color normal)
65	65	--> set_color normal
65	96	-> set -l red (set_color red)
31	31	--> set_color red
57	83	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
129	182	-> set -l white (set_color white)
53	53	--> set_color white
100	147	-> set -l gray (set_color -o cyan)
47	47	--> set_color -o cyan
180	230	-> set -l brwhite (set_color -o white)
50	50	--> set_color -o white
72	444	-> set -g __fish_git_prompt_showdirtystate true
169	372	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
69	69	---> if status --is-interactive
74	74	---> if test $argv[3] = __fish_git_prompt_show_informative_status
51	51	---> commandline -f repaint ^/dev/null
9	9	---> end
45	239	-> set -g __fish_git_prompt_showuntrackedfiles true
90	194	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
42	42	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
43	246	-> set -g __fish_git_prompt_showstashstate true
95	203	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
34	34	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
8	8	---> end
47	5432	-> set -g __fish_git_prompt_color green
462	5385	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
29	29	---> if status --is-interactive
33	33	---> set -l var $argv[3]
148	148	---> set -e _$var
132	132	---> set -e _{$var}_done
94	94	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
50	50	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
149	149	---> set -e ___fish_git_prompt_color_$name
167	167	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
159	159	---> set -e ___fish_git_prompt_color_$name
222	222	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
160	160	---> set -e ___fish_git_prompt_color_$name
188	188	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
156	156	---> set -e ___fish_git_prompt_color_$name
167	167	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
148	148	---> set -e ___fish_git_prompt_color_$name
164	164	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
155	155	---> set -e ___fish_git_prompt_color_$name
155	155	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
131	131	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
140	140	---> set -e ___fish_git_prompt_color_$name
472	472	---> set -e ___fish_git_prompt_color_{$name}_done
32	32	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
280	280	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
191	191	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
55	4444	-> set -g __fish_git_prompt_color_flags red
472	4389	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
35	35	---> if status --is-interactive
36	36	---> set -l var $argv[3]
128	128	---> set -e _$var
124	124	---> set -e _{$var}_done
92	92	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
50	50	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
126	126	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
189	189	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
153	153	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
133	133	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
133	133	---> set -e ___fish_git_prompt_color_$name
160	160	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
9	9	---> end
42	42	---> commandline -f repaint ^/dev/null
17	17	---> end
52	52	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
158	3415	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
277	3257	--> prompt_pwd
2980	2980	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
804	3402	-> __fish_git_prompt
111	2534	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2423	2423	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
51	51	--> test -n "$repo_info"; 
13	13	--> or return
20	20	-> if begin
3021	3021	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
32	32	-> end
32	32	-> echo
61	61	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
44	111	> __fish_pwd
67	67	-> pwd
351	22263	> fish_prompt
45	45	-> set -l last_status $status
30	30	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
64	102	-> set -l normal (set_color normal)
38	38	--> set_color normal
58	84	-> set -l red (set_color red)
26	26	--> set_color red
56	81	-> set -l cyan (set_color cyan)
25	25	--> set_color cyan
55	81	-> set -l white (set_color white)
26	26	--> set_color white
56	82	-> set -l gray (set_color -o cyan)
26	26	--> set_color -o cyan
57	84	-> set -l brwhite (set_color -o white)
27	27	--> set_color -o white
47	256	-> set -g __fish_git_prompt_showdirtystate true
99	209	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
31	31	---> if status --is-interactive
43	43	---> if test $argv[3] = __fish_git_prompt_show_informative_status
27	27	---> commandline -f repaint ^/dev/null
9	9	---> end
43	233	-> set -g __fish_git_prompt_showuntrackedfiles true
87	190	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
26	26	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
42	234	-> set -g __fish_git_prompt_showstashstate true
93	192	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
26	26	---> if status --is-interactive
39	39	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
45	4679	-> set -g __fish_git_prompt_color green
328	4634	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
29	29	---> if status --is-interactive
32	32	---> set -l var $argv[3]
130	130	---> set -e _$var
154	154	---> set -e _{$var}_done
127	127	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
60	60	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
147	147	---> set -e ___fish_git_prompt_color_$name
145	145	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
155	155	---> set -e ___fish_git_prompt_color_$name
150	150	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
139	139	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
139	139	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
150	150	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
153	153	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
31	31	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
446	446	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
9	9	---> end
33	33	---> commandline -f repaint ^/dev/null
10	10	---> end
48	4156	-> set -g __fish_git_prompt_color_flags red
307	4108	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
39	39	---> if status --is-interactive
36	36	---> set -l var $argv[3]
126	126	---> set -e _$var
140	140	---> set -e _{$var}_done
87	87	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
111	111	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
154	154	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
144	144	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
143	143	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
121	121	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
31	31	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
30	30	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
28	28	---> end
9	9	---> end
31	31	---> commandline -f repaint ^/dev/null
9	9	---> end
59	59	-> set -l pcolor $gray
55	55	-> if test $last_status -ne 0
201	3255	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
203	3054	--> prompt_pwd
2851	2851	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
1313	4830	-> __fish_git_prompt
158	3432	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
3274	3274	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
65	65	--> test -n "$repo_info"; 
20	20	--> or return
23	23	-> if begin
3343	3343	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
38	38	-> end
47	47	-> echo
85	85	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
33	33	> echo $_ " "; 
46	128	> __fish_pwd
82	82	-> pwd
131	131	> echo $_ " "; 
121	245	> __fish_pwd
124	124	-> pwd
387	6513	> ls
6126	6126	-> command ls -G $argv
527	25996	> fish_prompt
91	91	-> set -l last_status $status
56	56	-> if not set -q __fish_prompt_hostname
52	52	-> if not set -q __fish_prompt_char
116	194	-> set -l normal (set_color normal)
78	78	--> set_color normal
158	206	-> set -l red (set_color red)
48	48	--> set_color red
79	118	-> set -l cyan (set_color cyan)
39	39	--> set_color cyan
79	145	-> set -l white (set_color white)
66	66	--> set_color white
69	102	-> set -l gray (set_color -o cyan)
33	33	--> set_color -o cyan
68	100	-> set -l brwhite (set_color -o white)
32	32	--> set_color -o white
55	323	-> set -g __fish_git_prompt_showdirtystate true
127	268	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
37	37	---> if status --is-interactive
58	58	---> if test $argv[3] = __fish_git_prompt_show_informative_status
36	36	---> commandline -f repaint ^/dev/null
10	10	---> end
51	278	-> set -g __fish_git_prompt_showuntrackedfiles true
110	227	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
30	30	---> if status --is-interactive
48	48	---> if test $argv[3] = __fish_git_prompt_show_informative_status
29	29	---> commandline -f repaint ^/dev/null
10	10	---> end
50	268	-> set -g __fish_git_prompt_showstashstate true
104	218	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
30	30	---> if status --is-interactive
46	46	---> if test $argv[3] = __fish_git_prompt_show_informative_status
28	28	---> commandline -f repaint ^/dev/null
10	10	---> end
58	4883	-> set -g __fish_git_prompt_color green
375	4825	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
35	35	---> if status --is-interactive
38	38	---> set -l var $argv[3]
177	177	---> set -e _$var
149	149	---> set -e _{$var}_done
97	97	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
130	130	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
146	146	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
209	209	---> set -e ___fish_git_prompt_color_$name
185	185	---> set -e ___fish_git_prompt_color_{$name}_done
39	39	---> end
146	146	---> set -e ___fish_git_prompt_color_$name
144	144	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
131	131	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
131	131	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
170	170	---> set -e ___fish_git_prompt_color_{$name}_done
27	27	---> end
155	155	---> set -e ___fish_git_prompt_color_$name
162	162	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
151	151	---> set -e ___fish_git_prompt_color_$name
178	178	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
163	163	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
17	17	---> end
49	49	---> commandline -f repaint ^/dev/null
18	18	---> end
72	5494	-> set -g __fish_git_prompt_color_flags red
378	5422	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
55	55	---> if status --is-interactive
60	60	---> set -l var $argv[3]
144	144	---> set -e _$var
168	168	---> set -e _{$var}_done
140	140	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
82	82	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
148	148	---> set -e ___fish_git_prompt_color_$name
159	159	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
148	148	---> set -e ___fish_git_prompt_color_$name
166	166	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
623	623	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
156	156	---> set -e ___fish_git_prompt_color_$name
160	160	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
183	183	---> set -e ___fish_git_prompt_color_$name
153	153	---> set -e ___fish_git_prompt_color_{$name}_done
44	44	---> end
142	142	---> set -e ___fish_git_prompt_color_$name
146	146	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
131	131	---> set -e ___fish_git_prompt_color_$name
143	143	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
131	131	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
131	131	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
213	213	---> set -e ___fish_git_prompt_color_$name
134	134	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
162	162	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
11	11	---> end
31	31	---> commandline -f repaint ^/dev/null
9	9	---> end
37	37	-> set -l pcolor $gray
37	37	-> if test $last_status -ne 0
181	3468	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
89	3287	--> prompt_pwd
3198	3198	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
1351	4433	-> __fish_git_prompt
233	2989	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2756	2756	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
69	69	--> test -n "$repo_info"; 
24	24	--> or return
32	32	-> if begin
4900	4900	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
36	36	-> end
44	44	-> echo
172	172	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
51	51	> echo $_ " "; 
76	177	> __fish_pwd
101	101	-> pwd
452	21329	> fish_prompt
66	66	-> set -l last_status $status
51	51	-> if not set -q __fish_prompt_hostname
48	48	-> if not set -q __fish_prompt_char
83	127	-> set -l normal (set_color normal)
44	44	--> set_color normal
67	101	-> set -l red (set_color red)
34	34	--> set_color red
59	88	-> set -l cyan (set_color cyan)
29	29	--> set_color cyan
58	85	-> set -l white (set_color white)
27	27	--> set_color white
58	85	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
58	86	-> set -l brwhite (set_color -o white)
28	28	--> set_color -o white
48	270	-> set -g __fish_git_prompt_showdirtystate true
107	222	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
30	30	---> if status --is-interactive
47	47	---> if test $argv[3] = __fish_git_prompt_show_informative_status
28	28	---> commandline -f repaint ^/dev/null
10	10	---> end
43	234	-> set -g __fish_git_prompt_showuntrackedfiles true
89	191	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
43	235	-> set -g __fish_git_prompt_showstashstate true
87	192	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
26	26	---> if status --is-interactive
45	45	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
44	4264	-> set -g __fish_git_prompt_color green
306	4220	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
41	41	---> if status --is-interactive
51	51	---> set -l var $argv[3]
152	152	---> set -e _$var
138	138	---> set -e _{$var}_done
94	94	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
133	133	---> set -e ___fish_git_prompt_color_$name
134	134	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
115	115	---> set -e ___fish_git_prompt_color_$name
139	139	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
134	134	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
110	110	---> set -e ___fish_git_prompt_color_$name
177	177	---> set -e ___fish_git_prompt_color_{$name}_done
28	28	---> end
146	146	---> set -e ___fish_git_prompt_color_$name
146	146	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
145	145	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
9	9	---> end
31	31	---> commandline -f repaint ^/dev/null
9	9	---> end
47	4545	-> set -g __fish_git_prompt_color_flags red
321	4498	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
33	33	---> if status --is-interactive
35	35	---> set -l var $argv[3]
107	107	---> set -e _$var
136	136	---> set -e _{$var}_done
90	90	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
110	110	---> set -e ___fish_git_prompt_color_$name
137	137	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
143	143	---> set -e ___fish_git_prompt_color_$name
173	173	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
133	133	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
432	432	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
31	31	---> end
121	121	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
31	31	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
157	157	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
134	134	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
9	9	---> end
30	30	---> commandline -f repaint ^/dev/null
9	9	---> end
37	37	-> set -l pcolor $gray
36	36	-> if test $last_status -ne 0
132	3138	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
140	3006	--> prompt_pwd
2866	2866	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
1244	3645	-> __fish_git_prompt
112	2310	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2198	2198	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
65	65	--> test -n "$repo_info"; 
26	26	--> or return
30	30	-> if begin
3439	3439	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
71	71	-> end
99	99	-> echo
97	97	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
38	38	> echo $_ " "; 
48	129	> __fish_pwd
81	81	-> pwd
72	72	> echo $_ " "; 
86	168	> __fish_pwd
82	82	-> pwd
347	1135	> cd learnyounode_tut/
60	60	-> if status --is-command-substitution
60	60	-> set -l previous $PWD
69	69	-> if test $argv[1] = - ^/dev/null
158	158	-> builtin cd $argv[1]
43	43	-> set -l cd_status $status
73	73	-> if test $cd_status = 0 -a "$PWD" != "$previous"
96	96	-> set -g dirprev $dirprev $previous
143	143	-> set -e dirnext
44	44	-> set -g __fish_cd_direction prev
16	16	-> end
26	26	-> return $cd_status
436	139332	> fish_prompt
80	80	-> set -l last_status $status
85	85	-> if not set -q __fish_prompt_hostname
75	75	-> if not set -q __fish_prompt_char
150	242	-> set -l normal (set_color normal)
92	92	--> set_color normal
96	146	-> set -l red (set_color red)
50	50	--> set_color red
134	182	-> set -l cyan (set_color cyan)
48	48	--> set_color cyan
94	143	-> set -l white (set_color white)
49	49	--> set_color white
62	92	-> set -l gray (set_color -o cyan)
30	30	--> set_color -o cyan
60	90	-> set -l brwhite (set_color -o white)
30	30	--> set_color -o white
52	339	-> set -g __fish_git_prompt_showdirtystate true
151	287	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
33	33	---> if status --is-interactive
46	46	---> if test $argv[3] = __fish_git_prompt_show_informative_status
47	47	---> commandline -f repaint ^/dev/null
10	10	---> end
45	237	-> set -g __fish_git_prompt_showuntrackedfiles true
90	192	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
44	249	-> set -g __fish_git_prompt_showstashstate true
98	205	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
27	27	---> if status --is-interactive
45	45	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
47	4557	-> set -g __fish_git_prompt_color green
494	4510	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
29	29	---> if status --is-interactive
34	34	---> set -l var $argv[3]
155	155	---> set -e _$var
141	141	---> set -e _{$var}_done
86	86	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
129	129	---> set -e ___fish_git_prompt_color_$name
127	127	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
155	155	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
152	152	---> set -e ___fish_git_prompt_color_$name
152	152	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
134	134	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
133	133	---> set -e ___fish_git_prompt_color_{$name}_done
40	40	---> end
156	156	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
16	16	---> end
50	50	---> commandline -f repaint ^/dev/null
17	17	---> end
54	4829	-> set -g __fish_git_prompt_color_flags red
475	4775	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
44	44	---> if status --is-interactive
36	36	---> set -l var $argv[3]
152	152	---> set -e _$var
131	131	---> set -e _{$var}_done
101	101	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
119	119	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
133	133	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
170	170	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
147	147	---> set -e ___fish_git_prompt_color_$name
145	145	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
493	493	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
134	134	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
9	9	---> end
33	33	---> commandline -f repaint ^/dev/null
10	10	---> end
38	38	-> set -l pcolor $gray
38	38	-> if test $last_status -ne 0
187	3437	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
146	3250	--> prompt_pwd
3104	3104	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
996	105143	-> __fish_git_prompt
234	3086	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2852	2852	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
55	55	--> test -n "$repo_info"; 
10	10	--> or return
41	41	--> set -l git_dir         $repo_info[1]
39	39	--> set -l inside_gitdir   $repo_info[2]
39	39	--> set -l bare_repo       $repo_info[3]
36	36	--> set -l inside_worktree $repo_info[4]
25	25	--> set -l short_sha
67	150	--> if test (count $repo_info) = 5
83	83	---> count $repo_info
44	44	--> set short_sha $repo_info[5]
12	12	--> end
703	5290	---> __fish_git_prompt_operation_branch_bare $repo_info
40	40	----> set -l git_dir         $argv[1]
37	37	----> set -l inside_gitdir   $argv[2]
41	41	----> set -l bare_repo       $argv[3]
24	24	----> set -l short_sha
57	106	----> if test (count $argv) = 5
49	49	-----> count $argv
37	37	----> set short_sha $argv[5]
12	12	----> end
24	24	----> set -l branch
24	24	----> set -l operation
24	24	----> set -l detached no
22	22	----> set -l bare
22	22	----> set -l step
23	23	----> set -l total
21	21	----> set -l os
61	61	----> if test -d $git_dir/rebase-merge
56	56	----> if test -d $git_dir/rebase-apply
10	10	----> end
44	44	----> if test -n "$step" -a -n "$total"
38	38	----> if test -z "$branch"
94	3675	----> set branch (command git symbolic-ref HEAD ^/dev/null; set os $status)
3495	3495	-----> command git symbolic-ref HEAD ^/dev/null; 
86	86	-----> set os $status
90	90	----> if test $os -ne 0
11	11	----> end
46	46	----> if test "true" = $inside_gitdir
28	28	----> echo $operation
28	28	----> echo $branch
23	23	----> echo $detached
20	20	----> echo $bare
36	36	--> set -l r $rbc[1] # current operation
36	36	--> set -l b $rbc[2] # current branch
34	34	--> set -l detached $rbc[3]
32	32	--> set -l w #dirty working directory
22	22	--> set -l i #staged changes
21	21	--> set -l s #stashes
21	21	--> set -l u #untracked
30	30	--> set -l c $rbc[4] # bare repository
21	21	--> set -l p #upstream
25	25	--> set -l informative_status
150	9081	--> __fish_git_prompt_validate_chars
154	753	---> __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate        '✔'
45	45	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
128	128	----> set -l user_variable $$user_variable_name
73	116	----> if test (count $argv) -ge 3
43	43	-----> count $argv
42	42	----> set -l variable _$user_variable_name
41	41	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
75	144	----> set -g $variable (set -q $user_variable_name; and echo $user_variable; or echo $char)
32	32	-----> set -q $user_variable_name; 
14	14	-----> and echo $user_variable; 
23	23	-----> or echo $char
12	12	----> end
123	715	---> __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate        '*' '✚'
42	42	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
97	97	----> set -l user_variable $$user_variable_name
63	108	----> if test (count $argv) -ge 3
45	45	-----> count $argv
36	36	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
74	145	----> set -g $variable (set -q $user_variable_name; and echo $user_variable; or echo $char)
30	30	-----> set -q $user_variable_name; 
13	13	-----> and echo $user_variable; 
28	28	-----> or echo $char
12	12	----> end
170	904	---> __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate      '#' '✖'
65	65	----> set -l user_variable_name "$argv[1]"
35	35	----> set -l char $argv[2]
120	120	----> set -l user_variable $$user_variable_name
104	199	----> if test (count $argv) -ge 3
95	95	-----> count $argv
37	37	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
76	143	----> set -g $variable (set -q $user_variable_name; and echo $user_variable; or echo $char)
31	31	-----> set -q $user_variable_name; 
13	13	-----> and echo $user_variable; 
23	23	-----> or echo $char
12	12	----> end
182	769	---> __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate       '+' '●'
43	43	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
101	101	----> set -l user_variable $$user_variable_name
61	105	----> if test (count $argv) -ge 3
44	44	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
68	139	----> set -g $variable (set -q $user_variable_name; and echo $user_variable; or echo $char)
34	34	-----> set -q $user_variable_name; 
14	14	-----> and echo $user_variable; 
23	23	-----> or echo $char
12	12	----> end
129	723	---> __fish_git_prompt_set_char __fish_git_prompt_char_stashstate        '$'
40	40	----> set -l user_variable_name "$argv[1]"
76	76	----> set -l char $argv[2]
124	124	----> set -l user_variable $$user_variable_name
62	97	----> if test (count $argv) -ge 3
35	35	-----> count $argv
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
70	135	----> set -g $variable (set -q $user_variable_name; and echo $user_variable; or echo $char)
30	30	-----> set -q $user_variable_name; 
13	13	-----> and echo $user_variable; 
22	22	-----> or echo $char
11	11	----> end
127	882	---> __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator    ' ' '|'
170	170	----> set -l user_variable_name "$argv[1]"
52	52	----> set -l char $argv[2]
136	136	----> set -l user_variable $$user_variable_name
70	109	----> if test (count $argv) -ge 3
39	39	-----> count $argv
33	33	----> if test -n "$__fish_git_prompt_show_informative_status"
9	9	----> end
34	34	----> set -l variable _$user_variable_name
41	41	----> set -l variable_done "$variable"_done
34	34	----> if not set -q $variable
66	127	----> set -g $variable (set -q $user_variable_name; and echo $user_variable; or echo $char)
28	28	-----> set -q $user_variable_name; 
12	12	-----> and echo $user_variable; 
21	21	-----> or echo $char
10	10	----> end
111	652	---> __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles    '%' '…'
37	37	----> set -l user_variable_name "$argv[1]"
29	29	----> set -l char $argv[2]
94	94	----> set -l user_variable $$user_variable_name
66	102	----> if test (count $argv) -ge 3
36	36	-----> count $argv
32	32	----> if test -n "$__fish_git_prompt_show_informative_status"
9	9	----> end
34	34	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
33	33	----> if not set -q $variable
65	126	----> set -g $variable (set -q $user_variable_name; and echo $user_variable; or echo $char)
28	28	-----> set -q $user_variable_name; 
12	12	-----> and echo $user_variable; 
21	21	-----> or echo $char
11	11	----> end
119	711	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead    '>' '↑'
38	38	----> set -l user_variable_name "$argv[1]"
29	29	----> set -l char $argv[2]
111	111	----> set -l user_variable $$user_variable_name
78	120	----> if test (count $argv) -ge 3
42	42	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
36	36	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
34	34	----> if not set -q $variable
68	133	----> set -g $variable (set -q $user_variable_name; and echo $user_variable; or echo $char)
31	31	-----> set -q $user_variable_name; 
12	12	-----> and echo $user_variable; 
22	22	-----> or echo $char
11	11	----> end
121	701	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind   '<' '↓'
38	38	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
114	114	----> set -l user_variable $$user_variable_name
66	105	----> if test (count $argv) -ge 3
39	39	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
9	9	----> end
37	37	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
33	33	----> if not set -q $variable
66	135	----> set -g $variable (set -q $user_variable_name; and echo $user_variable; or echo $char)
34	34	-----> set -q $user_variable_name; 
13	13	-----> and echo $user_variable; 
22	22	-----> or echo $char
10	10	----> end
174	753	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
76	76	----> set -l user_variable_name "$argv[1]"
38	38	----> set -l char $argv[2]
103	103	----> set -l user_variable $$user_variable_name
74	111	----> if test (count $argv) -ge 3
37	37	-----> count $argv
36	36	----> set -l variable _$user_variable_name
41	41	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
66	128	----> set -g $variable (set -q $user_variable_name; and echo $user_variable; or echo $char)
28	28	-----> set -q $user_variable_name; 
12	12	-----> and echo $user_variable; 
22	22	-----> or echo $char
11	11	----> end
122	656	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal    '='
37	37	----> set -l user_variable_name "$argv[1]"
29	29	----> set -l char $argv[2]
112	112	----> set -l user_variable $$user_variable_name
66	103	----> if test (count $argv) -ge 3
37	37	-----> count $argv
38	38	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
34	34	----> if not set -q $variable
65	134	----> set -g $variable (set -q $user_variable_name; and echo $user_variable; or echo $char)
28	28	-----> set -q $user_variable_name; 
18	18	-----> and echo $user_variable; 
23	23	-----> or echo $char
11	11	----> end
125	712	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix   ''
37	37	----> set -l user_variable_name "$argv[1]"
29	29	----> set -l char $argv[2]
107	107	----> set -l user_variable $$user_variable_name
72	111	----> if test (count $argv) -ge 3
39	39	-----> count $argv
41	41	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
83	174	----> set -g $variable (set -q $user_variable_name; and echo $user_variable; or echo $char)
36	36	-----> set -q $user_variable_name; 
14	14	-----> and echo $user_variable; 
41	41	-----> or echo $char
13	13	----> end
54	54	--> if test "true" = $inside_worktree
111	111	--> if test -n "$__fish_git_prompt_show_informative_status"
37	37	--> if test -n "$__fish_git_prompt_showdirtystate"
236	4972	--> set -l config (command git config --bool bash.showDirtyState)
4736	4736	---> command git config --bool bash.showDirtyState
154	154	--> if test "$config" != "false"
90	3473	--> set w (__fish_git_prompt_dirty)
184	3383	---> __fish_git_prompt_dirty
30	30	----> set -l dirty
23	23	----> set -l os
3011	3011	----> command git diff --no-ext-diff --quiet --exit-code
73	73	----> set os $status
39	39	----> if test $os -ne 0
23	23	----> echo $dirty
67	3348	--> set i (__fish_git_prompt_staged $short_sha)
144	3281	---> __fish_git_prompt_staged $short_sha
42	42	----> set -l short_sha $argv[1]
24	24	----> set -l staged
38	38	----> if test -n "$short_sha"
2953	2953	----> command git diff-index --cached --quiet HEAD --; 
35	35	----> or set staged $___fish_git_prompt_char_stagedstate
16	16	----> else
29	29	----> echo $staged
12	12	--> end
11	11	--> end
75	75	--> if test -n "$__fish_git_prompt_showstashstate" -a -r $git_dir/refs/stash
41	41	--> if test -n "$__fish_git_prompt_showuntrackedfiles"
118	2331	--> set -l config (command git config --bool bash.showUntrackedFiles)
2213	2213	---> command git config --bool bash.showUntrackedFiles
59	59	--> if test "$config" != false
3784	3784	--> if command git ls-files --others --exclude-standard --error-unmatch -- '*' >/dev/null ^/dev/null
73	73	--> set u $___fish_git_prompt_char_untrackedfiles
15	15	--> end
11	11	--> end
11	11	--> end
11	11	--> end
150	150	--> if test -n "$__fish_git_prompt_showupstream" -o "$__fish_git_prompt_show_informative_status"
10	10	--> end
274	20413	--> __fish_git_prompt_validate_colors
364	1416	---> __fish_git_prompt_set_color __fish_git_prompt_color '' ''
52	52	----> set -l user_variable_name "$argv[1]"
40	40	----> set -l user_variable $$user_variable_name
25	25	----> set -l user_variable_bright
26	26	----> set -l default default_done
65	105	----> switch (count $argv)
40	40	-----> count $argv
42	42	----> set default "$argv[2]"
34	34	----> set default_done "$argv[3]"
12	12	----> end
59	92	----> if test (count $user_variable) -eq 2
33	33	-----> count $user_variable
57	57	----> set -l variable _$user_variable_name
72	72	----> set -l variable_done "$variable"_done
64	64	----> if not set -q $variable
42	42	----> if test -n "$user_variable"
49	49	----> if test -n "$user_variable_bright"
106	178	----> set -g $variable (set_color $user_variable)
72	72	-----> set_color $user_variable
28	28	----> end
82	113	----> set -g $variable_done (set_color normal)
31	31	-----> set_color normal
11	11	----> else
10	10	----> end
318	1182	---> __fish_git_prompt_set_color __fish_git_prompt_color_prefix
43	43	----> set -l user_variable_name "$argv[1]"
136	136	----> set -l user_variable $$user_variable_name
33	33	----> set -l user_variable_bright
27	27	----> set -l default default_done
72	128	----> switch (count $argv)
56	56	-----> count $argv
37	37	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
16	16	----> case 2 # One default given, use normal for done
66	95	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
72	72	----> set -l variable_done "$variable"_done
50	50	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
49	49	----> set -g $variable $default
44	44	----> set -g $variable_done $default_done
12	12	----> end
11	11	----> end
263	1033	---> __fish_git_prompt_set_color __fish_git_prompt_color_suffix
40	40	----> set -l user_variable_name "$argv[1]"
120	120	----> set -l user_variable $$user_variable_name
28	28	----> set -l user_variable_bright
26	26	----> set -l default default_done
60	96	----> switch (count $argv)
36	36	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
67	94	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
43	43	----> set -l variable _$user_variable_name
44	44	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
44	44	----> set -g $variable $default
53	53	----> set -g $variable_done $default_done
12	12	----> end
11	11	----> end
374	1338	---> __fish_git_prompt_set_color __fish_git_prompt_color_bare
38	38	----> set -l user_variable_name "$argv[1]"
111	111	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	89	----> switch (count $argv)
35	35	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
75	111	----> if test (count $user_variable) -eq 2
36	36	-----> count $user_variable
111	111	----> set -l variable _$user_variable_name
79	79	----> set -l variable_done "$variable"_done
53	53	----> if not set -q $variable
48	48	----> if test -n "$user_variable"
78	78	----> set -g $variable $default
74	74	----> set -g $variable_done $default_done
20	20	----> end
17	17	----> end
304	1234	---> __fish_git_prompt_set_color __fish_git_prompt_color_merging
106	106	----> set -l user_variable_name "$argv[1]"
143	143	----> set -l user_variable $$user_variable_name
29	29	----> set -l user_variable_bright
27	27	----> set -l default default_done
90	142	----> switch (count $argv)
52	52	-----> count $argv
54	54	----> set default $___fish_git_prompt_color
39	39	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
62	90	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
41	41	----> set -l variable_done "$variable"_done
48	48	----> if not set -q $variable
43	43	----> if test -n "$user_variable"
51	51	----> set -g $variable $default
45	45	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
325	1256	---> __fish_git_prompt_set_color __fish_git_prompt_color_cleanstate
54	54	----> set -l user_variable_name "$argv[1]"
128	128	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
60	98	----> switch (count $argv)
38	38	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
99	143	----> if test (count $user_variable) -eq 2
44	44	-----> count $user_variable
51	51	----> set -l variable _$user_variable_name
63	63	----> set -l variable_done "$variable"_done
66	66	----> if not set -q $variable
79	79	----> if test -n "$user_variable"
51	51	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
259	987	---> __fish_git_prompt_set_color __fish_git_prompt_color_invalidstate
39	39	----> set -l user_variable_name "$argv[1]"
106	106	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
26	26	----> set -l default default_done
56	90	----> switch (count $argv)
34	34	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
63	90	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
46	46	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
47	47	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
255	991	---> __fish_git_prompt_set_color __fish_git_prompt_color_upstream
38	38	----> set -l user_variable_name "$argv[1]"
103	103	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
27	27	----> set -l default default_done
54	89	----> switch (count $argv)
35	35	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
35	35	----> set default_done $___fish_git_prompt_color_done
13	13	----> case 2 # One default given, use normal for done
60	113	----> if test (count $user_variable) -eq 2
53	53	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
134	134	---> if test -n "$__fish_git_prompt_showcolorhints"
448	1817	---> __fish_git_prompt_set_color __fish_git_prompt_color_flags
76	76	----> set -l user_variable_name "$argv[1]"
59	59	----> set -l user_variable $$user_variable_name
41	41	----> set -l user_variable_bright
44	44	----> set -l default default_done
88	142	----> switch (count $argv)
54	54	-----> count $argv
57	57	----> set default $___fish_git_prompt_color
59	59	----> set default_done $___fish_git_prompt_color_done
19	19	----> case 2 # One default given, use normal for done
101	149	----> if test (count $user_variable) -eq 2
48	48	-----> count $user_variable
63	63	----> set -l variable _$user_variable_name
63	63	----> set -l variable_done "$variable"_done
70	70	----> if not set -q $variable
62	62	----> if test -n "$user_variable"
52	52	----> if test -n "$user_variable_bright"
119	189	----> set -g $variable (set_color $user_variable)
70	70	-----> set_color $user_variable
20	20	----> end
120	166	----> set -g $variable_done (set_color normal)
46	46	-----> set_color normal
20	20	----> else
18	18	----> end
476	1670	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch
67	67	----> set -l user_variable_name "$argv[1]"
156	156	----> set -l user_variable $$user_variable_name
46	46	----> set -l user_variable_bright
47	47	----> set -l default default_done
88	146	----> switch (count $argv)
58	58	-----> count $argv
61	61	----> set default $___fish_git_prompt_color
63	63	----> set default_done $___fish_git_prompt_color_done
19	19	----> case 2 # One default given, use normal for done
107	154	----> if test (count $user_variable) -eq 2
47	47	-----> count $user_variable
63	63	----> set -l variable _$user_variable_name
64	64	----> set -l variable_done "$variable"_done
69	69	----> if not set -q $variable
58	58	----> if test -n "$user_variable"
71	71	----> set -g $variable $default
72	72	----> set -g $variable_done $default_done
20	20	----> end
18	18	----> end
501	1742	---> __fish_git_prompt_set_color __fish_git_prompt_color_dirtystate  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
69	69	----> set -l user_variable_name "$argv[1]"
149	149	----> set -l user_variable $$user_variable_name
46	46	----> set -l user_variable_bright
45	45	----> set -l default default_done
92	162	----> switch (count $argv)
70	70	-----> count $argv
74	74	----> set default "$argv[2]"
69	69	----> set default_done "$argv[3]"
23	23	----> end
100	150	----> if test (count $user_variable) -eq 2
50	50	-----> count $user_variable
66	66	----> set -l variable _$user_variable_name
65	65	----> set -l variable_done "$variable"_done
71	71	----> if not set -q $variable
62	62	----> if test -n "$user_variable"
79	79	----> set -g $variable $default
75	75	----> set -g $variable_done $default_done
19	19	----> end
17	17	----> end
385	1365	---> __fish_git_prompt_set_color __fish_git_prompt_color_stagedstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
67	67	----> set -l user_variable_name "$argv[1]"
137	137	----> set -l user_variable $$user_variable_name
44	44	----> set -l user_variable_bright
48	48	----> set -l default default_done
112	187	----> switch (count $argv)
75	75	-----> count $argv
66	66	----> set default "$argv[2]"
60	60	----> set default_done "$argv[3]"
12	12	----> end
69	97	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
48	48	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
11	11	---> end
424	1647	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch_detached (set_color red)
35	35	----> set_color red
41	41	----> set -l user_variable_name "$argv[1]"
136	136	----> set -l user_variable $$user_variable_name
56	56	----> set -l user_variable_bright
52	52	----> set -l default default_done
96	167	----> switch (count $argv)
71	71	-----> count $argv
70	70	----> set default "$argv[2]"
110	161	----> set default_done (set_color normal)
51	51	-----> set_color normal
22	22	----> case 3 # Both defaults given
66	95	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
40	40	----> set -l variable _$user_variable_name
45	45	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
44	44	----> set -g $variable $default
137	137	----> set -g $variable_done $default_done
24	24	----> end
20	20	----> end
534	1294	---> __fish_git_prompt_set_color __fish_git_prompt_color_stashstate      $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
51	51	----> set -l user_variable_name "$argv[1]"
103	103	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
62	115	----> switch (count $argv)
53	53	-----> count $argv
40	40	----> set default "$argv[2]"
39	39	----> set default_done "$argv[3]"
12	12	----> end
58	85	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
42	42	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
285	1022	---> __fish_git_prompt_set_color __fish_git_prompt_color_untrackedfiles  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
45	45	----> set -l user_variable_name "$argv[1]"
109	109	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
25	25	----> set -l default default_done
53	97	----> switch (count $argv)
44	44	-----> count $argv
38	38	----> set default "$argv[2]"
38	38	----> set default_done "$argv[3]"
11	11	----> end
61	88	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
47	47	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
37	37	--> set -l branch_color $___fish_git_prompt_color_branch
37	37	--> set -l branch_done  $___fish_git_prompt_color_branch_done
99	99	--> if test -n "$__fish_git_prompt_showcolorhints"
71	71	--> if test -n "$w"
61	61	--> if test -n "$i"
56	56	--> if test -n "$s"
108	108	--> if test -n "$u"
47	47	--> set u "$___fish_git_prompt_color_untrackedfiles$u$___fish_git_prompt_color_untrackedfiles_done"
12	12	--> end
118	45521	--> set b (/bin/sh -c 'echo "${1#refs/heads/}"' -- $b)
45403	45403	---> /bin/sh -c 'echo "${1#refs/heads/}"' -- $b
53	53	--> if test -n "$b"
44	44	--> set b "$branch_color$b$branch_done"
13	13	--> end
30	30	--> if test -n "$c"
28	28	--> if test -n "$r"
27	27	--> if test -n "$p"
47	47	--> set -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"
38	38	--> set -l f "$w$i$s$u"
33	33	--> if test -n "$f"
35	35	--> set f "$space$f"
10	10	--> end
27	27	--> set -l format $argv[1]
29	29	--> if test -z "$format"
29	29	--> set format " (%s)"
11	11	--> end
227	227	--> printf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___git_ps_color_suffix_done"
21	21	-> if begin
18744	18744	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
43	43	-> end
29	29	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
48	121	> __fish_pwd
73	73	-> pwd
339	69242	> fish_prompt
45	45	-> set -l last_status $status
37	37	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
102	146	-> set -l normal (set_color normal)
44	44	--> set_color normal
99	145	-> set -l red (set_color red)
46	46	--> set_color red
93	160	-> set -l cyan (set_color cyan)
67	67	--> set_color cyan
70	103	-> set -l white (set_color white)
33	33	--> set_color white
161	239	-> set -l gray (set_color -o cyan)
78	78	--> set_color -o cyan
111	160	-> set -l brwhite (set_color -o white)
49	49	--> set_color -o white
79	499	-> set -g __fish_git_prompt_showdirtystate true
199	420	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
57	57	---> if status --is-interactive
101	101	---> if test $argv[3] = __fish_git_prompt_show_informative_status
47	47	---> commandline -f repaint ^/dev/null
16	16	---> end
77	442	-> set -g __fish_git_prompt_showuntrackedfiles true
180	365	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
50	50	---> if status --is-interactive
72	72	---> if test $argv[3] = __fish_git_prompt_show_informative_status
46	46	---> commandline -f repaint ^/dev/null
17	17	---> end
77	421	-> set -g __fish_git_prompt_showstashstate true
163	344	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
48	48	---> if status --is-interactive
71	71	---> if test $argv[3] = __fish_git_prompt_show_informative_status
45	45	---> commandline -f repaint ^/dev/null
17	17	---> end
70	2164	-> set -g __fish_git_prompt_color green
353	2094	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
70	70	---> if status --is-interactive
124	124	---> set -l var $argv[3]
57	57	---> set -e _$var
58	58	---> set -e _{$var}_done
116	116	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
78	78	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
57	57	---> set -e ___fish_git_prompt_color_$name
60	60	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
56	56	---> set -e ___fish_git_prompt_color_$name
60	60	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
53	53	---> set -e ___fish_git_prompt_color_$name
59	59	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
57	57	---> set -e ___fish_git_prompt_color_$name
78	78	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
41	41	---> set -e ___fish_git_prompt_color_$name
36	36	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
34	34	---> set -e ___fish_git_prompt_color_$name
34	34	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
33	33	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
33	33	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
41	41	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
8	8	---> end
29	29	---> commandline -f repaint ^/dev/null
10	10	---> end
50	4965	-> set -g __fish_git_prompt_color_flags red
416	4915	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
32	32	---> if status --is-interactive
34	34	---> set -l var $argv[3]
154	154	---> set -e _$var
159	159	---> set -e _{$var}_done
83	83	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
138	138	---> set -e ___fish_git_prompt_color_$name
182	182	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
146	146	---> set -e ___fish_git_prompt_color_$name
197	197	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
32	32	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
121	121	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
121	121	---> set -e ___fish_git_prompt_color_$name
146	146	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
479	479	---> set -e ___fish_git_prompt_color_$name
167	167	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
152	152	---> set -e ___fish_git_prompt_color_$name
159	159	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
151	151	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
138	138	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
9	9	---> end
33	33	---> commandline -f repaint ^/dev/null
10	10	---> end
39	39	-> set -l pcolor $gray
40	40	-> if test $last_status -ne 0
149	3416	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
202	3267	--> prompt_pwd
3065	3065	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
729	50388	-> __fish_git_prompt
147	2824	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2677	2677	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
55	55	--> test -n "$repo_info"; 
9	9	--> or return
42	42	--> set -l git_dir         $repo_info[1]
39	39	--> set -l inside_gitdir   $repo_info[2]
39	39	--> set -l bare_repo       $repo_info[3]
35	35	--> set -l inside_worktree $repo_info[4]
25	25	--> set -l short_sha
132	214	--> if test (count $repo_info) = 5
82	82	---> count $repo_info
58	58	--> set short_sha $repo_info[5]
20	20	--> end
670	4269	---> __fish_git_prompt_operation_branch_bare $repo_info
43	43	----> set -l git_dir         $argv[1]
38	38	----> set -l inside_gitdir   $argv[2]
40	40	----> set -l bare_repo       $argv[3]
24	24	----> set -l short_sha
60	109	----> if test (count $argv) = 5
49	49	-----> count $argv
38	38	----> set short_sha $argv[5]
12	12	----> end
24	24	----> set -l branch
24	24	----> set -l operation
24	24	----> set -l detached no
22	22	----> set -l bare
24	24	----> set -l step
29	29	----> set -l total
22	22	----> set -l os
56	56	----> if test -d $git_dir/rebase-merge
51	51	----> if test -d $git_dir/rebase-apply
10	10	----> end
43	43	----> if test -n "$step" -a -n "$total"
43	43	----> if test -z "$branch"
89	2717	----> set branch (command git symbolic-ref HEAD ^/dev/null; set os $status)
2562	2562	-----> command git symbolic-ref HEAD ^/dev/null; 
66	66	-----> set os $status
49	49	----> if test $os -ne 0
11	11	----> end
45	45	----> if test "true" = $inside_gitdir
29	29	----> echo $operation
28	28	----> echo $branch
24	24	----> echo $detached
20	20	----> echo $bare
36	36	--> set -l r $rbc[1] # current operation
36	36	--> set -l b $rbc[2] # current branch
34	34	--> set -l detached $rbc[3]
23	23	--> set -l w #dirty working directory
23	23	--> set -l i #staged changes
23	23	--> set -l s #stashes
22	22	--> set -l u #untracked
31	31	--> set -l c $rbc[4] # bare repository
22	22	--> set -l p #upstream
25	25	--> set -l informative_status
94	7064	--> __fish_git_prompt_validate_chars
176	646	---> __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate        '✔'
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
136	136	----> set -l user_variable $$user_variable_name
67	107	----> if test (count $argv) -ge 3
40	40	-----> count $argv
38	38	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
80	80	----> if not set -q $variable
158	736	---> __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate        '*' '✚'
92	92	----> set -l user_variable_name "$argv[1]"
56	56	----> set -l char $argv[2]
135	135	----> set -l user_variable $$user_variable_name
68	108	----> if test (count $argv) -ge 3
40	40	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
46	46	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
54	54	----> if not set -q $variable
128	556	---> __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate      '#' '✖'
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
95	95	----> set -l user_variable $$user_variable_name
61	106	----> if test (count $argv) -ge 3
45	45	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
127	548	---> __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate       '+' '●'
39	39	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
93	93	----> set -l user_variable $$user_variable_name
60	98	----> if test (count $argv) -ge 3
38	38	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
43	43	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
132	502	---> __fish_git_prompt_set_char __fish_git_prompt_char_stashstate        '$'
38	38	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
91	91	----> set -l user_variable $$user_variable_name
65	101	----> if test (count $argv) -ge 3
36	36	-----> count $argv
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
142	671	---> __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator    ' ' '|'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
95	95	----> set -l user_variable $$user_variable_name
89	143	----> if test (count $argv) -ge 3
54	54	-----> count $argv
52	52	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
61	61	----> set -l variable _$user_variable_name
58	58	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
129	550	---> __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles    '%' '…'
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
93	93	----> set -l user_variable $$user_variable_name
60	104	----> if test (count $argv) -ge 3
44	44	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
36	36	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
127	543	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead    '>' '↑'
40	40	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
93	93	----> set -l user_variable $$user_variable_name
59	96	----> if test (count $argv) -ge 3
37	37	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
36	36	----> set -l variable _$user_variable_name
41	41	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
127	536	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind   '<' '↓'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
92	92	----> set -l user_variable $$user_variable_name
60	97	----> if test (count $argv) -ge 3
37	37	-----> count $argv
33	33	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
36	36	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
133	497	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
38	38	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
94	94	----> set -l user_variable $$user_variable_name
59	95	----> if test (count $argv) -ge 3
36	36	-----> count $argv
36	36	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
34	34	----> if not set -q $variable
157	707	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal    '='
107	107	----> set -l user_variable_name "$argv[1]"
54	54	----> set -l char $argv[2]
114	114	----> set -l user_variable $$user_variable_name
108	164	----> if test (count $argv) -ge 3
56	56	-----> count $argv
36	36	----> set -l variable _$user_variable_name
41	41	----> set -l variable_done "$variable"_done
34	34	----> if not set -q $variable
124	478	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix   ''
36	36	----> set -l user_variable_name "$argv[1]"
28	28	----> set -l char $argv[2]
90	90	----> set -l user_variable $$user_variable_name
64	98	----> if test (count $argv) -ge 3
34	34	-----> count $argv
35	35	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
33	33	----> if not set -q $variable
47	47	--> if test "true" = $inside_worktree
116	116	--> if test -n "$__fish_git_prompt_show_informative_status"
44	44	--> if test -n "$__fish_git_prompt_showdirtystate"
85	2281	--> set -l config (command git config --bool bash.showDirtyState)
2196	2196	---> command git config --bool bash.showDirtyState
62	62	--> if test "$config" != "false"
63	2745	--> set w (__fish_git_prompt_dirty)
109	2682	---> __fish_git_prompt_dirty
28	28	----> set -l dirty
24	24	----> set -l os
2394	2394	----> command git diff --no-ext-diff --quiet --exit-code
61	61	----> set os $status
42	42	----> if test $os -ne 0
24	24	----> echo $dirty
75	3217	--> set i (__fish_git_prompt_staged $short_sha)
123	3142	---> __fish_git_prompt_staged $short_sha
42	42	----> set -l short_sha $argv[1]
25	25	----> set -l staged
40	40	----> if test -n "$short_sha"
2811	2811	----> command git diff-index --cached --quiet HEAD --; 
52	52	----> or set staged $___fish_git_prompt_char_stagedstate
21	21	----> else
28	28	----> echo $staged
10	10	--> end
10	10	--> end
63	63	--> if test -n "$__fish_git_prompt_showstashstate" -a -r $git_dir/refs/stash
37	37	--> if test -n "$__fish_git_prompt_showuntrackedfiles"
86	2349	--> set -l config (command git config --bool bash.showUntrackedFiles)
2263	2263	---> command git config --bool bash.showUntrackedFiles
58	58	--> if test "$config" != false
2866	2866	--> if command git ls-files --others --exclude-standard --error-unmatch -- '*' >/dev/null ^/dev/null
71	71	--> set u $___fish_git_prompt_char_untrackedfiles
13	13	--> end
10	10	--> end
10	10	--> end
10	10	--> end
148	148	--> if test -n "$__fish_git_prompt_showupstream" -o "$__fish_git_prompt_show_informative_status"
10	10	--> end
180	16063	--> __fish_git_prompt_validate_colors
253	1062	---> __fish_git_prompt_set_color __fish_git_prompt_color '' ''
45	45	----> set -l user_variable_name "$argv[1]"
37	37	----> set -l user_variable $$user_variable_name
24	24	----> set -l user_variable_bright
25	25	----> set -l default default_done
54	90	----> switch (count $argv)
36	36	-----> count $argv
33	33	----> set default "$argv[2]"
32	32	----> set default_done "$argv[3]"
11	11	----> end
58	88	----> if test (count $user_variable) -eq 2
30	30	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
37	37	----> if test -n "$user_variable"
30	30	----> if test -n "$user_variable_bright"
68	120	----> set -g $variable (set_color $user_variable)
52	52	-----> set_color $user_variable
12	12	----> end
68	95	----> set -g $variable_done (set_color normal)
27	27	-----> set_color normal
11	11	----> else
10	10	----> end
281	1076	---> __fish_git_prompt_set_color __fish_git_prompt_color_prefix
76	76	----> set -l user_variable_name "$argv[1]"
119	119	----> set -l user_variable $$user_variable_name
40	40	----> set -l user_variable_bright
28	28	----> set -l default default_done
59	101	----> switch (count $argv)
42	42	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
65	92	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
45	45	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
10	10	----> end
9	9	----> end
263	982	---> __fish_git_prompt_set_color __fish_git_prompt_color_suffix
40	40	----> set -l user_variable_name "$argv[1]"
99	99	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	93	----> switch (count $argv)
39	39	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
58	84	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
43	43	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
46	46	----> set -g $variable_done $default_done
12	12	----> end
11	11	----> end
365	1145	---> __fish_git_prompt_set_color __fish_git_prompt_color_bare
39	39	----> set -l user_variable_name "$argv[1]"
106	106	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
26	26	----> set -l default default_done
56	96	----> switch (count $argv)
40	40	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
35	35	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
57	83	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
39	39	----> if test -n "$user_variable"
72	72	----> set -g $variable $default
63	63	----> set -g $variable_done $default_done
17	17	----> end
15	15	----> end
315	1078	---> __fish_git_prompt_set_color __fish_git_prompt_color_merging
62	62	----> set -l user_variable_name "$argv[1]"
110	110	----> set -l user_variable $$user_variable_name
28	28	----> set -l user_variable_bright
26	26	----> set -l default default_done
59	96	----> switch (count $argv)
37	37	-----> count $argv
37	37	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
59	85	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
43	43	----> if not set -q $variable
37	37	----> if test -n "$user_variable"
50	50	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
274	867	---> __fish_git_prompt_set_color __fish_git_prompt_color_cleanstate
40	40	----> set -l user_variable_name "$argv[1]"
119	119	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
56	96	----> switch (count $argv)
40	40	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
57	83	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
44	44	----> if not set -q $variable
278	1149	---> __fish_git_prompt_set_color __fish_git_prompt_color_invalidstate
49	49	----> set -l user_variable_name "$argv[1]"
116	116	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
26	26	----> set -l default default_done
58	94	----> switch (count $argv)
36	36	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
100	169	----> if test (count $user_variable) -eq 2
69	69	-----> count $user_variable
60	60	----> set -l variable _$user_variable_name
56	56	----> set -l variable_done "$variable"_done
43	43	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
50	50	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
273	1010	---> __fish_git_prompt_set_color __fish_git_prompt_color_upstream
40	40	----> set -l user_variable_name "$argv[1]"
105	105	----> set -l user_variable $$user_variable_name
36	36	----> set -l user_variable_bright
41	41	----> set -l default default_done
60	96	----> switch (count $argv)
36	36	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
35	35	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
58	88	----> if test (count $user_variable) -eq 2
30	30	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
39	39	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
125	125	---> if test -n "$__fish_git_prompt_showcolorhints"
291	1157	---> __fish_git_prompt_set_color __fish_git_prompt_color_flags
45	45	----> set -l user_variable_name "$argv[1]"
36	36	----> set -l user_variable $$user_variable_name
25	25	----> set -l user_variable_bright
26	26	----> set -l default default_done
56	90	----> switch (count $argv)
34	34	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
84	130	----> if test (count $user_variable) -eq 2
46	46	-----> count $user_variable
49	49	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
42	42	----> if test -n "$user_variable"
30	30	----> if test -n "$user_variable_bright"
71	110	----> set -g $variable (set_color $user_variable)
39	39	-----> set_color $user_variable
11	11	----> end
66	93	----> set -g $variable_done (set_color normal)
27	27	-----> set_color normal
10	10	----> else
11	11	----> end
274	1105	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch
86	86	----> set -l user_variable_name "$argv[1]"
116	116	----> set -l user_variable $$user_variable_name
28	28	----> set -l user_variable_bright
38	38	----> set -l default default_done
72	117	----> switch (count $argv)
45	45	-----> count $argv
37	37	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
67	95	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
42	42	----> if test -n "$user_variable"
45	45	----> set -g $variable $default
41	41	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
273	990	---> __fish_git_prompt_set_color __fish_git_prompt_color_dirtystate  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
39	39	----> set -l user_variable_name "$argv[1]"
111	111	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	96	----> switch (count $argv)
42	42	-----> count $argv
37	37	----> set default "$argv[2]"
35	35	----> set default_done "$argv[3]"
11	11	----> end
54	79	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
42	42	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
40	40	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
305	1082	---> __fish_git_prompt_set_color __fish_git_prompt_color_stagedstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
40	40	----> set -l user_variable_name "$argv[1]"
122	122	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
53	96	----> switch (count $argv)
43	43	-----> count $argv
37	37	----> set default "$argv[2]"
36	36	----> set default_done "$argv[3]"
10	10	----> end
54	86	----> if test (count $user_variable) -eq 2
32	32	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
59	59	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
44	44	----> set -g $variable $default
62	62	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
10	10	---> end
304	965	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch_detached (set_color red)
39	39	----> set_color red
47	47	----> set -l user_variable_name "$argv[1]"
83	83	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
25	25	----> set -l default default_done
53	91	----> switch (count $argv)
38	38	-----> count $argv
43	43	----> set default "$argv[2]"
61	91	----> set default_done (set_color normal)
30	30	-----> set_color normal
12	12	----> case 3 # Both defaults given
57	83	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
49	49	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
272	997	---> __fish_git_prompt_set_color __fish_git_prompt_color_stashstate      $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
37	37	----> set -l user_variable_name "$argv[1]"
120	120	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	96	----> switch (count $argv)
42	42	-----> count $argv
37	37	----> set default "$argv[2]"
36	36	----> set default_done "$argv[3]"
11	11	----> end
54	79	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
40	40	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
9	9	----> end
280	1083	---> __fish_git_prompt_set_color __fish_git_prompt_color_untrackedfiles  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
44	44	----> set -l user_variable_name "$argv[1]"
122	122	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
25	25	----> set -l default default_done
54	96	----> switch (count $argv)
42	42	-----> count $argv
58	58	----> set default "$argv[2]"
42	42	----> set default_done "$argv[3]"
16	16	----> end
69	97	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
40	40	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
43	43	----> if test -n "$user_variable"
43	43	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
37	37	--> set -l branch_color $___fish_git_prompt_color_branch
36	36	--> set -l branch_done  $___fish_git_prompt_color_branch_done
84	84	--> if test -n "$__fish_git_prompt_showcolorhints"
32	32	--> if test -n "$w"
30	30	--> if test -n "$i"
28	28	--> if test -n "$s"
34	34	--> if test -n "$u"
44	44	--> set u "$___fish_git_prompt_color_untrackedfiles$u$___fish_git_prompt_color_untrackedfiles_done"
11	11	--> end
108	3338	--> set b (/bin/sh -c 'echo "${1#refs/heads/}"' -- $b)
3230	3230	---> /bin/sh -c 'echo "${1#refs/heads/}"' -- $b
58	58	--> if test -n "$b"
45	45	--> set b "$branch_color$b$branch_done"
13	13	--> end
32	32	--> if test -n "$c"
31	31	--> if test -n "$r"
29	29	--> if test -n "$p"
51	51	--> set -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"
42	42	--> set -l f "$w$i$s$u"
36	36	--> if test -n "$f"
38	38	--> set f "$space$f"
12	12	--> end
30	30	--> set -l format $argv[1]
32	32	--> if test -z "$format"
31	31	--> set format " (%s)"
11	11	--> end
197	197	--> printf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___git_ps_color_suffix_done"
22	22	-> if begin
5291	5291	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
39	39	-> end
44	44	-> echo
68	68	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
45	45	> echo $_ " "; 
69	188	> __fish_pwd
119	119	-> pwd
46	46	> echo $_ " "; 
44	92	> __fish_pwd
48	48	-> pwd
5966	5966	> git status
359	75953	> fish_prompt
64	64	-> set -l last_status $status
34	34	-> if not set -q __fish_prompt_hostname
32	32	-> if not set -q __fish_prompt_char
68	119	-> set -l normal (set_color normal)
51	51	--> set_color normal
61	89	-> set -l red (set_color red)
28	28	--> set_color red
57	84	-> set -l cyan (set_color cyan)
27	27	--> set_color cyan
58	84	-> set -l white (set_color white)
26	26	--> set_color white
57	84	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
59	86	-> set -l brwhite (set_color -o white)
27	27	--> set_color -o white
48	274	-> set -g __fish_git_prompt_showdirtystate true
104	226	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
31	31	---> if status --is-interactive
50	50	---> if test $argv[3] = __fish_git_prompt_show_informative_status
31	31	---> commandline -f repaint ^/dev/null
10	10	---> end
44	235	-> set -g __fish_git_prompt_showuntrackedfiles true
88	191	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
28	28	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
42	236	-> set -g __fish_git_prompt_showstashstate true
89	194	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
30	30	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
46	1810	-> set -g __fish_git_prompt_color green
236	1764	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
29	29	---> if status --is-interactive
34	34	---> set -l var $argv[3]
49	49	---> set -e _$var
44	44	---> set -e _{$var}_done
75	75	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
77	77	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
72	72	---> set -e ___fish_git_prompt_color_$name
65	65	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
60	60	---> set -e ___fish_git_prompt_color_$name
62	62	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
55	55	---> set -e ___fish_git_prompt_color_$name
81	81	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
38	38	---> set -e ___fish_git_prompt_color_$name
38	38	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
35	35	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
35	35	---> set -e ___fish_git_prompt_color_$name
38	38	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
37	37	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
34	34	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
34	34	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
36	36	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
34	34	---> set -e ___fish_git_prompt_color_$name
36	36	---> set -e ___fish_git_prompt_color_{$name}_done
10	10	---> end
8	8	---> end
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
56	5414	-> set -g __fish_git_prompt_color_flags red
375	5358	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
31	31	---> if status --is-interactive
33	33	---> set -l var $argv[3]
153	153	---> set -e _$var
161	161	---> set -e _{$var}_done
109	109	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
48	48	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
144	144	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
193	193	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
153	153	---> set -e ___fish_git_prompt_color_$name
157	157	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
147	147	---> set -e ___fish_git_prompt_color_$name
153	153	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
140	140	---> set -e ___fish_git_prompt_color_$name
467	467	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
132	132	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
138	138	---> set -e ___fish_git_prompt_color_$name
191	191	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
259	259	---> set -e ___fish_git_prompt_color_$name
237	237	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
199	199	---> set -e ___fish_git_prompt_color_$name
198	198	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
15	15	---> end
44	44	---> commandline -f repaint ^/dev/null
14	14	---> end
55	55	-> set -l pcolor $gray
55	55	-> if test $last_status -ne 0
219	4773	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
196	4554	--> prompt_pwd
4358	4358	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
985	57630	-> __fish_git_prompt
210	3574	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
3364	3364	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
84	84	--> test -n "$repo_info"; 
15	15	--> or return
70	70	--> set -l git_dir         $repo_info[1]
69	69	--> set -l inside_gitdir   $repo_info[2]
67	67	--> set -l bare_repo       $repo_info[3]
63	63	--> set -l inside_worktree $repo_info[4]
44	44	--> set -l short_sha
108	198	--> if test (count $repo_info) = 5
90	90	---> count $repo_info
70	70	--> set short_sha $repo_info[5]
22	22	--> end
1051	5442	---> __fish_git_prompt_operation_branch_bare $repo_info
65	65	----> set -l git_dir         $argv[1]
69	69	----> set -l inside_gitdir   $argv[2]
64	64	----> set -l bare_repo       $argv[3]
52	52	----> set -l short_sha
95	225	----> if test (count $argv) = 5
130	130	-----> count $argv
67	67	----> set short_sha $argv[5]
19	19	----> end
39	39	----> set -l branch
44	44	----> set -l operation
39	39	----> set -l detached no
39	39	----> set -l bare
36	36	----> set -l step
36	36	----> set -l total
35	35	----> set -l os
105	105	----> if test -d $git_dir/rebase-merge
89	89	----> if test -d $git_dir/rebase-apply
19	19	----> end
80	80	----> if test -n "$step" -a -n "$total"
129	129	----> if test -z "$branch"
107	2936	----> set branch (command git symbolic-ref HEAD ^/dev/null; set os $status)
2760	2760	-----> command git symbolic-ref HEAD ^/dev/null; 
69	69	-----> set os $status
49	49	----> if test $os -ne 0
11	11	----> end
44	44	----> if test "true" = $inside_gitdir
28	28	----> echo $operation
29	29	----> echo $branch
23	23	----> echo $detached
20	20	----> echo $bare
36	36	--> set -l r $rbc[1] # current operation
36	36	--> set -l b $rbc[2] # current branch
34	34	--> set -l detached $rbc[3]
23	23	--> set -l w #dirty working directory
22	22	--> set -l i #staged changes
21	21	--> set -l s #stashes
22	22	--> set -l u #untracked
30	30	--> set -l c $rbc[4] # bare repository
22	22	--> set -l p #upstream
25	25	--> set -l informative_status
94	7326	--> __fish_git_prompt_validate_chars
205	840	---> __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate        '✔'
40	40	----> set -l user_variable_name "$argv[1]"
36	36	----> set -l char $argv[2]
173	173	----> set -l user_variable $$user_variable_name
163	227	----> if test (count $argv) -ge 3
64	64	-----> count $argv
66	66	----> set -l variable _$user_variable_name
55	55	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
131	569	---> __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate        '*' '✚'
41	41	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
101	101	----> set -l user_variable $$user_variable_name
64	110	----> if test (count $argv) -ge 3
46	46	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
124	551	---> __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate      '#' '✖'
40	40	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
95	95	----> set -l user_variable $$user_variable_name
60	99	----> if test (count $argv) -ge 3
39	39	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
42	42	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
125	541	---> __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate       '+' '●'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
93	93	----> set -l user_variable $$user_variable_name
61	99	----> if test (count $argv) -ge 3
38	38	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
172	551	---> __fish_git_prompt_set_char __fish_git_prompt_char_stashstate        '$'
48	48	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
95	95	----> set -l user_variable $$user_variable_name
61	96	----> if test (count $argv) -ge 3
35	35	-----> count $argv
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
218	796	---> __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator    ' ' '|'
70	70	----> set -l user_variable_name "$argv[1]"
60	60	----> set -l char $argv[2]
123	123	----> set -l user_variable $$user_variable_name
93	170	----> if test (count $argv) -ge 3
77	77	-----> count $argv
36	36	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
38	38	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
129	548	---> __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles    '%' '…'
39	39	----> set -l user_variable_name "$argv[1]"
36	36	----> set -l char $argv[2]
95	95	----> set -l user_variable $$user_variable_name
59	97	----> if test (count $argv) -ge 3
38	38	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
36	36	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
126	537	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead    '>' '↑'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
89	89	----> set -l user_variable $$user_variable_name
59	101	----> if test (count $argv) -ge 3
42	42	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
35	35	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
128	543	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind   '<' '↓'
38	38	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
91	91	----> set -l user_variable $$user_variable_name
60	97	----> if test (count $argv) -ge 3
37	37	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
37	37	----> set -l variable _$user_variable_name
41	41	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
159	586	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
38	38	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
93	93	----> set -l user_variable $$user_variable_name
59	95	----> if test (count $argv) -ge 3
36	36	-----> count $argv
36	36	----> set -l variable _$user_variable_name
74	74	----> set -l variable_done "$variable"_done
60	60	----> if not set -q $variable
167	630	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal    '='
68	68	----> set -l user_variable_name "$argv[1]"
51	51	----> set -l char $argv[2]
126	126	----> set -l user_variable $$user_variable_name
71	110	----> if test (count $argv) -ge 3
39	39	-----> count $argv
36	36	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
138	540	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix   ''
38	38	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
100	100	----> set -l user_variable $$user_variable_name
77	117	----> if test (count $argv) -ge 3
40	40	-----> count $argv
42	42	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
51	51	--> if test "true" = $inside_worktree
104	104	--> if test -n "$__fish_git_prompt_show_informative_status"
40	40	--> if test -n "$__fish_git_prompt_showdirtystate"
92	2441	--> set -l config (command git config --bool bash.showDirtyState)
2349	2349	---> command git config --bool bash.showDirtyState
62	62	--> if test "$config" != "false"
63	2896	--> set w (__fish_git_prompt_dirty)
194	2833	---> __fish_git_prompt_dirty
34	34	----> set -l dirty
25	25	----> set -l os
2457	2457	----> command git diff --no-ext-diff --quiet --exit-code
58	58	----> set os $status
41	41	----> if test $os -ne 0
24	24	----> echo $dirty
67	3173	--> set i (__fish_git_prompt_staged $short_sha)
123	3106	---> __fish_git_prompt_staged $short_sha
40	40	----> set -l short_sha $argv[1]
25	25	----> set -l staged
41	41	----> if test -n "$short_sha"
2799	2799	----> command git diff-index --cached --quiet HEAD --; 
34	34	----> or set staged $___fish_git_prompt_char_stagedstate
16	16	----> else
28	28	----> echo $staged
12	12	--> end
12	12	--> end
66	66	--> if test -n "$__fish_git_prompt_showstashstate" -a -r $git_dir/refs/stash
40	40	--> if test -n "$__fish_git_prompt_showuntrackedfiles"
102	2316	--> set -l config (command git config --bool bash.showUntrackedFiles)
2214	2214	---> command git config --bool bash.showUntrackedFiles
80	80	--> if test "$config" != false
4291	4291	--> if command git ls-files --others --exclude-standard --error-unmatch -- '*' >/dev/null ^/dev/null
89	89	--> set u $___fish_git_prompt_char_untrackedfiles
15	15	--> end
11	11	--> end
12	12	--> end
10	10	--> end
155	155	--> if test -n "$__fish_git_prompt_showupstream" -o "$__fish_git_prompt_show_informative_status"
11	11	--> end
202	18575	--> __fish_git_prompt_validate_colors
320	1297	---> __fish_git_prompt_set_color __fish_git_prompt_color '' ''
51	51	----> set -l user_variable_name "$argv[1]"
41	41	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
27	27	----> set -l default default_done
63	104	----> switch (count $argv)
41	41	-----> count $argv
41	41	----> set default "$argv[2]"
35	35	----> set default_done "$argv[3]"
12	12	----> end
59	92	----> if test (count $user_variable) -eq 2
33	33	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
44	44	----> if test -n "$user_variable"
35	35	----> if test -n "$user_variable_bright"
81	141	----> set -g $variable (set_color $user_variable)
60	60	-----> set_color $user_variable
12	12	----> end
130	159	----> set -g $variable_done (set_color normal)
29	29	-----> set_color normal
23	23	----> else
15	15	----> end
306	1062	---> __fish_git_prompt_set_color __fish_git_prompt_color_prefix
52	52	----> set -l user_variable_name "$argv[1]"
115	115	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
28	28	----> set -l default default_done
57	93	----> switch (count $argv)
36	36	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
63	90	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
40	40	----> set -l variable _$user_variable_name
43	43	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
46	46	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
271	1100	---> __fish_git_prompt_set_color __fish_git_prompt_color_suffix
38	38	----> set -l user_variable_name "$argv[1]"
151	151	----> set -l user_variable $$user_variable_name
38	38	----> set -l user_variable_bright
27	27	----> set -l default default_done
79	129	----> switch (count $argv)
50	50	-----> count $argv
42	42	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
58	91	----> if test (count $user_variable) -eq 2
33	33	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
48	48	----> set -g $variable $default
48	48	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
256	955	---> __fish_git_prompt_set_color __fish_git_prompt_color_bare
39	39	----> set -l user_variable_name "$argv[1]"
97	97	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
52	90	----> switch (count $argv)
38	38	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
56	82	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
41	41	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
256	1005	---> __fish_git_prompt_set_color __fish_git_prompt_color_merging
38	38	----> set -l user_variable_name "$argv[1]"
95	95	----> set -l user_variable $$user_variable_name
75	75	----> set -l user_variable_bright
30	30	----> set -l default default_done
52	85	----> switch (count $argv)
33	33	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
35	35	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
60	87	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
46	46	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
324	907	---> __fish_git_prompt_set_color __fish_git_prompt_color_cleanstate
39	39	----> set -l user_variable_name "$argv[1]"
96	96	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
26	26	----> set -l default default_done
51	84	----> switch (count $argv)
33	33	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
35	35	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
61	87	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
64	64	----> if not set -q $variable
274	998	---> __fish_git_prompt_set_color __fish_git_prompt_color_invalidstate
51	51	----> set -l user_variable_name "$argv[1]"
115	115	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
26	26	----> set -l default default_done
53	85	----> switch (count $argv)
32	32	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
35	35	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
55	87	----> if test (count $user_variable) -eq 2
32	32	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
41	41	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
269	1049	---> __fish_git_prompt_set_color __fish_git_prompt_color_upstream
38	38	----> set -l user_variable_name "$argv[1]"
93	93	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
26	26	----> set -l default default_done
52	89	----> switch (count $argv)
37	37	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
35	35	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
63	88	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
62	62	----> set -l variable _$user_variable_name
63	63	----> set -l variable_done "$variable"_done
62	62	----> if not set -q $variable
46	46	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
99	99	---> if test -n "$__fish_git_prompt_showcolorhints"
256	1071	---> __fish_git_prompt_set_color __fish_git_prompt_color_flags
41	41	----> set -l user_variable_name "$argv[1]"
35	35	----> set -l user_variable $$user_variable_name
30	30	----> set -l user_variable_bright
26	26	----> set -l default default_done
51	83	----> switch (count $argv)
32	32	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
54	88	----> if test (count $user_variable) -eq 2
34	34	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
32	32	----> if test -n "$user_variable_bright"
73	112	----> set -g $variable (set_color $user_variable)
39	39	-----> set_color $user_variable
12	12	----> end
71	104	----> set -g $variable_done (set_color normal)
33	33	-----> set_color normal
11	11	----> else
10	10	----> end
300	1141	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch
38	38	----> set -l user_variable_name "$argv[1]"
96	96	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
50	83	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
84	129	----> if test (count $user_variable) -eq 2
45	45	-----> count $user_variable
65	65	----> set -l variable _$user_variable_name
75	75	----> set -l variable_done "$variable"_done
49	49	----> if not set -q $variable
56	56	----> if test -n "$user_variable"
51	51	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
291	1185	---> __fish_git_prompt_set_color __fish_git_prompt_color_dirtystate  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
40	40	----> set -l user_variable_name "$argv[1]"
96	96	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
53	101	----> switch (count $argv)
48	48	-----> count $argv
39	39	----> set default "$argv[2]"
38	38	----> set default_done "$argv[3]"
12	12	----> end
56	82	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
48	48	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
100	100	----> set -g $variable $default
98	98	----> set -g $variable_done $default_done
56	56	----> end
17	17	----> end
491	1792	---> __fish_git_prompt_set_color __fish_git_prompt_color_stagedstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
119	119	----> set -l user_variable_name "$argv[1]"
179	179	----> set -l user_variable $$user_variable_name
44	44	----> set -l user_variable_bright
67	67	----> set -l default default_done
93	168	----> switch (count $argv)
75	75	-----> count $argv
65	65	----> set default "$argv[2]"
84	84	----> set default_done "$argv[3]"
20	20	----> end
93	133	----> if test (count $user_variable) -eq 2
40	40	-----> count $user_variable
63	63	----> set -l variable _$user_variable_name
62	62	----> set -l variable_done "$variable"_done
65	65	----> if not set -q $variable
52	52	----> if test -n "$user_variable"
70	70	----> set -g $variable $default
72	72	----> set -g $variable_done $default_done
19	19	----> end
19	19	----> end
19	19	---> end
559	1680	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch_detached (set_color red)
53	53	----> set_color red
70	70	----> set -l user_variable_name "$argv[1]"
142	142	----> set -l user_variable $$user_variable_name
46	46	----> set -l user_variable_bright
48	48	----> set -l default default_done
91	157	----> switch (count $argv)
66	66	-----> count $argv
66	66	----> set default "$argv[2]"
104	167	----> set default_done (set_color normal)
63	63	-----> set_color normal
21	21	----> case 3 # Both defaults given
98	146	----> if test (count $user_variable) -eq 2
48	48	-----> count $user_variable
66	66	----> set -l variable _$user_variable_name
67	67	----> set -l variable_done "$variable"_done
72	72	----> if not set -q $variable
449	1602	---> __fish_git_prompt_set_color __fish_git_prompt_color_stashstate      $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
66	66	----> set -l user_variable_name "$argv[1]"
125	125	----> set -l user_variable $$user_variable_name
37	37	----> set -l user_variable_bright
37	37	----> set -l default default_done
85	177	----> switch (count $argv)
92	92	-----> count $argv
66	66	----> set default "$argv[2]"
66	66	----> set default_done "$argv[3]"
20	20	----> end
95	151	----> if test (count $user_variable) -eq 2
56	56	-----> count $user_variable
60	60	----> set -l variable _$user_variable_name
59	59	----> set -l variable_done "$variable"_done
65	65	----> if not set -q $variable
54	54	----> if test -n "$user_variable"
67	67	----> set -g $variable $default
67	67	----> set -g $variable_done $default_done
19	19	----> end
17	17	----> end
398	1411	---> __fish_git_prompt_set_color __fish_git_prompt_color_untrackedfiles  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
65	65	----> set -l user_variable_name "$argv[1]"
143	143	----> set -l user_variable $$user_variable_name
41	41	----> set -l user_variable_bright
49	49	----> set -l default default_done
90	160	----> switch (count $argv)
70	70	-----> count $argv
44	44	----> set default "$argv[2]"
39	39	----> set default_done "$argv[3]"
12	12	----> end
60	95	----> if test (count $user_variable) -eq 2
35	35	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
70	70	----> set -g $variable $default
106	106	----> set -g $variable_done $default_done
21	21	----> end
17	17	----> end
61	61	--> set -l branch_color $___fish_git_prompt_color_branch
130	130	--> set -l branch_done  $___fish_git_prompt_color_branch_done
152	152	--> if test -n "$__fish_git_prompt_showcolorhints"
60	60	--> if test -n "$w"
73	73	--> if test -n "$i"
47	47	--> if test -n "$s"
46	46	--> if test -n "$u"
51	51	--> set u "$___fish_git_prompt_color_untrackedfiles$u$___fish_git_prompt_color_untrackedfiles_done"
11	11	--> end
110	3468	--> set b (/bin/sh -c 'echo "${1#refs/heads/}"' -- $b)
3358	3358	---> /bin/sh -c 'echo "${1#refs/heads/}"' -- $b
60	60	--> if test -n "$b"
47	47	--> set b "$branch_color$b$branch_done"
13	13	--> end
32	32	--> if test -n "$c"
30	30	--> if test -n "$r"
29	29	--> if test -n "$p"
51	51	--> set -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"
40	40	--> set -l f "$w$i$s$u"
34	34	--> if test -n "$f"
38	38	--> set f "$space$f"
11	11	--> end
28	28	--> set -l format $argv[1]
31	31	--> if test -z "$format"
31	31	--> set format " (%s)"
11	11	--> end
194	194	--> printf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___git_ps_color_suffix_done"
21	21	-> if begin
4279	4279	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
32	32	-> end
40	40	-> echo
64	64	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
45	117	> __fish_pwd
72	72	-> pwd
430	104281	> fish_prompt
90	90	-> set -l last_status $status
49	49	-> if not set -q __fish_prompt_hostname
47	47	-> if not set -q __fish_prompt_char
104	156	-> set -l normal (set_color normal)
52	52	--> set_color normal
89	131	-> set -l red (set_color red)
42	42	--> set_color red
85	125	-> set -l cyan (set_color cyan)
40	40	--> set_color cyan
86	127	-> set -l white (set_color white)
41	41	--> set_color white
87	128	-> set -l gray (set_color -o cyan)
41	41	--> set_color -o cyan
88	130	-> set -l brwhite (set_color -o white)
42	42	--> set_color -o white
75	389	-> set -g __fish_git_prompt_showdirtystate true
149	314	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
45	45	---> if status --is-interactive
65	65	---> if test $argv[3] = __fish_git_prompt_show_informative_status
41	41	---> commandline -f repaint ^/dev/null
14	14	---> end
66	369	-> set -g __fish_git_prompt_showuntrackedfiles true
140	303	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
41	41	---> if status --is-interactive
69	69	---> if test $argv[3] = __fish_git_prompt_show_informative_status
39	39	---> commandline -f repaint ^/dev/null
14	14	---> end
64	353	-> set -g __fish_git_prompt_showstashstate true
138	289	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
40	40	---> if status --is-interactive
60	60	---> if test $argv[3] = __fish_git_prompt_show_informative_status
38	38	---> commandline -f repaint ^/dev/null
13	13	---> end
68	2323	-> set -g __fish_git_prompt_color green
347	2255	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
44	44	---> if status --is-interactive
51	51	---> set -l var $argv[3]
57	57	---> set -e _$var
54	54	---> set -e _{$var}_done
109	109	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
73	73	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
69	69	---> set -e ___fish_git_prompt_color_$name
58	58	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
53	53	---> set -e ___fish_git_prompt_color_$name
53	53	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
50	50	---> set -e ___fish_git_prompt_color_$name
51	51	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
51	51	---> set -e ___fish_git_prompt_color_$name
53	53	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
49	49	---> set -e ___fish_git_prompt_color_$name
50	50	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
49	49	---> set -e ___fish_git_prompt_color_$name
51	51	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
50	50	---> set -e ___fish_git_prompt_color_$name
53	53	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
49	49	---> set -e ___fish_git_prompt_color_$name
51	51	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
49	49	---> set -e ___fish_git_prompt_color_$name
51	51	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
50	50	---> set -e ___fish_git_prompt_color_$name
51	51	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
49	49	---> set -e ___fish_git_prompt_color_$name
51	51	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
48	48	---> set -e ___fish_git_prompt_color_$name
49	49	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
14	14	---> end
41	41	---> commandline -f repaint ^/dev/null
14	14	---> end
73	37797	-> set -g __fish_git_prompt_color_flags red
392	37724	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
49	49	---> if status --is-interactive
53	53	---> set -l var $argv[3]
185	185	---> set -e _$var
160	160	---> set -e _{$var}_done
137	137	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
115	115	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
168	168	---> set -e ___fish_git_prompt_color_$name
187	187	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
160	160	---> set -e ___fish_git_prompt_color_$name
159	159	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
114	114	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
112	112	---> set -e ___fish_git_prompt_color_$name
134	134	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
32849	32849	---> set -e ___fish_git_prompt_color_$name
167	167	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
140	140	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
132	132	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
138	138	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
235	235	---> set -e ___fish_git_prompt_color_$name
218	218	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
195	195	---> set -e ___fish_git_prompt_color_$name
167	167	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
15	15	---> end
38	38	---> commandline -f repaint ^/dev/null
10	10	---> end
39	39	-> set -l pcolor $gray
40	40	-> if test $last_status -ne 0
286	3628	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
110	3342	--> prompt_pwd
3232	3232	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
778	53608	-> __fish_git_prompt
155	3191	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
3036	3036	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
54	54	--> test -n "$repo_info"; 
9	9	--> or return
40	40	--> set -l git_dir         $repo_info[1]
39	39	--> set -l inside_gitdir   $repo_info[2]
38	38	--> set -l bare_repo       $repo_info[3]
35	35	--> set -l inside_worktree $repo_info[4]
25	25	--> set -l short_sha
65	125	--> if test (count $repo_info) = 5
60	60	---> count $repo_info
40	40	--> set short_sha $repo_info[5]
13	13	--> end
669	4702	---> __fish_git_prompt_operation_branch_bare $repo_info
176	176	----> set -l git_dir         $argv[1]
79	79	----> set -l inside_gitdir   $argv[2]
71	71	----> set -l bare_repo       $argv[3]
48	48	----> set -l short_sha
103	163	----> if test (count $argv) = 5
60	60	-----> count $argv
41	41	----> set short_sha $argv[5]
12	12	----> end
24	24	----> set -l branch
24	24	----> set -l operation
25	25	----> set -l detached no
29	29	----> set -l bare
22	22	----> set -l step
23	23	----> set -l total
22	22	----> set -l os
58	58	----> if test -d $git_dir/rebase-merge
46	46	----> if test -d $git_dir/rebase-apply
11	11	----> end
43	43	----> if test -n "$step" -a -n "$total"
43	43	----> if test -z "$branch"
95	2846	----> set branch (command git symbolic-ref HEAD ^/dev/null; set os $status)
2677	2677	-----> command git symbolic-ref HEAD ^/dev/null; 
74	74	-----> set os $status
69	69	----> if test $os -ne 0
11	11	----> end
45	45	----> if test "true" = $inside_gitdir
30	30	----> echo $operation
28	28	----> echo $branch
24	24	----> echo $detached
20	20	----> echo $bare
35	35	--> set -l r $rbc[1] # current operation
36	36	--> set -l b $rbc[2] # current branch
33	33	--> set -l detached $rbc[3]
23	23	--> set -l w #dirty working directory
21	21	--> set -l i #staged changes
21	21	--> set -l s #stashes
22	22	--> set -l u #untracked
30	30	--> set -l c $rbc[4] # bare repository
22	22	--> set -l p #upstream
25	25	--> set -l informative_status
104	7196	--> __fish_git_prompt_validate_chars
165	582	---> __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate        '✔'
44	44	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
117	117	----> set -l user_variable $$user_variable_name
65	107	----> if test (count $argv) -ge 3
42	42	-----> count $argv
38	38	----> set -l variable _$user_variable_name
43	43	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
175	710	---> __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate        '*' '✚'
71	71	----> set -l user_variable_name "$argv[1]"
57	57	----> set -l char $argv[2]
127	127	----> set -l user_variable $$user_variable_name
71	115	----> if test (count $argv) -ge 3
44	44	-----> count $argv
38	38	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
40	40	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
133	571	---> __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate      '#' '✖'
41	41	----> set -l user_variable_name "$argv[1]"
34	34	----> set -l char $argv[2]
104	104	----> set -l user_variable $$user_variable_name
62	101	----> if test (count $argv) -ge 3
39	39	-----> count $argv
36	36	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
138	563	---> __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate       '+' '●'
39	39	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
95	95	----> set -l user_variable $$user_variable_name
61	99	----> if test (count $argv) -ge 3
38	38	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
160	526	---> __fish_git_prompt_set_char __fish_git_prompt_char_stashstate        '$'
38	38	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
92	92	----> set -l user_variable $$user_variable_name
59	95	----> if test (count $argv) -ge 3
36	36	-----> count $argv
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
171	750	---> __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator    ' ' '|'
68	68	----> set -l user_variable_name "$argv[1]"
55	55	----> set -l char $argv[2]
173	173	----> set -l user_variable $$user_variable_name
72	117	----> if test (count $argv) -ge 3
45	45	-----> count $argv
38	38	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
40	40	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
138	583	---> __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles    '%' '…'
51	51	----> set -l user_variable_name "$argv[1]"
33	33	----> set -l char $argv[2]
100	100	----> set -l user_variable $$user_variable_name
64	103	----> if test (count $argv) -ge 3
39	39	-----> count $argv
36	36	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
147	642	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead    '>' '↑'
41	41	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
106	106	----> set -l user_variable $$user_variable_name
91	130	----> if test (count $argv) -ge 3
39	39	-----> count $argv
50	50	----> if test -n "$__fish_git_prompt_show_informative_status"
12	12	----> end
47	47	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
131	564	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind   '<' '↓'
49	49	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
94	94	----> set -l user_variable $$user_variable_name
62	100	----> if test (count $argv) -ge 3
38	38	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
38	38	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
130	476	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
71	71	----> set -l user_variable $$user_variable_name
65	104	----> if test (count $argv) -ge 3
39	39	-----> count $argv
34	34	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
33	33	----> if not set -q $variable
157	612	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal    '='
36	36	----> set -l user_variable_name "$argv[1]"
29	29	----> set -l char $argv[2]
118	118	----> set -l user_variable $$user_variable_name
86	130	----> if test (count $argv) -ge 3
44	44	-----> count $argv
65	65	----> set -l variable _$user_variable_name
41	41	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
134	513	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix   ''
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
99	99	----> set -l user_variable $$user_variable_name
62	98	----> if test (count $argv) -ge 3
36	36	-----> count $argv
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
51	51	--> if test "true" = $inside_worktree
85	85	--> if test -n "$__fish_git_prompt_show_informative_status"
46	46	--> if test -n "$__fish_git_prompt_showdirtystate"
84	2233	--> set -l config (command git config --bool bash.showDirtyState)
2149	2149	---> command git config --bool bash.showDirtyState
69	69	--> if test "$config" != "false"
67	2950	--> set w (__fish_git_prompt_dirty)
119	2883	---> __fish_git_prompt_dirty
28	28	----> set -l dirty
24	24	----> set -l os
2580	2580	----> command git diff --no-ext-diff --quiet --exit-code
66	66	----> set os $status
42	42	----> if test $os -ne 0
24	24	----> echo $dirty
73	3993	--> set i (__fish_git_prompt_staged $short_sha)
130	3920	---> __fish_git_prompt_staged $short_sha
39	39	----> set -l short_sha $argv[1]
25	25	----> set -l staged
40	40	----> if test -n "$short_sha"
3602	3602	----> command git diff-index --cached --quiet HEAD --; 
38	38	----> or set staged $___fish_git_prompt_char_stagedstate
17	17	----> else
29	29	----> echo $staged
12	12	--> end
11	11	--> end
71	71	--> if test -n "$__fish_git_prompt_showstashstate" -a -r $git_dir/refs/stash
42	42	--> if test -n "$__fish_git_prompt_showuntrackedfiles"
103	2340	--> set -l config (command git config --bool bash.showUntrackedFiles)
2237	2237	---> command git config --bool bash.showUntrackedFiles
54	54	--> if test "$config" != false
3040	3040	--> if command git ls-files --others --exclude-standard --error-unmatch -- '*' >/dev/null ^/dev/null
207	207	--> set u $___fish_git_prompt_char_untrackedfiles
55	55	--> end
26	26	--> end
27	27	--> end
24	24	--> end
285	285	--> if test -n "$__fish_git_prompt_showupstream" -o "$__fish_git_prompt_show_informative_status"
11	11	--> end
216	17248	--> __fish_git_prompt_validate_colors
292	1156	---> __fish_git_prompt_set_color __fish_git_prompt_color '' ''
56	56	----> set -l user_variable_name "$argv[1]"
41	41	----> set -l user_variable $$user_variable_name
25	25	----> set -l user_variable_bright
26	26	----> set -l default default_done
60	99	----> switch (count $argv)
39	39	-----> count $argv
40	40	----> set default "$argv[2]"
34	34	----> set default_done "$argv[3]"
11	11	----> end
58	90	----> if test (count $user_variable) -eq 2
32	32	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
39	39	----> if test -n "$user_variable"
31	31	----> if test -n "$user_variable_bright"
72	129	----> set -g $variable (set_color $user_variable)
57	57	-----> set_color $user_variable
12	12	----> end
68	95	----> set -g $variable_done (set_color normal)
27	27	-----> set_color normal
11	11	----> else
9	9	----> end
241	957	---> __fish_git_prompt_set_color __fish_git_prompt_color_prefix
37	37	----> set -l user_variable_name "$argv[1]"
127	127	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	88	----> switch (count $argv)
34	34	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
55	87	----> if test (count $user_variable) -eq 2
32	32	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
39	39	----> set -g $variable $default
39	39	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
278	1044	---> __fish_git_prompt_set_color __fish_git_prompt_color_suffix
41	41	----> set -l user_variable_name "$argv[1]"
122	122	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
45	45	----> set default $___fish_git_prompt_color
37	37	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
66	94	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
42	42	----> if test -n "$user_variable"
43	43	----> set -g $variable $default
46	46	----> set -g $variable_done $default_done
12	12	----> end
11	11	----> end
265	980	---> __fish_git_prompt_set_color __fish_git_prompt_color_bare
39	39	----> set -l user_variable_name "$argv[1]"
83	83	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
31	31	----> set -l default default_done
53	86	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
58	89	----> if test (count $user_variable) -eq 2
31	31	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
44	44	----> set -l variable_done "$variable"_done
48	48	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
47	47	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
13	13	----> end
11	11	----> end
266	1051	---> __fish_git_prompt_set_color __fish_git_prompt_color_merging
40	40	----> set -l user_variable_name "$argv[1]"
119	119	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
27	27	----> set -l default default_done
59	107	----> switch (count $argv)
48	48	-----> count $argv
42	42	----> set default $___fish_git_prompt_color
39	39	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
69	100	----> if test (count $user_variable) -eq 2
31	31	-----> count $user_variable
41	41	----> set -l variable _$user_variable_name
49	49	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
338	1134	---> __fish_git_prompt_set_color __fish_git_prompt_color_cleanstate
79	79	----> set -l user_variable_name "$argv[1]"
186	186	----> set -l user_variable $$user_variable_name
45	45	----> set -l user_variable_bright
67	67	----> set -l default default_done
68	111	----> switch (count $argv)
43	43	-----> count $argv
40	40	----> set default $___fish_git_prompt_color
38	38	----> set default_done $___fish_git_prompt_color_done
13	13	----> case 2 # One default given, use normal for done
68	97	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
265	1013	---> __fish_git_prompt_set_color __fish_git_prompt_color_invalidstate
46	46	----> set -l user_variable_name "$argv[1]"
114	114	----> set -l user_variable $$user_variable_name
28	28	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	89	----> switch (count $argv)
35	35	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
65	94	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
49	49	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
319	1135	---> __fish_git_prompt_set_color __fish_git_prompt_color_upstream
39	39	----> set -l user_variable_name "$argv[1]"
119	119	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
26	26	----> set -l default default_done
58	95	----> switch (count $argv)
37	37	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
59	92	----> if test (count $user_variable) -eq 2
33	33	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
43	43	----> if not set -q $variable
74	74	----> if test -n "$user_variable"
52	52	----> set -g $variable $default
57	57	----> set -g $variable_done $default_done
17	17	----> end
17	17	----> end
144	144	---> if test -n "$__fish_git_prompt_showcolorhints"
293	1263	---> __fish_git_prompt_set_color __fish_git_prompt_color_flags
47	47	----> set -l user_variable_name "$argv[1]"
39	39	----> set -l user_variable $$user_variable_name
59	59	----> set -l user_variable_bright
28	28	----> set -l default default_done
63	102	----> switch (count $argv)
39	39	-----> count $argv
37	37	----> set default $___fish_git_prompt_color
40	40	----> set default_done $___fish_git_prompt_color_done
16	16	----> case 2 # One default given, use normal for done
66	102	----> if test (count $user_variable) -eq 2
36	36	-----> count $user_variable
40	40	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
38	38	----> if test -n "$user_variable"
31	31	----> if test -n "$user_variable_bright"
77	127	----> set -g $variable (set_color $user_variable)
50	50	-----> set_color $user_variable
12	12	----> end
111	144	----> set -g $variable_done (set_color normal)
33	33	-----> set_color normal
16	16	----> else
11	11	----> end
381	1346	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch
56	56	----> set -l user_variable_name "$argv[1]"
122	122	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
34	34	----> set -l default default_done
60	103	----> switch (count $argv)
43	43	-----> count $argv
55	55	----> set default $___fish_git_prompt_color
41	41	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
80	113	----> if test (count $user_variable) -eq 2
33	33	-----> count $user_variable
44	44	----> set -l variable _$user_variable_name
51	51	----> set -l variable_done "$variable"_done
74	74	----> if not set -q $variable
63	63	----> if test -n "$user_variable"
67	67	----> set -g $variable $default
70	70	----> set -g $variable_done $default_done
17	17	----> end
17	17	----> end
303	1111	---> __fish_git_prompt_set_color __fish_git_prompt_color_dirtystate  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
51	51	----> set -l user_variable_name "$argv[1]"
130	130	----> set -l user_variable $$user_variable_name
29	29	----> set -l user_variable_bright
27	27	----> set -l default default_done
69	121	----> switch (count $argv)
52	52	-----> count $argv
40	40	----> set default "$argv[2]"
38	38	----> set default_done "$argv[3]"
12	12	----> end
60	98	----> if test (count $user_variable) -eq 2
38	38	-----> count $user_variable
40	40	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
43	43	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
342	1211	---> __fish_git_prompt_set_color __fish_git_prompt_color_stagedstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
41	41	----> set -l user_variable_name "$argv[1]"
141	141	----> set -l user_variable $$user_variable_name
36	36	----> set -l user_variable_bright
26	26	----> set -l default default_done
55	106	----> switch (count $argv)
51	51	-----> count $argv
40	40	----> set default "$argv[2]"
38	38	----> set default_done "$argv[3]"
12	12	----> end
57	84	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
75	75	----> set -g $variable $default
75	75	----> set -g $variable_done $default_done
20	20	----> end
20	20	----> end
19	19	---> end
355	1113	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch_detached (set_color red)
68	68	----> set_color red
51	51	----> set -l user_variable_name "$argv[1]"
113	113	----> set -l user_variable $$user_variable_name
29	29	----> set -l user_variable_bright
28	28	----> set -l default default_done
58	100	----> switch (count $argv)
42	42	-----> count $argv
50	50	----> set default "$argv[2]"
65	99	----> set default_done (set_color normal)
34	34	-----> set_color normal
12	12	----> case 3 # Both defaults given
59	87	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
43	43	----> if not set -q $variable
294	1045	---> __fish_git_prompt_set_color __fish_git_prompt_color_stashstate      $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
42	42	----> set -l user_variable_name "$argv[1]"
113	113	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
56	106	----> switch (count $argv)
50	50	-----> count $argv
39	39	----> set default "$argv[2]"
38	38	----> set default_done "$argv[3]"
12	12	----> end
59	84	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
41	41	----> if test -n "$user_variable"
43	43	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
358	1310	---> __fish_git_prompt_set_color __fish_git_prompt_color_untrackedfiles  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
41	41	----> set -l user_variable_name "$argv[1]"
102	102	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
25	25	----> set -l default default_done
136	184	----> switch (count $argv)
48	48	-----> count $argv
78	78	----> set default "$argv[2]"
130	130	----> set default_done "$argv[3]"
15	15	----> end
64	93	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
37	37	--> set -l branch_color $___fish_git_prompt_color_branch
36	36	--> set -l branch_done  $___fish_git_prompt_color_branch_done
104	104	--> if test -n "$__fish_git_prompt_showcolorhints"
33	33	--> if test -n "$w"
30	30	--> if test -n "$i"
28	28	--> if test -n "$s"
29	29	--> if test -n "$u"
71	71	--> set u "$___fish_git_prompt_color_untrackedfiles$u$___fish_git_prompt_color_untrackedfiles_done"
12	12	--> end
96	3043	--> set b (/bin/sh -c 'echo "${1#refs/heads/}"' -- $b)
2947	2947	---> /bin/sh -c 'echo "${1#refs/heads/}"' -- $b
54	54	--> if test -n "$b"
47	47	--> set b "$branch_color$b$branch_done"
13	13	--> end
32	32	--> if test -n "$c"
31	31	--> if test -n "$r"
30	30	--> if test -n "$p"
57	57	--> set -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"
41	41	--> set -l f "$w$i$s$u"
35	35	--> if test -n "$f"
38	38	--> set f "$space$f"
11	11	--> end
29	29	--> set -l format $argv[1]
32	32	--> if test -z "$format"
31	31	--> set format " (%s)"
11	11	--> end
185	185	--> printf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___git_ps_color_suffix_done"
22	22	-> if begin
4171	4171	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
38	38	-> end
33	33	-> echo
58	58	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
45	45	> echo $_ " "; 
49	131	> __fish_pwd
82	82	-> pwd
72	72	> echo $_ " "; 
62	133	> __fish_pwd
71	71	-> pwd
232465	232465	> git add -A
411	63721	> fish_prompt
62	62	-> set -l last_status $status
35	35	-> if not set -q __fish_prompt_hostname
40	40	-> if not set -q __fish_prompt_char
82	134	-> set -l normal (set_color normal)
52	52	--> set_color normal
61	91	-> set -l red (set_color red)
30	30	--> set_color red
60	87	-> set -l cyan (set_color cyan)
27	27	--> set_color cyan
60	88	-> set -l white (set_color white)
28	28	--> set_color white
64	98	-> set -l gray (set_color -o cyan)
34	34	--> set_color -o cyan
60	90	-> set -l brwhite (set_color -o white)
30	30	--> set_color -o white
197	634	-> set -g __fish_git_prompt_showdirtystate true
218	437	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
62	62	---> if status --is-interactive
89	89	---> if test $argv[3] = __fish_git_prompt_show_informative_status
52	52	---> commandline -f repaint ^/dev/null
16	16	---> end
89	322	-> set -g __fish_git_prompt_showuntrackedfiles true
115	233	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
36	36	---> if status --is-interactive
46	46	---> if test $argv[3] = __fish_git_prompt_show_informative_status
27	27	---> commandline -f repaint ^/dev/null
9	9	---> end
46	248	-> set -g __fish_git_prompt_showstashstate true
91	202	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
28	28	---> if status --is-interactive
47	47	---> if test $argv[3] = __fish_git_prompt_show_informative_status
27	27	---> commandline -f repaint ^/dev/null
9	9	---> end
48	1587	-> set -g __fish_git_prompt_color green
219	1539	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
31	31	---> if status --is-interactive
34	34	---> set -l var $argv[3]
37	37	---> set -e _$var
43	43	---> set -e _{$var}_done
78	78	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
41	41	---> set -e ___fish_git_prompt_color_$name
39	39	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
35	35	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
38	38	---> set -e ___fish_git_prompt_color_$name
34	34	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
36	36	---> set -e ___fish_git_prompt_color_$name
34	34	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
34	34	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
35	35	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
35	35	---> set -e ___fish_git_prompt_color_$name
74	74	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
37	37	---> set -e ___fish_git_prompt_color_$name
34	34	---> set -e ___fish_git_prompt_color_{$name}_done
10	10	---> end
8	8	---> end
31	31	---> commandline -f repaint ^/dev/null
9	9	---> end
58	4653	-> set -g __fish_git_prompt_color_flags red
384	4595	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
57	57	---> if status --is-interactive
56	56	---> set -l var $argv[3]
183	183	---> set -e _$var
184	184	---> set -e _{$var}_done
101	101	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
48	48	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
138	138	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
429	429	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
124	124	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
168	168	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
35	35	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
113	113	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
40	40	-> set -l pcolor $gray
39	39	-> if test $last_status -ne 0
244	3364	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
192	3120	--> prompt_pwd
2928	2928	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
738	47731	-> __fish_git_prompt
159	2641	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2482	2482	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
49	49	--> test -n "$repo_info"; 
8	8	--> or return
38	38	--> set -l git_dir         $repo_info[1]
37	37	--> set -l inside_gitdir   $repo_info[2]
36	36	--> set -l bare_repo       $repo_info[3]
33	33	--> set -l inside_worktree $repo_info[4]
24	24	--> set -l short_sha
62	113	--> if test (count $repo_info) = 5
51	51	---> count $repo_info
38	38	--> set short_sha $repo_info[5]
28	28	--> end
732	4229	---> __fish_git_prompt_operation_branch_bare $repo_info
57	57	----> set -l git_dir         $argv[1]
41	41	----> set -l inside_gitdir   $argv[2]
36	36	----> set -l bare_repo       $argv[3]
24	24	----> set -l short_sha
63	120	----> if test (count $argv) = 5
57	57	-----> count $argv
38	38	----> set short_sha $argv[5]
12	12	----> end
24	24	----> set -l branch
23	23	----> set -l operation
25	25	----> set -l detached no
23	23	----> set -l bare
21	21	----> set -l step
23	23	----> set -l total
22	22	----> set -l os
65	65	----> if test -d $git_dir/rebase-merge
96	96	----> if test -d $git_dir/rebase-apply
10	10	----> end
42	42	----> if test -n "$step" -a -n "$total"
39	39	----> if test -z "$branch"
88	2549	----> set branch (command git symbolic-ref HEAD ^/dev/null; set os $status)
2399	2399	-----> command git symbolic-ref HEAD ^/dev/null; 
62	62	-----> set os $status
48	48	----> if test $os -ne 0
10	10	----> end
44	44	----> if test "true" = $inside_gitdir
34	34	----> echo $operation
28	28	----> echo $branch
23	23	----> echo $detached
20	20	----> echo $bare
42	42	--> set -l r $rbc[1] # current operation
33	33	--> set -l b $rbc[2] # current branch
31	31	--> set -l detached $rbc[3]
21	21	--> set -l w #dirty working directory
21	21	--> set -l i #staged changes
20	20	--> set -l s #stashes
20	20	--> set -l u #untracked
28	28	--> set -l c $rbc[4] # bare repository
21	21	--> set -l p #upstream
23	23	--> set -l informative_status
94	6308	--> __fish_git_prompt_validate_chars
144	549	---> __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate        '✔'
38	38	----> set -l user_variable_name "$argv[1]"
29	29	----> set -l char $argv[2]
124	124	----> set -l user_variable $$user_variable_name
68	106	----> if test (count $argv) -ge 3
38	38	-----> count $argv
38	38	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
34	34	----> if not set -q $variable
142	632	---> __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate        '*' '✚'
43	43	----> set -l user_variable_name "$argv[1]"
49	49	----> set -l char $argv[2]
108	108	----> set -l user_variable $$user_variable_name
79	119	----> if test (count $argv) -ge 3
40	40	-----> count $argv
38	38	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
38	38	----> set -l variable _$user_variable_name
49	49	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
127	529	---> __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate      '#' '✖'
40	40	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
78	78	----> set -l user_variable $$user_variable_name
59	97	----> if test (count $argv) -ge 3
38	38	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
36	36	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
130	522	---> __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate       '+' '●'
38	38	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
69	69	----> set -l user_variable $$user_variable_name
58	100	----> if test (count $argv) -ge 3
42	42	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
36	36	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
133	474	---> __fish_git_prompt_set_char __fish_git_prompt_char_stashstate        '$'
38	38	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
68	68	----> set -l user_variable $$user_variable_name
58	92	----> if test (count $argv) -ge 3
34	34	-----> count $argv
36	36	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
126	510	---> __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator    ' ' '|'
40	40	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
68	68	----> set -l user_variable $$user_variable_name
58	95	----> if test (count $argv) -ge 3
37	37	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
36	36	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
130	549	---> __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles    '%' '…'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
77	77	----> set -l user_variable $$user_variable_name
61	107	----> if test (count $argv) -ge 3
46	46	-----> count $argv
45	45	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
127	524	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead    '>' '↑'
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
74	74	----> set -l user_variable $$user_variable_name
58	101	----> if test (count $argv) -ge 3
43	43	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
35	35	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
127	515	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind   '<' '↓'
38	38	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
68	68	----> set -l user_variable $$user_variable_name
57	94	----> if test (count $argv) -ge 3
37	37	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
42	42	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
131	465	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
38	38	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
66	66	----> set -l user_variable $$user_variable_name
58	92	----> if test (count $argv) -ge 3
34	34	-----> count $argv
37	37	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
130	468	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal    '='
38	38	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
71	71	----> set -l user_variable $$user_variable_name
58	92	----> if test (count $argv) -ge 3
34	34	-----> count $argv
36	36	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
131	477	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix   ''
38	38	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
66	66	----> set -l user_variable $$user_variable_name
58	92	----> if test (count $argv) -ge 3
34	34	-----> count $argv
42	42	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
68	68	--> if test "true" = $inside_worktree
108	108	--> if test -n "$__fish_git_prompt_show_informative_status"
40	40	--> if test -n "$__fish_git_prompt_showdirtystate"
105	2205	--> set -l config (command git config --bool bash.showDirtyState)
2100	2100	---> command git config --bool bash.showDirtyState
57	57	--> if test "$config" != "false"
59	2871	--> set w (__fish_git_prompt_dirty)
103	2812	---> __fish_git_prompt_dirty
27	27	----> set -l dirty
22	22	----> set -l os
2531	2531	----> command git diff --no-ext-diff --quiet --exit-code
68	68	----> set os $status
38	38	----> if test $os -ne 0
23	23	----> echo $dirty
71	3245	--> set i (__fish_git_prompt_staged $short_sha)
118	3174	---> __fish_git_prompt_staged $short_sha
41	41	----> set -l short_sha $argv[1]
23	23	----> set -l staged
37	37	----> if test -n "$short_sha"
2842	2842	----> command git diff-index --cached --quiet HEAD --; 
74	74	----> or set staged $___fish_git_prompt_char_stagedstate
13	13	----> else
26	26	----> echo $staged
12	12	--> end
11	11	--> end
102	102	--> if test -n "$__fish_git_prompt_showstashstate" -a -r $git_dir/refs/stash
47	47	--> if test -n "$__fish_git_prompt_showuntrackedfiles"
90	2128	--> set -l config (command git config --bool bash.showUntrackedFiles)
2038	2038	---> command git config --bool bash.showUntrackedFiles
61	61	--> if test "$config" != false
2868	2868	--> if command git ls-files --others --exclude-standard --error-unmatch -- '*' >/dev/null ^/dev/null
12	12	--> end
12	12	--> end
11	11	--> end
179	179	--> if test -n "$__fish_git_prompt_showupstream" -o "$__fish_git_prompt_show_informative_status"
11	11	--> end
171	15363	--> __fish_git_prompt_validate_colors
301	1158	---> __fish_git_prompt_set_color __fish_git_prompt_color '' ''
48	48	----> set -l user_variable_name "$argv[1]"
40	40	----> set -l user_variable $$user_variable_name
30	30	----> set -l user_variable_bright
27	27	----> set -l default default_done
60	99	----> switch (count $argv)
39	39	-----> count $argv
35	35	----> set default "$argv[2]"
34	34	----> set default_done "$argv[3]"
12	12	----> end
57	102	----> if test (count $user_variable) -eq 2
45	45	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
30	30	----> if test -n "$user_variable_bright"
71	124	----> set -g $variable (set_color $user_variable)
53	53	-----> set_color $user_variable
11	11	----> end
69	100	----> set -g $variable_done (set_color normal)
31	31	-----> set_color normal
11	11	----> else
9	9	----> end
240	943	---> __fish_git_prompt_set_color __fish_git_prompt_color_prefix
37	37	----> set -l user_variable_name "$argv[1]"
115	115	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
55	87	----> switch (count $argv)
32	32	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
33	33	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
56	80	----> if test (count $user_variable) -eq 2
24	24	-----> count $user_variable
41	41	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
40	40	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
262	1043	---> __fish_git_prompt_set_color __fish_git_prompt_color_suffix
36	36	----> set -l user_variable_name "$argv[1]"
120	120	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
35	35	----> set -l default default_done
66	105	----> switch (count $argv)
39	39	-----> count $argv
38	38	----> set default $___fish_git_prompt_color
48	48	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
60	87	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
49	49	----> set -g $variable $default
45	45	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
243	956	---> __fish_git_prompt_set_color __fish_git_prompt_color_bare
46	46	----> set -l user_variable_name "$argv[1]"
115	115	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
54	79	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
39	39	----> if test -n "$user_variable"
40	40	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
250	948	---> __fish_git_prompt_set_color __fish_git_prompt_color_merging
36	36	----> set -l user_variable_name "$argv[1]"
107	107	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	86	----> switch (count $argv)
32	32	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
55	86	----> if test (count $user_variable) -eq 2
31	31	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
39	39	----> set -g $variable $default
44	44	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
277	867	---> __fish_git_prompt_set_color __fish_git_prompt_color_cleanstate
42	42	----> set -l user_variable_name "$argv[1]"
106	106	----> set -l user_variable $$user_variable_name
35	35	----> set -l user_variable_bright
32	32	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
42	42	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
57	84	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
257	965	---> __fish_git_prompt_set_color __fish_git_prompt_color_invalidstate
39	39	----> set -l user_variable_name "$argv[1]"
114	114	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
33	33	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
61	87	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
44	44	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
241	939	---> __fish_git_prompt_set_color __fish_git_prompt_color_upstream
36	36	----> set -l user_variable_name "$argv[1]"
115	115	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
54	79	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
45	45	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
10	10	----> end
9	9	----> end
110	110	---> if test -n "$__fish_git_prompt_showcolorhints"
268	1159	---> __fish_git_prompt_set_color __fish_git_prompt_color_flags
48	48	----> set -l user_variable_name "$argv[1]"
54	54	----> set -l user_variable $$user_variable_name
25	25	----> set -l user_variable_bright
35	35	----> set -l default default_done
73	108	----> switch (count $argv)
35	35	-----> count $argv
37	37	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
64	95	----> if test (count $user_variable) -eq 2
31	31	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
37	37	----> if test -n "$user_variable"
32	32	----> if test -n "$user_variable_bright"
74	116	----> set -g $variable (set_color $user_variable)
42	42	-----> set_color $user_variable
13	13	----> end
78	107	----> set -g $variable_done (set_color normal)
29	29	-----> set_color normal
11	11	----> else
9	9	----> end
248	945	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch
37	37	----> set -l user_variable_name "$argv[1]"
107	107	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
25	25	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
59	85	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
44	44	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
10	10	----> end
10	10	----> end
279	1044	---> __fish_git_prompt_set_color __fish_git_prompt_color_dirtystate  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
39	39	----> set -l user_variable_name "$argv[1]"
115	115	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
25	25	----> set -l default default_done
54	96	----> switch (count $argv)
42	42	-----> count $argv
37	37	----> set default "$argv[2]"
36	36	----> set default_done "$argv[3]"
11	11	----> end
55	80	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
56	56	----> if not set -q $variable
45	45	----> if test -n "$user_variable"
52	52	----> set -g $variable $default
49	49	----> set -g $variable_done $default_done
11	11	----> end
11	11	----> end
281	983	---> __fish_git_prompt_set_color __fish_git_prompt_color_stagedstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
46	46	----> set -l user_variable_name "$argv[1]"
81	81	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
53	96	----> switch (count $argv)
43	43	-----> count $argv
44	44	----> set default "$argv[2]"
38	38	----> set default_done "$argv[3]"
11	11	----> end
57	84	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
44	44	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
10	10	---> end
296	952	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch_detached (set_color red)
27	27	----> set_color red
38	38	----> set -l user_variable_name "$argv[1]"
114	114	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	91	----> switch (count $argv)
37	37	-----> count $argv
36	36	----> set default "$argv[2]"
59	94	----> set default_done (set_color normal)
35	35	-----> set_color normal
11	11	----> case 3 # Both defaults given
54	79	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
282	1152	---> __fish_git_prompt_set_color __fish_git_prompt_color_stashstate      $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
39	39	----> set -l user_variable_name "$argv[1]"
111	111	----> set -l user_variable $$user_variable_name
49	49	----> set -l user_variable_bright
29	29	----> set -l default default_done
88	195	----> switch (count $argv)
107	107	-----> count $argv
45	45	----> set default "$argv[2]"
39	39	----> set default_done "$argv[3]"
11	11	----> end
58	85	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
47	47	----> set -g $variable $default
51	51	----> set -g $variable_done $default_done
10	10	----> end
9	9	----> end
274	1018	---> __fish_git_prompt_set_color __fish_git_prompt_color_untrackedfiles  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
38	38	----> set -l user_variable_name "$argv[1]"
106	106	----> set -l user_variable $$user_variable_name
34	34	----> set -l user_variable_bright
28	28	----> set -l default default_done
58	103	----> switch (count $argv)
45	45	-----> count $argv
40	40	----> set default "$argv[2]"
39	39	----> set default_done "$argv[3]"
12	12	----> end
59	86	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
46	46	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
46	46	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
10	10	----> end
10	10	----> end
34	34	--> set -l branch_color $___fish_git_prompt_color_branch
33	33	--> set -l branch_done  $___fish_git_prompt_color_branch_done
106	106	--> if test -n "$__fish_git_prompt_showcolorhints"
34	34	--> if test -n "$w"
29	29	--> if test -n "$i"
44	44	--> set i "$___fish_git_prompt_color_stagedstate$i$___fish_git_prompt_color_stagedstate_done"
10	10	--> end
28	28	--> if test -n "$s"
26	26	--> if test -n "$u"
102	2653	--> set b (/bin/sh -c 'echo "${1#refs/heads/}"' -- $b)
2551	2551	---> /bin/sh -c 'echo "${1#refs/heads/}"' -- $b
51	51	--> if test -n "$b"
41	41	--> set b "$branch_color$b$branch_done"
12	12	--> end
29	29	--> if test -n "$c"
27	27	--> if test -n "$r"
26	26	--> if test -n "$p"
54	54	--> set -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"
37	37	--> set -l f "$w$i$s$u"
32	32	--> if test -n "$f"
34	34	--> set f "$space$f"
10	10	--> end
26	26	--> set -l format $argv[1]
28	28	--> if test -z "$format"
38	38	--> set format " (%s)"
11	11	--> end
214	214	--> printf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___git_ps_color_suffix_done"
24	24	-> if begin
3819	3819	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
33	33	-> end
34	34	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
42	104	> __fish_pwd
62	62	-> pwd
339	72339	> fish_prompt
51	51	-> set -l last_status $status
36	36	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
65	97	-> set -l normal (set_color normal)
32	32	--> set_color normal
59	85	-> set -l red (set_color red)
26	26	--> set_color red
77	103	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
100	144	-> set -l white (set_color white)
44	44	--> set_color white
96	143	-> set -l gray (set_color -o cyan)
47	47	--> set_color -o cyan
100	182	-> set -l brwhite (set_color -o white)
82	82	--> set_color -o white
106	534	-> set -g __fish_git_prompt_showdirtystate true
240	428	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
45	45	---> if status --is-interactive
59	59	---> if test $argv[3] = __fish_git_prompt_show_informative_status
56	56	---> commandline -f repaint ^/dev/null
28	28	---> end
56	260	-> set -g __fish_git_prompt_showuntrackedfiles true
95	204	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
30	30	---> if status --is-interactive
44	44	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
44	243	-> set -g __fish_git_prompt_showstashstate true
95	199	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
28	28	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
48	1784	-> set -g __fish_git_prompt_color green
251	1736	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
30	30	---> if status --is-interactive
35	35	---> set -l var $argv[3]
33	33	---> set -e _$var
35	35	---> set -e _{$var}_done
76	76	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
36	36	---> set -e ___fish_git_prompt_color_$name
35	35	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
34	34	---> set -e ___fish_git_prompt_color_$name
55	55	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
79	79	---> set -e ___fish_git_prompt_color_$name
37	37	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
46	46	---> set -e ___fish_git_prompt_color_$name
34	34	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
41	41	---> set -e ___fish_git_prompt_color_$name
64	64	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
54	54	---> set -e ___fish_git_prompt_color_$name
53	53	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
76	76	---> set -e ___fish_git_prompt_color_$name
53	53	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
36	36	---> set -e ___fish_git_prompt_color_$name
34	34	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
8	8	---> end
30	30	---> commandline -f repaint ^/dev/null
10	10	---> end
62	5006	-> set -g __fish_git_prompt_color_flags red
451	4944	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
34	34	---> if status --is-interactive
36	36	---> set -l var $argv[3]
148	148	---> set -e _$var
157	157	---> set -e _{$var}_done
94	94	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
130	130	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
147	147	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
157	157	---> set -e ___fish_git_prompt_color_$name
143	143	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
608	608	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
153	153	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
124	124	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
41	41	---> end
18	18	---> end
55	55	---> commandline -f repaint ^/dev/null
19	19	---> end
81	81	-> set -l pcolor $gray
87	87	-> if test $last_status -ne 0
172	3615	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
81	3443	--> prompt_pwd
3362	3362	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
804	54673	-> __fish_git_prompt
173	2940	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2767	2767	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
55	55	--> test -n "$repo_info"; 
9	9	--> or return
42	42	--> set -l git_dir         $repo_info[1]
45	45	--> set -l inside_gitdir   $repo_info[2]
41	41	--> set -l bare_repo       $repo_info[3]
39	39	--> set -l inside_worktree $repo_info[4]
26	26	--> set -l short_sha
66	124	--> if test (count $repo_info) = 5
58	58	---> count $repo_info
40	40	--> set short_sha $repo_info[5]
12	12	--> end
942	4599	---> __fish_git_prompt_operation_branch_bare $repo_info
41	41	----> set -l git_dir         $argv[1]
38	38	----> set -l inside_gitdir   $argv[2]
36	36	----> set -l bare_repo       $argv[3]
24	24	----> set -l short_sha
56	105	----> if test (count $argv) = 5
49	49	-----> count $argv
38	38	----> set short_sha $argv[5]
11	11	----> end
24	24	----> set -l branch
24	24	----> set -l operation
24	24	----> set -l detached no
22	22	----> set -l bare
22	22	----> set -l step
22	22	----> set -l total
22	22	----> set -l os
157	157	----> if test -d $git_dir/rebase-merge
53	53	----> if test -d $git_dir/rebase-apply
11	11	----> end
54	54	----> if test -n "$step" -a -n "$total"
46	46	----> if test -z "$branch"
92	2682	----> set branch (command git symbolic-ref HEAD ^/dev/null; set os $status)
2525	2525	-----> command git symbolic-ref HEAD ^/dev/null; 
65	65	-----> set os $status
47	47	----> if test $os -ne 0
11	11	----> end
43	43	----> if test "true" = $inside_gitdir
29	29	----> echo $operation
28	28	----> echo $branch
23	23	----> echo $detached
20	20	----> echo $bare
107	107	--> set -l r $rbc[1] # current operation
69	69	--> set -l b $rbc[2] # current branch
35	35	--> set -l detached $rbc[3]
22	22	--> set -l w #dirty working directory
22	22	--> set -l i #staged changes
21	21	--> set -l s #stashes
21	21	--> set -l u #untracked
30	30	--> set -l c $rbc[4] # bare repository
21	21	--> set -l p #upstream
25	25	--> set -l informative_status
98	7100	--> __fish_git_prompt_validate_chars
137	546	---> __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate        '✔'
44	44	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
113	113	----> set -l user_variable $$user_variable_name
64	104	----> if test (count $argv) -ge 3
40	40	-----> count $argv
38	38	----> set -l variable _$user_variable_name
43	43	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
205	948	---> __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate        '*' '✚'
39	39	----> set -l user_variable_name "$argv[1]"
44	44	----> set -l char $argv[2]
165	165	----> set -l user_variable $$user_variable_name
116	197	----> if test (count $argv) -ge 3
81	81	-----> count $argv
65	65	----> if test -n "$__fish_git_prompt_show_informative_status"
20	20	----> end
81	81	----> set -l variable _$user_variable_name
76	76	----> set -l variable_done "$variable"_done
56	56	----> if not set -q $variable
132	577	---> __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate      '#' '✖'
43	43	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
96	96	----> set -l user_variable $$user_variable_name
64	105	----> if test (count $argv) -ge 3
41	41	-----> count $argv
36	36	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
44	44	----> set -l variable _$user_variable_name
45	45	----> set -l variable_done "$variable"_done
34	34	----> if not set -q $variable
137	592	---> __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate       '+' '●'
37	37	----> set -l user_variable_name "$argv[1]"
29	29	----> set -l char $argv[2]
107	107	----> set -l user_variable $$user_variable_name
74	120	----> if test (count $argv) -ge 3
46	46	-----> count $argv
37	37	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
40	40	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
199	597	---> __fish_git_prompt_set_char __fish_git_prompt_char_stashstate        '$'
51	51	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
106	106	----> set -l user_variable $$user_variable_name
66	103	----> if test (count $argv) -ge 3
37	37	-----> count $argv
38	38	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
34	34	----> if not set -q $variable
134	597	---> __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator    ' ' '|'
38	38	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
114	114	----> set -l user_variable $$user_variable_name
82	121	----> if test (count $argv) -ge 3
39	39	-----> count $argv
37	37	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
39	39	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
132	561	---> __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles    '%' '…'
48	48	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
90	90	----> set -l user_variable $$user_variable_name
61	99	----> if test (count $argv) -ge 3
38	38	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
43	43	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
123	508	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead    '>' '↑'
39	39	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
72	72	----> set -l user_variable $$user_variable_name
65	100	----> if test (count $argv) -ge 3
35	35	-----> count $argv
32	32	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
34	34	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
32	32	----> if not set -q $variable
132	613	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind   '<' '↓'
52	52	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
110	110	----> set -l user_variable $$user_variable_name
68	132	----> if test (count $argv) -ge 3
64	64	-----> count $argv
36	36	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
38	38	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
134	487	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
38	38	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
77	77	----> set -l user_variable $$user_variable_name
59	94	----> if test (count $argv) -ge 3
35	35	-----> count $argv
42	42	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
34	34	----> if not set -q $variable
133	470	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal    '='
38	38	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
69	69	----> set -l user_variable $$user_variable_name
58	93	----> if test (count $argv) -ge 3
35	35	-----> count $argv
36	36	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
148	506	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix   ''
37	37	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
74	74	----> set -l user_variable $$user_variable_name
58	92	----> if test (count $argv) -ge 3
34	34	-----> count $argv
43	43	----> set -l variable _$user_variable_name
45	45	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
52	52	--> if test "true" = $inside_worktree
83	83	--> if test -n "$__fish_git_prompt_show_informative_status"
38	38	--> if test -n "$__fish_git_prompt_showdirtystate"
114	2445	--> set -l config (command git config --bool bash.showDirtyState)
2331	2331	---> command git config --bool bash.showDirtyState
89	89	--> if test "$config" != "false"
79	3569	--> set w (__fish_git_prompt_dirty)
135	3490	---> __fish_git_prompt_dirty
44	44	----> set -l dirty
57	57	----> set -l os
3127	3127	----> command git diff --no-ext-diff --quiet --exit-code
63	63	----> set os $status
40	40	----> if test $os -ne 0
24	24	----> echo $dirty
116	4177	--> set i (__fish_git_prompt_staged $short_sha)
132	4061	---> __fish_git_prompt_staged $short_sha
45	45	----> set -l short_sha $argv[1]
25	25	----> set -l staged
51	51	----> if test -n "$short_sha"
3696	3696	----> command git diff-index --cached --quiet HEAD --; 
72	72	----> or set staged $___fish_git_prompt_char_stagedstate
13	13	----> else
27	27	----> echo $staged
45	45	--> end
24	24	--> end
109	109	--> if test -n "$__fish_git_prompt_showstashstate" -a -r $git_dir/refs/stash
107	107	--> if test -n "$__fish_git_prompt_showuntrackedfiles"
131	2795	--> set -l config (command git config --bool bash.showUntrackedFiles)
2664	2664	---> command git config --bool bash.showUntrackedFiles
61	61	--> if test "$config" != false
3009	3009	--> if command git ls-files --others --exclude-standard --error-unmatch -- '*' >/dev/null ^/dev/null
11	11	--> end
12	12	--> end
11	11	--> end
145	145	--> if test -n "$__fish_git_prompt_showupstream" -o "$__fish_git_prompt_show_informative_status"
11	11	--> end
165	17446	--> __fish_git_prompt_validate_colors
293	1255	---> __fish_git_prompt_set_color __fish_git_prompt_color '' ''
47	47	----> set -l user_variable_name "$argv[1]"
45	45	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
27	27	----> set -l default default_done
58	98	----> switch (count $argv)
40	40	-----> count $argv
35	35	----> set default "$argv[2]"
33	33	----> set default_done "$argv[3]"
11	11	----> end
99	143	----> if test (count $user_variable) -eq 2
44	44	-----> count $user_variable
46	46	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
44	44	----> if not set -q $variable
40	40	----> if test -n "$user_variable"
40	40	----> if test -n "$user_variable_bright"
82	140	----> set -g $variable (set_color $user_variable)
58	58	-----> set_color $user_variable
12	12	----> end
85	115	----> set -g $variable_done (set_color normal)
30	30	-----> set_color normal
11	11	----> else
10	10	----> end
292	1174	---> __fish_git_prompt_set_color __fish_git_prompt_color_prefix
42	42	----> set -l user_variable_name "$argv[1]"
124	124	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
74	146	----> switch (count $argv)
72	72	-----> count $argv
39	39	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
84	146	----> if test (count $user_variable) -eq 2
62	62	-----> count $user_variable
53	53	----> set -l variable _$user_variable_name
40	40	----> set -l variable_done "$variable"_done
44	44	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
43	43	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
12	12	----> end
11	11	----> end
250	993	---> __fish_git_prompt_set_color __fish_git_prompt_color_suffix
40	40	----> set -l user_variable_name "$argv[1]"
116	116	----> set -l user_variable $$user_variable_name
34	34	----> set -l user_variable_bright
26	26	----> set -l default default_done
57	92	----> switch (count $argv)
35	35	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
37	37	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
58	90	----> if test (count $user_variable) -eq 2
32	32	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
51	51	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
39	39	----> set -g $variable $default
44	44	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
240	961	---> __fish_git_prompt_set_color __fish_git_prompt_color_bare
36	36	----> set -l user_variable_name "$argv[1]"
142	142	----> set -l user_variable $$user_variable_name
28	28	----> set -l user_variable_bright
42	42	----> set -l default default_done
49	80	----> switch (count $argv)
31	31	-----> count $argv
32	32	----> set default $___fish_git_prompt_color
33	33	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
52	76	----> if test (count $user_variable) -eq 2
24	24	-----> count $user_variable
34	34	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
39	39	----> set -g $variable $default
39	39	----> set -g $variable_done $default_done
10	10	----> end
10	10	----> end
425	1484	---> __fish_git_prompt_set_color __fish_git_prompt_color_merging
36	36	----> set -l user_variable_name "$argv[1]"
109	109	----> set -l user_variable $$user_variable_name
69	69	----> set -l user_variable_bright
31	31	----> set -l default default_done
63	96	----> switch (count $argv)
33	33	-----> count $argv
45	45	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
117	168	----> if test (count $user_variable) -eq 2
51	51	-----> count $user_variable
70	70	----> set -l variable _$user_variable_name
139	139	----> set -l variable_done "$variable"_done
67	67	----> if not set -q $variable
38	38	----> if test -n "$user_variable"
77	77	----> set -g $variable $default
45	45	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
285	928	---> __fish_git_prompt_set_color __fish_git_prompt_color_cleanstate
44	44	----> set -l user_variable_name "$argv[1]"
149	149	----> set -l user_variable $$user_variable_name
29	29	----> set -l user_variable_bright
26	26	----> set -l default default_done
58	96	----> switch (count $argv)
38	38	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
58	91	----> if test (count $user_variable) -eq 2
33	33	-----> count $user_variable
46	46	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
260	991	---> __fish_git_prompt_set_color __fish_git_prompt_color_invalidstate
40	40	----> set -l user_variable_name "$argv[1]"
108	108	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	94	----> switch (count $argv)
40	40	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
58	87	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
43	43	----> set -g $variable $default
45	45	----> set -g $variable_done $default_done
11	11	----> end
11	11	----> end
278	1146	---> __fish_git_prompt_set_color __fish_git_prompt_color_upstream
39	39	----> set -l user_variable_name "$argv[1]"
140	140	----> set -l user_variable $$user_variable_name
44	44	----> set -l user_variable_bright
44	44	----> set -l default default_done
78	123	----> switch (count $argv)
45	45	-----> count $argv
53	53	----> set default $___fish_git_prompt_color
41	41	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
70	99	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
48	48	----> set -g $variable $default
51	51	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
125	125	---> if test -n "$__fish_git_prompt_showcolorhints"
266	1115	---> __fish_git_prompt_set_color __fish_git_prompt_color_flags
42	42	----> set -l user_variable_name "$argv[1]"
35	35	----> set -l user_variable $$user_variable_name
25	25	----> set -l user_variable_bright
26	26	----> set -l default default_done
58	100	----> switch (count $argv)
42	42	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
37	37	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
58	86	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
40	40	----> if test -n "$user_variable"
33	33	----> if test -n "$user_variable_bright"
76	118	----> set -g $variable (set_color $user_variable)
42	42	-----> set_color $user_variable
12	12	----> end
76	106	----> set -g $variable_done (set_color normal)
30	30	-----> set_color normal
12	12	----> else
10	10	----> end
342	1320	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch
40	40	----> set -l user_variable_name "$argv[1]"
172	172	----> set -l user_variable $$user_variable_name
47	47	----> set -l user_variable_bright
44	44	----> set -l default default_done
104	163	----> switch (count $argv)
59	59	-----> count $argv
40	40	----> set default $___fish_git_prompt_color
40	40	----> set default_done $___fish_git_prompt_color_done
13	13	----> case 2 # One default given, use normal for done
69	101	----> if test (count $user_variable) -eq 2
32	32	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
37	37	----> if test -n "$user_variable"
46	46	----> set -g $variable $default
94	94	----> set -g $variable_done $default_done
13	13	----> end
11	11	----> end
301	1172	---> __fish_git_prompt_set_color __fish_git_prompt_color_dirtystate  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
46	46	----> set -l user_variable_name "$argv[1]"
138	138	----> set -l user_variable $$user_variable_name
28	28	----> set -l user_variable_bright
26	26	----> set -l default default_done
99	152	----> switch (count $argv)
53	53	-----> count $argv
50	50	----> set default "$argv[2]"
39	39	----> set default_done "$argv[3]"
11	11	----> end
68	97	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
45	45	----> set -l variable _$user_variable_name
40	40	----> set -l variable_done "$variable"_done
44	44	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
54	54	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
12	12	----> end
11	11	----> end
337	1307	---> __fish_git_prompt_set_color __fish_git_prompt_color_stagedstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
41	41	----> set -l user_variable_name "$argv[1]"
138	138	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
57	104	----> switch (count $argv)
47	47	-----> count $argv
79	79	----> set default "$argv[2]"
68	68	----> set default_done "$argv[3]"
12	12	----> end
83	169	----> if test (count $user_variable) -eq 2
86	86	-----> count $user_variable
79	79	----> set -l variable _$user_variable_name
44	44	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
11	11	---> end
313	1010	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch_detached (set_color red)
37	37	----> set_color red
50	50	----> set -l user_variable_name "$argv[1]"
118	118	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	93	----> switch (count $argv)
39	39	-----> count $argv
37	37	----> set default "$argv[2]"
62	99	----> set default_done (set_color normal)
37	37	-----> set_color normal
12	12	----> case 3 # Both defaults given
56	83	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
300	1071	---> __fish_git_prompt_set_color __fish_git_prompt_color_stashstate      $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
47	47	----> set -l user_variable_name "$argv[1]"
103	103	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
53	96	----> switch (count $argv)
43	43	-----> count $argv
39	39	----> set default "$argv[2]"
44	44	----> set default_done "$argv[3]"
11	11	----> end
59	85	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
56	56	----> set -g $variable_done $default_done
25	25	----> end
22	22	----> end
354	1218	---> __fish_git_prompt_set_color __fish_git_prompt_color_untrackedfiles  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
71	71	----> set -l user_variable_name "$argv[1]"
125	125	----> set -l user_variable $$user_variable_name
46	46	----> set -l user_variable_bright
45	45	----> set -l default default_done
64	115	----> switch (count $argv)
51	51	-----> count $argv
41	41	----> set default "$argv[2]"
42	42	----> set default_done "$argv[3]"
12	12	----> end
63	90	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
43	43	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
54	54	----> set -g $variable $default
44	44	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
38	38	--> set -l branch_color $___fish_git_prompt_color_branch
37	37	--> set -l branch_done  $___fish_git_prompt_color_branch_done
107	107	--> if test -n "$__fish_git_prompt_showcolorhints"
34	34	--> if test -n "$w"
30	30	--> if test -n "$i"
50	50	--> set i "$___fish_git_prompt_color_stagedstate$i$___fish_git_prompt_color_stagedstate_done"
12	12	--> end
30	30	--> if test -n "$s"
28	28	--> if test -n "$u"
95	3001	--> set b (/bin/sh -c 'echo "${1#refs/heads/}"' -- $b)
2906	2906	---> /bin/sh -c 'echo "${1#refs/heads/}"' -- $b
56	56	--> if test -n "$b"
46	46	--> set b "$branch_color$b$branch_done"
14	14	--> end
33	33	--> if test -n "$c"
32	32	--> if test -n "$r"
29	29	--> if test -n "$p"
59	59	--> set -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"
39	39	--> set -l f "$w$i$s$u"
36	36	--> if test -n "$f"
36	36	--> set f "$space$f"
11	11	--> end
28	28	--> set -l format $argv[1]
31	31	--> if test -z "$format"
30	30	--> set format " (%s)"
11	11	--> end
242	242	--> printf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___git_ps_color_suffix_done"
35	35	-> if begin
4676	4676	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
31	31	-> end
39	39	-> echo
65	65	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
92	211	> __fish_pwd
119	119	-> pwd
51	51	> echo $_ " "; 
48	105	> __fish_pwd
57	57	-> pwd
6571	6571	> git status
460	77852	> fish_prompt
87	87	-> set -l last_status $status
57	57	-> if not set -q __fish_prompt_hostname
55	55	-> if not set -q __fish_prompt_char
114	193	-> set -l normal (set_color normal)
79	79	--> set_color normal
105	154	-> set -l red (set_color red)
49	49	--> set_color red
100	149	-> set -l cyan (set_color cyan)
49	49	--> set_color cyan
102	150	-> set -l white (set_color white)
48	48	--> set_color white
97	150	-> set -l gray (set_color -o cyan)
53	53	--> set_color -o cyan
115	164	-> set -l brwhite (set_color -o white)
49	49	--> set_color -o white
102	476	-> set -g __fish_git_prompt_showdirtystate true
169	374	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
59	59	---> if status --is-interactive
80	80	---> if test $argv[3] = __fish_git_prompt_show_informative_status
51	51	---> commandline -f repaint ^/dev/null
15	15	---> end
74	423	-> set -g __fish_git_prompt_showuntrackedfiles true
161	349	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
54	54	---> if status --is-interactive
71	71	---> if test $argv[3] = __fish_git_prompt_show_informative_status
45	45	---> commandline -f repaint ^/dev/null
18	18	---> end
74	401	-> set -g __fish_git_prompt_showstashstate true
153	327	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
48	48	---> if status --is-interactive
69	69	---> if test $argv[3] = __fish_git_prompt_show_informative_status
41	41	---> commandline -f repaint ^/dev/null
16	16	---> end
75	2541	-> set -g __fish_git_prompt_color green
344	2466	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
59	59	---> if status --is-interactive
62	62	---> set -l var $argv[3]
74	74	---> set -e _$var
76	76	---> set -e _{$var}_done
136	136	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
135	135	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
82	82	---> set -e ___fish_git_prompt_color_$name
62	62	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
55	55	---> set -e ___fish_git_prompt_color_$name
57	57	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
51	51	---> set -e ___fish_git_prompt_color_$name
53	53	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
49	49	---> set -e ___fish_git_prompt_color_$name
56	56	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
57	57	---> set -e ___fish_git_prompt_color_$name
51	51	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
54	54	---> set -e ___fish_git_prompt_color_$name
59	59	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
50	50	---> set -e ___fish_git_prompt_color_$name
52	52	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
49	49	---> set -e ___fish_git_prompt_color_$name
51	51	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
48	48	---> set -e ___fish_git_prompt_color_$name
50	50	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
51	51	---> set -e ___fish_git_prompt_color_$name
51	51	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
53	53	---> set -e ___fish_git_prompt_color_$name
52	52	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
52	52	---> set -e ___fish_git_prompt_color_$name
55	55	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
13	13	---> end
43	43	---> commandline -f repaint ^/dev/null
15	15	---> end
64	6064	-> set -g __fish_git_prompt_color_flags red
393	6000	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
49	49	---> if status --is-interactive
52	52	---> set -l var $argv[3]
201	201	---> set -e _$var
199	199	---> set -e _{$var}_done
136	136	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
79	79	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
161	161	---> set -e ___fish_git_prompt_color_$name
157	157	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
150	150	---> set -e ___fish_git_prompt_color_$name
172	172	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
826	826	---> set -e ___fish_git_prompt_color_$name
338	338	---> set -e ___fish_git_prompt_color_{$name}_done
28	28	---> end
172	172	---> set -e ___fish_git_prompt_color_$name
173	173	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
188	188	---> set -e ___fish_git_prompt_color_$name
163	163	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
159	159	---> set -e ___fish_git_prompt_color_$name
160	160	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
197	197	---> set -e ___fish_git_prompt_color_$name
165	165	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
153	153	---> set -e ___fish_git_prompt_color_$name
147	147	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
139	139	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
11	11	---> end
33	33	---> commandline -f repaint ^/dev/null
10	10	---> end
39	39	-> set -l pcolor $gray
39	39	-> if test $last_status -ne 0
155	3668	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
215	3513	--> prompt_pwd
3298	3298	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
880	57790	-> __fish_git_prompt
229	3092	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2863	2863	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
89	89	--> test -n "$repo_info"; 
15	15	--> or return
70	70	--> set -l git_dir         $repo_info[1]
80	80	--> set -l inside_gitdir   $repo_info[2]
78	78	--> set -l bare_repo       $repo_info[3]
67	67	--> set -l inside_worktree $repo_info[4]
51	51	--> set -l short_sha
111	205	--> if test (count $repo_info) = 5
94	94	---> count $repo_info
69	69	--> set short_sha $repo_info[5]
21	21	--> end
976	5110	---> __fish_git_prompt_operation_branch_bare $repo_info
71	71	----> set -l git_dir         $argv[1]
75	75	----> set -l inside_gitdir   $argv[2]
68	68	----> set -l bare_repo       $argv[3]
47	47	----> set -l short_sha
113	195	----> if test (count $argv) = 5
82	82	-----> count $argv
64	64	----> set short_sha $argv[5]
19	19	----> end
40	40	----> set -l branch
38	38	----> set -l operation
38	38	----> set -l detached no
36	36	----> set -l bare
39	39	----> set -l step
65	65	----> set -l total
39	39	----> set -l os
97	97	----> if test -d $git_dir/rebase-merge
80	80	----> if test -d $git_dir/rebase-apply
17	17	----> end
67	67	----> if test -n "$step" -a -n "$total"
66	66	----> if test -z "$branch"
115	2724	----> set branch (command git symbolic-ref HEAD ^/dev/null; set os $status)
2539	2539	-----> command git symbolic-ref HEAD ^/dev/null; 
70	70	-----> set os $status
95	95	----> if test $os -ne 0
11	11	----> end
45	45	----> if test "true" = $inside_gitdir
28	28	----> echo $operation
27	27	----> echo $branch
24	24	----> echo $detached
19	19	----> echo $bare
35	35	--> set -l r $rbc[1] # current operation
36	36	--> set -l b $rbc[2] # current branch
34	34	--> set -l detached $rbc[3]
22	22	--> set -l w #dirty working directory
22	22	--> set -l i #staged changes
21	21	--> set -l s #stashes
22	22	--> set -l u #untracked
31	31	--> set -l c $rbc[4] # bare repository
21	21	--> set -l p #upstream
25	25	--> set -l informative_status
95	7054	--> __fish_git_prompt_validate_chars
198	757	---> __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate        '✔'
43	43	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
161	161	----> set -l user_variable $$user_variable_name
105	164	----> if test (count $argv) -ge 3
59	59	-----> count $argv
72	72	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
47	47	----> if not set -q $variable
158	693	---> __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate        '*' '✚'
63	63	----> set -l user_variable_name "$argv[1]"
49	49	----> set -l char $argv[2]
110	110	----> set -l user_variable $$user_variable_name
90	155	----> if test (count $argv) -ge 3
65	65	-----> count $argv
38	38	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
129	551	---> __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate      '#' '✖'
39	39	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
93	93	----> set -l user_variable $$user_variable_name
62	100	----> if test (count $argv) -ge 3
38	38	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
43	43	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
128	535	---> __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate       '+' '●'
38	38	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
87	87	----> set -l user_variable $$user_variable_name
61	98	----> if test (count $argv) -ge 3
37	37	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
36	36	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
135	495	---> __fish_git_prompt_set_char __fish_git_prompt_char_stashstate        '$'
38	38	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
91	91	----> set -l user_variable $$user_variable_name
59	94	----> if test (count $argv) -ge 3
35	35	-----> count $argv
36	36	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
151	581	---> __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator    ' ' '|'
38	38	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
87	87	----> set -l user_variable $$user_variable_name
59	101	----> if test (count $argv) -ge 3
42	42	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
36	36	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
57	57	----> if not set -q $variable
152	599	---> __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles    '%' '…'
61	61	----> set -l user_variable_name "$argv[1]"
38	38	----> set -l char $argv[2]
91	91	----> set -l user_variable $$user_variable_name
61	98	----> if test (count $argv) -ge 3
37	37	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
36	36	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
127	537	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead    '>' '↑'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
92	92	----> set -l user_variable $$user_variable_name
60	97	----> if test (count $argv) -ge 3
37	37	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
36	36	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
128	541	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind   '<' '↓'
38	38	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
91	91	----> set -l user_variable $$user_variable_name
64	102	----> if test (count $argv) -ge 3
38	38	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
36	36	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
132	499	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
37	37	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
91	91	----> set -l user_variable $$user_variable_name
59	94	----> if test (count $argv) -ge 3
35	35	-----> count $argv
42	42	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
166	666	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal    '='
38	38	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
88	88	----> set -l user_variable $$user_variable_name
109	169	----> if test (count $argv) -ge 3
60	60	-----> count $argv
73	73	----> set -l variable _$user_variable_name
41	41	----> set -l variable_done "$variable"_done
60	60	----> if not set -q $variable
134	505	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix   ''
38	38	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
91	91	----> set -l user_variable $$user_variable_name
61	102	----> if test (count $argv) -ge 3
41	41	-----> count $argv
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
49	49	--> if test "true" = $inside_worktree
96	96	--> if test -n "$__fish_git_prompt_show_informative_status"
39	39	--> if test -n "$__fish_git_prompt_showdirtystate"
104	2476	--> set -l config (command git config --bool bash.showDirtyState)
2372	2372	---> command git config --bool bash.showDirtyState
84	84	--> if test "$config" != "false"
93	3545	--> set w (__fish_git_prompt_dirty)
166	3452	---> __fish_git_prompt_dirty
43	43	----> set -l dirty
36	36	----> set -l os
3022	3022	----> command git diff --no-ext-diff --quiet --exit-code
86	86	----> set os $status
61	61	----> if test $os -ne 0
38	38	----> echo $dirty
82	4267	--> set i (__fish_git_prompt_staged $short_sha)
171	4185	---> __fish_git_prompt_staged $short_sha
60	60	----> set -l short_sha $argv[1]
38	38	----> set -l staged
80	80	----> if test -n "$short_sha"
3690	3690	----> command git diff-index --cached --quiet HEAD --; 
97	97	----> or set staged $___fish_git_prompt_char_stagedstate
16	16	----> else
33	33	----> echo $staged
13	13	--> end
12	12	--> end
71	71	--> if test -n "$__fish_git_prompt_showstashstate" -a -r $git_dir/refs/stash
42	42	--> if test -n "$__fish_git_prompt_showuntrackedfiles"
96	3080	--> set -l config (command git config --bool bash.showUntrackedFiles)
2984	2984	---> command git config --bool bash.showUntrackedFiles
59	59	--> if test "$config" != false
3117	3117	--> if command git ls-files --others --exclude-standard --error-unmatch -- '*' >/dev/null ^/dev/null
11	11	--> end
12	12	--> end
11	11	--> end
158	158	--> if test -n "$__fish_git_prompt_showupstream" -o "$__fish_git_prompt_show_informative_status"
12	12	--> end
222	19292	--> __fish_git_prompt_validate_colors
296	1190	---> __fish_git_prompt_set_color __fish_git_prompt_color '' ''
47	47	----> set -l user_variable_name "$argv[1]"
39	39	----> set -l user_variable $$user_variable_name
25	25	----> set -l user_variable_bright
32	32	----> set -l default default_done
58	98	----> switch (count $argv)
40	40	-----> count $argv
35	35	----> set default "$argv[2]"
34	34	----> set default_done "$argv[3]"
11	11	----> end
59	95	----> if test (count $user_variable) -eq 2
36	36	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
39	39	----> if test -n "$user_variable"
32	32	----> if test -n "$user_variable_bright"
77	131	----> set -g $variable (set_color $user_variable)
54	54	-----> set_color $user_variable
12	12	----> end
73	102	----> set -g $variable_done (set_color normal)
29	29	-----> set_color normal
12	12	----> else
33	33	----> end
294	1127	---> __fish_git_prompt_set_color __fish_git_prompt_color_prefix
62	62	----> set -l user_variable_name "$argv[1]"
118	118	----> set -l user_variable $$user_variable_name
53	53	----> set -l user_variable_bright
52	52	----> set -l default default_done
65	104	----> switch (count $argv)
39	39	-----> count $argv
38	38	----> set default $___fish_git_prompt_color
38	38	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
60	87	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
43	43	----> if test -n "$user_variable"
43	43	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
260	976	---> __fish_git_prompt_set_color __fish_git_prompt_color_suffix
46	46	----> set -l user_variable_name "$argv[1]"
96	96	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	92	----> switch (count $argv)
38	38	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
56	82	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
45	45	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
47	47	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
283	982	---> __fish_git_prompt_set_color __fish_git_prompt_color_bare
39	39	----> set -l user_variable_name "$argv[1]"
95	95	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
51	84	----> switch (count $argv)
33	33	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
60	87	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
47	47	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
301	1057	---> __fish_git_prompt_set_color __fish_git_prompt_color_merging
64	64	----> set -l user_variable_name "$argv[1]"
116	116	----> set -l user_variable $$user_variable_name
29	29	----> set -l user_variable_bright
26	26	----> set -l default default_done
53	87	----> switch (count $argv)
34	34	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
57	83	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
50	50	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
535	1459	---> __fish_git_prompt_set_color __fish_git_prompt_color_cleanstate
47	47	----> set -l user_variable_name "$argv[1]"
147	147	----> set -l user_variable $$user_variable_name
38	38	----> set -l user_variable_bright
34	34	----> set -l default default_done
69	119	----> switch (count $argv)
50	50	-----> count $argv
71	71	----> set default $___fish_git_prompt_color
100	100	----> set default_done $___fish_git_prompt_color_done
21	21	----> case 2 # One default given, use normal for done
110	158	----> if test (count $user_variable) -eq 2
48	48	-----> count $user_variable
65	65	----> set -l variable _$user_variable_name
61	61	----> set -l variable_done "$variable"_done
63	63	----> if not set -q $variable
450	1669	---> __fish_git_prompt_set_color __fish_git_prompt_color_invalidstate
79	79	----> set -l user_variable_name "$argv[1]"
156	156	----> set -l user_variable $$user_variable_name
48	48	----> set -l user_variable_bright
46	46	----> set -l default default_done
90	149	----> switch (count $argv)
59	59	-----> count $argv
54	54	----> set default $___fish_git_prompt_color
52	52	----> set default_done $___fish_git_prompt_color_done
22	22	----> case 2 # One default given, use normal for done
105	150	----> if test (count $user_variable) -eq 2
45	45	-----> count $user_variable
65	65	----> set -l variable _$user_variable_name
68	68	----> set -l variable_done "$variable"_done
71	71	----> if not set -q $variable
62	62	----> if test -n "$user_variable"
79	79	----> set -g $variable $default
78	78	----> set -g $variable_done $default_done
22	22	----> end
18	18	----> end
473	1609	---> __fish_git_prompt_set_color __fish_git_prompt_color_upstream
68	68	----> set -l user_variable_name "$argv[1]"
144	144	----> set -l user_variable $$user_variable_name
47	47	----> set -l user_variable_bright
56	56	----> set -l default default_done
93	151	----> switch (count $argv)
58	58	-----> count $argv
58	58	----> set default $___fish_git_prompt_color
59	59	----> set default_done $___fish_git_prompt_color_done
17	17	----> case 2 # One default given, use normal for done
84	122	----> if test (count $user_variable) -eq 2
38	38	-----> count $user_variable
75	75	----> set -l variable _$user_variable_name
54	54	----> set -l variable_done "$variable"_done
57	57	----> if not set -q $variable
48	48	----> if test -n "$user_variable"
76	76	----> set -g $variable $default
69	69	----> set -g $variable_done $default_done
19	19	----> end
16	16	----> end
142	142	---> if test -n "$__fish_git_prompt_showcolorhints"
466	1758	---> __fish_git_prompt_set_color __fish_git_prompt_color_flags
66	66	----> set -l user_variable_name "$argv[1]"
56	56	----> set -l user_variable $$user_variable_name
39	39	----> set -l user_variable_bright
47	47	----> set -l default default_done
90	145	----> switch (count $argv)
55	55	-----> count $argv
55	55	----> set default $___fish_git_prompt_color
57	57	----> set default_done $___fish_git_prompt_color_done
18	18	----> case 2 # One default given, use normal for done
87	138	----> if test (count $user_variable) -eq 2
51	51	-----> count $user_variable
61	61	----> set -l variable _$user_variable_name
59	59	----> set -l variable_done "$variable"_done
62	62	----> if not set -q $variable
56	56	----> if test -n "$user_variable"
49	49	----> if test -n "$user_variable_bright"
114	173	----> set -g $variable (set_color $user_variable)
59	59	-----> set_color $user_variable
18	18	----> end
107	157	----> set -g $variable_done (set_color normal)
50	50	-----> set_color normal
18	18	----> else
18	18	----> end
366	1315	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch
73	73	----> set -l user_variable_name "$argv[1]"
142	142	----> set -l user_variable $$user_variable_name
30	30	----> set -l user_variable_bright
35	35	----> set -l default default_done
81	123	----> switch (count $argv)
42	42	-----> count $argv
55	55	----> set default $___fish_git_prompt_color
77	77	----> set default_done $___fish_git_prompt_color_done
20	20	----> case 2 # One default given, use normal for done
83	128	----> if test (count $user_variable) -eq 2
45	45	-----> count $user_variable
45	45	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
322	1192	---> __fish_git_prompt_set_color __fish_git_prompt_color_dirtystate  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
82	82	----> set -l user_variable_name "$argv[1]"
113	113	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
64	127	----> switch (count $argv)
63	63	-----> count $argv
40	40	----> set default "$argv[2]"
50	50	----> set default_done "$argv[3]"
13	13	----> end
74	107	----> if test (count $user_variable) -eq 2
33	33	-----> count $user_variable
42	42	----> set -l variable _$user_variable_name
51	51	----> set -l variable_done "$variable"_done
43	43	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
14	14	----> end
15	15	----> end
329	1238	---> __fish_git_prompt_set_color __fish_git_prompt_color_stagedstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
41	41	----> set -l user_variable_name "$argv[1]"
133	133	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
25	25	----> set -l default default_done
59	113	----> switch (count $argv)
54	54	-----> count $argv
76	76	----> set default "$argv[2]"
62	62	----> set default_done "$argv[3]"
20	20	----> end
78	107	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
63	63	----> set -l variable _$user_variable_name
58	58	----> set -l variable_done "$variable"_done
43	43	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
43	43	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
11	11	---> end
316	1061	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch_detached (set_color red)
36	36	----> set_color red
41	41	----> set -l user_variable_name "$argv[1]"
121	121	----> set -l user_variable $$user_variable_name
33	33	----> set -l user_variable_bright
29	29	----> set -l default default_done
60	102	----> switch (count $argv)
42	42	-----> count $argv
40	40	----> set default "$argv[2]"
67	101	----> set default_done (set_color normal)
34	34	-----> set_color normal
12	12	----> case 3 # Both defaults given
73	102	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
46	46	----> set -l variable_done "$variable"_done
43	43	----> if not set -q $variable
283	1037	---> __fish_git_prompt_set_color __fish_git_prompt_color_stashstate      $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
47	47	----> set -l user_variable_name "$argv[1]"
114	114	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	98	----> switch (count $argv)
44	44	-----> count $argv
39	39	----> set default "$argv[2]"
45	45	----> set default_done "$argv[3]"
12	12	----> end
56	83	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
48	48	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
306	1247	---> __fish_git_prompt_set_color __fish_git_prompt_color_untrackedfiles  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
40	40	----> set -l user_variable_name "$argv[1]"
171	171	----> set -l user_variable $$user_variable_name
28	28	----> set -l user_variable_bright
75	75	----> set -l default default_done
103	176	----> switch (count $argv)
73	73	-----> count $argv
41	41	----> set default "$argv[2]"
38	38	----> set default_done "$argv[3]"
12	12	----> end
59	86	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
59	59	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
38	38	--> set -l branch_color $___fish_git_prompt_color_branch
37	37	--> set -l branch_done  $___fish_git_prompt_color_branch_done
104	104	--> if test -n "$__fish_git_prompt_showcolorhints"
33	33	--> if test -n "$w"
29	29	--> if test -n "$i"
50	50	--> set i "$___fish_git_prompt_color_stagedstate$i$___fish_git_prompt_color_stagedstate_done"
12	12	--> end
29	29	--> if test -n "$s"
27	27	--> if test -n "$u"
96	3041	--> set b (/bin/sh -c 'echo "${1#refs/heads/}"' -- $b)
2945	2945	---> /bin/sh -c 'echo "${1#refs/heads/}"' -- $b
55	55	--> if test -n "$b"
45	45	--> set b "$branch_color$b$branch_done"
13	13	--> end
33	33	--> if test -n "$c"
30	30	--> if test -n "$r"
29	29	--> if test -n "$p"
51	51	--> set -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"
39	39	--> set -l f "$w$i$s$u"
36	36	--> if test -n "$f"
38	38	--> set f "$space$f"
11	11	--> end
29	29	--> set -l format $argv[1]
31	31	--> if test -z "$format"
31	31	--> set format " (%s)"
11	11	--> end
222	222	--> printf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___git_ps_color_suffix_done"
33	33	-> if begin
4638	4638	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
31	31	-> end
33	33	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
46	111	> __fish_pwd
65	65	-> pwd
314	72647	> fish_prompt
44	44	-> set -l last_status $status
31	31	-> if not set -q __fish_prompt_hostname
29	29	-> if not set -q __fish_prompt_char
64	95	-> set -l normal (set_color normal)
31	31	--> set_color normal
59	94	-> set -l red (set_color red)
35	35	--> set_color red
56	82	-> set -l cyan (set_color cyan)
26	26	--> set_color cyan
56	82	-> set -l white (set_color white)
26	26	--> set_color white
56	83	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
58	85	-> set -l brwhite (set_color -o white)
27	27	--> set_color -o white
47	264	-> set -g __fish_git_prompt_showdirtystate true
107	217	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
29	29	---> if status --is-interactive
44	44	---> if test $argv[3] = __fish_git_prompt_show_informative_status
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
43	231	-> set -g __fish_git_prompt_showuntrackedfiles true
87	188	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
42	233	-> set -g __fish_git_prompt_showstashstate true
88	191	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
26	26	---> if status --is-interactive
43	43	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
42	1599	-> set -g __fish_git_prompt_color green
220	1557	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
29	29	---> if status --is-interactive
33	33	---> set -l var $argv[3]
33	33	---> set -e _$var
34	34	---> set -e _{$var}_done
75	75	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
35	35	---> set -e ___fish_git_prompt_color_$name
34	34	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
51	51	---> set -e ___fish_git_prompt_color_$name
51	51	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
50	50	---> set -e ___fish_git_prompt_color_$name
51	51	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
33	33	---> set -e ___fish_git_prompt_color_$name
54	54	---> set -e ___fish_git_prompt_color_{$name}_done
34	34	---> end
36	36	---> set -e ___fish_git_prompt_color_$name
34	34	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
10	10	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
10	10	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
10	10	---> end
9	9	---> end
27	27	---> commandline -f repaint ^/dev/null
9	9	---> end
45	4491	-> set -g __fish_git_prompt_color_flags red
329	4446	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
31	31	---> if status --is-interactive
38	38	---> set -l var $argv[3]
126	126	---> set -e _$var
132	132	---> set -e _{$var}_done
88	88	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
116	116	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
33	33	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
438	438	---> set -e ___fish_git_prompt_color_$name
139	139	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
144	144	---> set -e ___fish_git_prompt_color_$name
144	144	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
145	145	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
31	31	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
31	31	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
30	30	---> end
119	119	---> set -e ___fish_git_prompt_color_$name
121	121	---> set -e ___fish_git_prompt_color_{$name}_done
29	29	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
29	29	---> end
120	120	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
30	30	---> end
117	117	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
29	29	---> end
116	116	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
27	27	---> end
9	9	---> end
31	31	---> commandline -f repaint ^/dev/null
10	10	---> end
38	38	-> set -l pcolor $gray
37	37	-> if test $last_status -ne 0
202	5309	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
187	5107	--> prompt_pwd
4920	4920	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
768	55325	-> __fish_git_prompt
205	3322	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
3117	3117	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
80	80	--> test -n "$repo_info"; 
13	13	--> or return
58	58	--> set -l git_dir         $repo_info[1]
43	43	--> set -l inside_gitdir   $repo_info[2]
39	39	--> set -l bare_repo       $repo_info[3]
36	36	--> set -l inside_worktree $repo_info[4]
25	25	--> set -l short_sha
68	127	--> if test (count $repo_info) = 5
59	59	---> count $repo_info
81	81	--> set short_sha $repo_info[5]
13	13	--> end
645	4289	---> __fish_git_prompt_operation_branch_bare $repo_info
49	49	----> set -l git_dir         $argv[1]
39	39	----> set -l inside_gitdir   $argv[2]
35	35	----> set -l bare_repo       $argv[3]
23	23	----> set -l short_sha
58	109	----> if test (count $argv) = 5
51	51	-----> count $argv
38	38	----> set short_sha $argv[5]
11	11	----> end
24	24	----> set -l branch
23	23	----> set -l operation
24	24	----> set -l detached no
22	22	----> set -l bare
22	22	----> set -l step
23	23	----> set -l total
22	22	----> set -l os
55	55	----> if test -d $git_dir/rebase-merge
44	44	----> if test -d $git_dir/rebase-apply
10	10	----> end
43	43	----> if test -n "$step" -a -n "$total"
45	45	----> if test -z "$branch"
91	2784	----> set branch (command git symbolic-ref HEAD ^/dev/null; set os $status)
2629	2629	-----> command git symbolic-ref HEAD ^/dev/null; 
64	64	-----> set os $status
48	48	----> if test $os -ne 0
11	11	----> end
42	42	----> if test "true" = $inside_gitdir
29	29	----> echo $operation
27	27	----> echo $branch
23	23	----> echo $detached
19	19	----> echo $bare
35	35	--> set -l r $rbc[1] # current operation
35	35	--> set -l b $rbc[2] # current branch
33	33	--> set -l detached $rbc[3]
22	22	--> set -l w #dirty working directory
21	21	--> set -l i #staged changes
21	21	--> set -l s #stashes
21	21	--> set -l u #untracked
30	30	--> set -l c $rbc[4] # bare repository
22	22	--> set -l p #upstream
24	24	--> set -l informative_status
106	9450	--> __fish_git_prompt_validate_chars
208	900	---> __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate        '✔'
40	40	----> set -l user_variable_name "$argv[1]"
141	141	----> set -l char $argv[2]
158	158	----> set -l user_variable $$user_variable_name
100	169	----> if test (count $argv) -ge 3
69	69	-----> count $argv
63	63	----> set -l variable _$user_variable_name
63	63	----> set -l variable_done "$variable"_done
58	58	----> if not set -q $variable
250	1006	---> __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate        '*' '✚'
71	71	----> set -l user_variable_name "$argv[1]"
54	54	----> set -l char $argv[2]
131	131	----> set -l user_variable $$user_variable_name
118	179	----> if test (count $argv) -ge 3
61	61	-----> count $argv
73	73	----> if test -n "$__fish_git_prompt_show_informative_status"
17	17	----> end
82	82	----> set -l variable _$user_variable_name
78	78	----> set -l variable_done "$variable"_done
71	71	----> if not set -q $variable
337	1220	---> __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate      '#' '✖'
79	79	----> set -l user_variable_name "$argv[1]"
70	70	----> set -l char $argv[2]
224	224	----> set -l user_variable $$user_variable_name
112	181	----> if test (count $argv) -ge 3
69	69	-----> count $argv
55	55	----> if test -n "$__fish_git_prompt_show_informative_status"
17	17	----> end
71	71	----> set -l variable _$user_variable_name
123	123	----> set -l variable_done "$variable"_done
63	63	----> if not set -q $variable
172	733	---> __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate       '+' '●'
70	70	----> set -l user_variable_name "$argv[1]"
54	54	----> set -l char $argv[2]
159	159	----> set -l user_variable $$user_variable_name
72	121	----> if test (count $argv) -ge 3
49	49	-----> count $argv
36	36	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
138	524	---> __fish_git_prompt_set_char __fish_git_prompt_char_stashstate        '$'
38	38	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
100	100	----> set -l user_variable $$user_variable_name
62	98	----> if test (count $argv) -ge 3
36	36	-----> count $argv
37	37	----> set -l variable _$user_variable_name
45	45	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
131	594	---> __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator    ' ' '|'
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
136	136	----> set -l user_variable $$user_variable_name
64	103	----> if test (count $argv) -ge 3
39	39	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
36	36	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
172	604	---> __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles    '%' '…'
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
103	103	----> set -l user_variable $$user_variable_name
62	101	----> if test (count $argv) -ge 3
39	39	-----> count $argv
37	37	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
272	838	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead    '>' '↑'
70	70	----> set -l user_variable_name "$argv[1]"
54	54	----> set -l char $argv[2]
146	146	----> set -l user_variable $$user_variable_name
81	128	----> if test (count $argv) -ge 3
47	47	-----> count $argv
38	38	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
41	41	----> set -l variable _$user_variable_name
40	40	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
137	635	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind   '<' '↓'
52	52	----> set -l user_variable_name "$argv[1]"
33	33	----> set -l char $argv[2]
103	103	----> set -l user_variable $$user_variable_name
64	103	----> if test (count $argv) -ge 3
39	39	-----> count $argv
81	81	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
40	40	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
180	817	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
39	39	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
124	124	----> set -l user_variable $$user_variable_name
112	184	----> if test (count $argv) -ge 3
72	72	-----> count $argv
124	124	----> set -l variable _$user_variable_name
79	79	----> set -l variable_done "$variable"_done
57	57	----> if not set -q $variable
181	654	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal    '='
95	95	----> set -l user_variable_name "$argv[1]"
34	34	----> set -l char $argv[2]
123	123	----> set -l user_variable $$user_variable_name
69	108	----> if test (count $argv) -ge 3
39	39	-----> count $argv
38	38	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
215	819	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix   ''
72	72	----> set -l user_variable_name "$argv[1]"
54	54	----> set -l char $argv[2]
151	151	----> set -l user_variable $$user_variable_name
92	138	----> if test (count $argv) -ge 3
46	46	-----> count $argv
67	67	----> set -l variable _$user_variable_name
51	51	----> set -l variable_done "$variable"_done
71	71	----> if not set -q $variable
55	55	--> if test "true" = $inside_worktree
128	128	--> if test -n "$__fish_git_prompt_show_informative_status"
44	44	--> if test -n "$__fish_git_prompt_showdirtystate"
102	2769	--> set -l config (command git config --bool bash.showDirtyState)
2667	2667	---> command git config --bool bash.showDirtyState
67	67	--> if test "$config" != "false"
114	3444	--> set w (__fish_git_prompt_dirty)
112	3330	---> __fish_git_prompt_dirty
31	31	----> set -l dirty
24	24	----> set -l os
3035	3035	----> command git diff --no-ext-diff --quiet --exit-code
63	63	----> set os $status
40	40	----> if test $os -ne 0
25	25	----> echo $dirty
68	4163	--> set i (__fish_git_prompt_staged $short_sha)
220	4095	---> __fish_git_prompt_staged $short_sha
45	45	----> set -l short_sha $argv[1]
25	25	----> set -l staged
41	41	----> if test -n "$short_sha"
3519	3519	----> command git diff-index --cached --quiet HEAD --; 
178	178	----> or set staged $___fish_git_prompt_char_stagedstate
25	25	----> else
42	42	----> echo $staged
13	13	--> end
12	12	--> end
72	72	--> if test -n "$__fish_git_prompt_showstashstate" -a -r $git_dir/refs/stash
42	42	--> if test -n "$__fish_git_prompt_showuntrackedfiles"
91	2652	--> set -l config (command git config --bool bash.showUntrackedFiles)
2561	2561	---> command git config --bool bash.showUntrackedFiles
57	57	--> if test "$config" != false
3247	3247	--> if command git ls-files --others --exclude-standard --error-unmatch -- '*' >/dev/null ^/dev/null
11	11	--> end
10	10	--> end
10	10	--> end
180	180	--> if test -n "$__fish_git_prompt_showupstream" -o "$__fish_git_prompt_show_informative_status"
10	10	--> end
175	15767	--> __fish_git_prompt_validate_colors
265	1089	---> __fish_git_prompt_set_color __fish_git_prompt_color '' ''
49	49	----> set -l user_variable_name "$argv[1]"
37	37	----> set -l user_variable $$user_variable_name
23	23	----> set -l user_variable_bright
24	24	----> set -l default default_done
55	92	----> switch (count $argv)
37	37	-----> count $argv
37	37	----> set default "$argv[2]"
32	32	----> set default_done "$argv[3]"
11	11	----> end
54	83	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
37	37	----> if test -n "$user_variable"
29	29	----> if test -n "$user_variable_bright"
75	126	----> set -g $variable (set_color $user_variable)
51	51	-----> set_color $user_variable
11	11	----> end
68	95	----> set -g $variable_done (set_color normal)
27	27	-----> set_color normal
11	11	----> else
19	19	----> end
256	968	---> __fish_git_prompt_set_color __fish_git_prompt_color_prefix
47	47	----> set -l user_variable_name "$argv[1]"
91	91	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
26	26	----> set -l default default_done
52	85	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
62	89	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
55	55	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
10	10	----> end
10	10	----> end
250	988	---> __fish_git_prompt_set_color __fish_git_prompt_color_suffix
36	36	----> set -l user_variable_name "$argv[1]"
108	108	----> set -l user_variable $$user_variable_name
34	34	----> set -l user_variable_bright
28	28	----> set -l default default_done
58	101	----> switch (count $argv)
43	43	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
58	84	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
44	44	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
38	38	----> if test -n "$user_variable"
40	40	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
261	1035	---> __fish_git_prompt_set_color __fish_git_prompt_color_bare
38	38	----> set -l user_variable_name "$argv[1]"
113	113	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
25	25	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
57	92	----> if test (count $user_variable) -eq 2
35	35	-----> count $user_variable
62	62	----> set -l variable _$user_variable_name
43	43	----> set -l variable_done "$variable"_done
52	52	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
50	50	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
250	936	---> __fish_git_prompt_set_color __fish_git_prompt_color_merging
38	38	----> set -l user_variable_name "$argv[1]"
82	82	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
26	26	----> set -l default default_done
53	92	----> switch (count $argv)
39	39	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
57	83	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
47	47	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
38	38	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
9	9	----> end
254	821	---> __fish_git_prompt_set_color __fish_git_prompt_color_cleanstate
35	35	----> set -l user_variable_name "$argv[1]"
113	113	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
25	25	----> set -l default default_done
53	86	----> switch (count $argv)
33	33	-----> count $argv
33	33	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
61	90	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
268	1024	---> __fish_git_prompt_set_color __fish_git_prompt_color_invalidstate
41	41	----> set -l user_variable_name "$argv[1]"
115	115	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
35	35	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
54	86	----> if test (count $user_variable) -eq 2
32	32	-----> count $user_variable
47	47	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
49	49	----> if not set -q $variable
43	43	----> if test -n "$user_variable"
45	45	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
12	12	----> end
11	11	----> end
250	942	---> __fish_git_prompt_set_color __fish_git_prompt_color_upstream
44	44	----> set -l user_variable_name "$argv[1]"
82	82	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
26	26	----> set -l default default_done
53	86	----> switch (count $argv)
33	33	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
61	88	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
48	48	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
44	44	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
10	10	----> end
10	10	----> end
108	108	---> if test -n "$__fish_git_prompt_showcolorhints"
251	1034	---> __fish_git_prompt_set_color __fish_git_prompt_color_flags
43	43	----> set -l user_variable_name "$argv[1]"
42	42	----> set -l user_variable $$user_variable_name
24	24	----> set -l user_variable_bright
24	24	----> set -l default default_done
51	83	----> switch (count $argv)
32	32	-----> count $argv
33	33	----> set default $___fish_git_prompt_color
33	33	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
59	87	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
34	34	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
29	29	----> if test -n "$user_variable_bright"
68	108	----> set -g $variable (set_color $user_variable)
40	40	-----> set_color $user_variable
11	11	----> end
67	94	----> set -g $variable_done (set_color normal)
27	27	-----> set_color normal
11	11	----> else
10	10	----> end
258	1013	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch
36	36	----> set -l user_variable_name "$argv[1]"
114	114	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
65	90	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
44	44	----> set -l variable _$user_variable_name
43	43	----> set -l variable_done "$variable"_done
46	46	----> if not set -q $variable
43	43	----> if test -n "$user_variable"
51	51	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
11	11	----> end
11	11	----> end
289	1004	---> __fish_git_prompt_set_color __fish_git_prompt_color_dirtystate  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
46	46	----> set -l user_variable_name "$argv[1]"
81	81	----> set -l user_variable $$user_variable_name
25	25	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	96	----> switch (count $argv)
42	42	-----> count $argv
39	39	----> set default "$argv[2]"
38	38	----> set default_done "$argv[3]"
11	11	----> end
62	88	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
42	42	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
48	48	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
278	1016	---> __fish_git_prompt_set_color __fish_git_prompt_color_stagedstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
41	41	----> set -l user_variable_name "$argv[1]"
103	103	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
32	32	----> set -l default default_done
56	100	----> switch (count $argv)
44	44	-----> count $argv
39	39	----> set default "$argv[2]"
39	39	----> set default_done "$argv[3]"
11	11	----> end
58	89	----> if test (count $user_variable) -eq 2
31	31	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
11	11	---> end
361	1200	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch_detached (set_color red)
35	35	----> set_color red
102	102	----> set -l user_variable_name "$argv[1]"
139	139	----> set -l user_variable $$user_variable_name
48	48	----> set -l user_variable_bright
46	46	----> set -l default default_done
66	111	----> switch (count $argv)
45	45	-----> count $argv
38	38	----> set default "$argv[2]"
63	97	----> set default_done (set_color normal)
34	34	-----> set_color normal
12	12	----> case 3 # Both defaults given
57	83	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
50	50	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
289	1050	---> __fish_git_prompt_set_color __fish_git_prompt_color_stashstate      $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
47	47	----> set -l user_variable_name "$argv[1]"
116	116	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	99	----> switch (count $argv)
45	45	-----> count $argv
49	49	----> set default "$argv[2]"
39	39	----> set default_done "$argv[3]"
11	11	----> end
59	85	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
48	48	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
381	1353	---> __fish_git_prompt_set_color __fish_git_prompt_color_untrackedfiles  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
43	43	----> set -l user_variable_name "$argv[1]"
108	108	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
59	104	----> switch (count $argv)
45	45	-----> count $argv
41	41	----> set default "$argv[2]"
48	48	----> set default_done "$argv[3]"
12	12	----> end
61	89	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
70	70	----> set -l variable_done "$variable"_done
67	67	----> if not set -q $variable
54	54	----> if test -n "$user_variable"
74	74	----> set -g $variable $default
141	141	----> set -g $variable_done $default_done
19	19	----> end
12	12	----> end
50	50	--> set -l branch_color $___fish_git_prompt_color_branch
43	43	--> set -l branch_done  $___fish_git_prompt_color_branch_done
117	117	--> if test -n "$__fish_git_prompt_showcolorhints"
34	34	--> if test -n "$w"
36	36	--> if test -n "$i"
49	49	--> set i "$___fish_git_prompt_color_stagedstate$i$___fish_git_prompt_color_stagedstate_done"
12	12	--> end
30	30	--> if test -n "$s"
28	28	--> if test -n "$u"
98	2804	--> set b (/bin/sh -c 'echo "${1#refs/heads/}"' -- $b)
2706	2706	---> /bin/sh -c 'echo "${1#refs/heads/}"' -- $b
55	55	--> if test -n "$b"
46	46	--> set b "$branch_color$b$branch_done"
13	13	--> end
32	32	--> if test -n "$c"
30	30	--> if test -n "$r"
35	35	--> if test -n "$p"
50	50	--> set -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"
39	39	--> set -l f "$w$i$s$u"
34	34	--> if test -n "$f"
37	37	--> set f "$space$f"
22	22	--> end
27	27	--> set -l format $argv[1]
28	28	--> if test -z "$format"
28	28	--> set format " (%s)"
10	10	--> end
200	200	--> printf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___git_ps_color_suffix_done"
23	23	-> if begin
4027	4027	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
33	33	-> end
39	39	-> echo
59	59	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
45	112	> __fish_pwd
67	67	-> pwd
111	111	> echo $_ " "; 
76	141	> __fish_pwd
65	65	-> pwd
181166	181166	> git commit -m "added some solutions, in particular for the first 10 problems except the Module It one(having some troubles)"
329	224401	> fish_prompt
80	80	-> set -l last_status $status
35	35	-> if not set -q __fish_prompt_hostname
32	32	-> if not set -q __fish_prompt_char
69	134	-> set -l normal (set_color normal)
65	65	--> set_color normal
63	94	-> set -l red (set_color red)
31	31	--> set_color red
61	91	-> set -l cyan (set_color cyan)
30	30	--> set_color cyan
58	87	-> set -l white (set_color white)
29	29	--> set_color white
64	92	-> set -l gray (set_color -o cyan)
28	28	--> set_color -o cyan
54	83	-> set -l brwhite (set_color -o white)
29	29	--> set_color -o white
44	319	-> set -g __fish_git_prompt_showdirtystate true
118	275	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
46	46	---> if status --is-interactive
59	59	---> if test $argv[3] = __fish_git_prompt_show_informative_status
43	43	---> commandline -f repaint ^/dev/null
9	9	---> end
41	219	-> set -g __fish_git_prompt_showuntrackedfiles true
82	178	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
25	25	---> if status --is-interactive
39	39	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
8	8	---> end
39	218	-> set -g __fish_git_prompt_showstashstate true
87	179	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
24	24	---> if status --is-interactive
37	37	---> if test $argv[3] = __fish_git_prompt_show_informative_status
23	23	---> commandline -f repaint ^/dev/null
8	8	---> end
40	1504	-> set -g __fish_git_prompt_color green
225	1464	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
27	27	---> if status --is-interactive
31	31	---> set -l var $argv[3]
34	34	---> set -e _$var
36	36	---> set -e _{$var}_done
72	72	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
44	44	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
36	36	---> set -e ___fish_git_prompt_color_$name
34	34	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
34	34	---> set -e ___fish_git_prompt_color_$name
31	31	---> set -e ___fish_git_prompt_color_{$name}_done
10	10	---> end
29	29	---> set -e ___fish_git_prompt_color_$name
30	30	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
29	29	---> set -e ___fish_git_prompt_color_$name
30	30	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
31	31	---> set -e ___fish_git_prompt_color_{$name}_done
10	10	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
40	40	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
40	40	---> set -e ___fish_git_prompt_color_$name
34	34	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
50	50	---> set -e ___fish_git_prompt_color_$name
39	39	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
35	35	---> set -e ___fish_git_prompt_color_$name
36	36	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
34	34	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
35	35	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
10	10	---> end
8	8	---> end
26	26	---> commandline -f repaint ^/dev/null
9	9	---> end
45	23942	-> set -g __fish_git_prompt_color_flags red
257	23897	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
30	30	---> if status --is-interactive
33	33	---> set -l var $argv[3]
130	130	---> set -e _$var
20102	20102	---> set -e _{$var}_done
111	111	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
49	49	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
131	131	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
138	138	---> set -e ___fish_git_prompt_color_$name
150	150	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
185	185	---> set -e ___fish_git_prompt_color_$name
150	150	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
124	124	---> set -e ___fish_git_prompt_color_$name
109	109	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
126	126	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
116	116	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
107	107	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
10	10	---> end
38	38	-> set -l pcolor $gray
37	37	-> if test $last_status -ne 0
162	77950	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
264	77788	--> prompt_pwd
77524	77524	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
1077	57487	-> __fish_git_prompt
251	2987	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2736	2736	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
103	103	--> test -n "$repo_info"; 
33	33	--> or return
78	78	--> set -l git_dir         $repo_info[1]
47	47	--> set -l inside_gitdir   $repo_info[2]
39	39	--> set -l bare_repo       $repo_info[3]
36	36	--> set -l inside_worktree $repo_info[4]
26	26	--> set -l short_sha
68	153	--> if test (count $repo_info) = 5
85	85	---> count $repo_info
39	39	--> set short_sha $repo_info[5]
13	13	--> end
726	4522	---> __fish_git_prompt_operation_branch_bare $repo_info
41	41	----> set -l git_dir         $argv[1]
38	38	----> set -l inside_gitdir   $argv[2]
36	36	----> set -l bare_repo       $argv[3]
23	23	----> set -l short_sha
57	108	----> if test (count $argv) = 5
51	51	-----> count $argv
37	37	----> set short_sha $argv[5]
12	12	----> end
24	24	----> set -l branch
23	23	----> set -l operation
24	24	----> set -l detached no
22	22	----> set -l bare
22	22	----> set -l step
26	26	----> set -l total
21	21	----> set -l os
64	64	----> if test -d $git_dir/rebase-merge
50	50	----> if test -d $git_dir/rebase-apply
10	10	----> end
44	44	----> if test -n "$step" -a -n "$total"
38	38	----> if test -z "$branch"
96	2914	----> set branch (command git symbolic-ref HEAD ^/dev/null; set os $status)
2723	2723	-----> command git symbolic-ref HEAD ^/dev/null; 
95	95	-----> set os $status
61	61	----> if test $os -ne 0
10	10	----> end
48	48	----> if test "true" = $inside_gitdir
28	28	----> echo $operation
29	29	----> echo $branch
24	24	----> echo $detached
19	19	----> echo $bare
33	33	--> set -l r $rbc[1] # current operation
34	34	--> set -l b $rbc[2] # current branch
41	41	--> set -l detached $rbc[3]
24	24	--> set -l w #dirty working directory
22	22	--> set -l i #staged changes
21	21	--> set -l s #stashes
56	56	--> set -l u #untracked
44	44	--> set -l c $rbc[4] # bare repository
23	23	--> set -l p #upstream
25	25	--> set -l informative_status
127	6556	--> __fish_git_prompt_validate_chars
157	566	---> __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate        '✔'
46	46	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
108	108	----> set -l user_variable $$user_variable_name
69	110	----> if test (count $argv) -ge 3
41	41	-----> count $argv
38	38	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
131	528	---> __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate        '*' '✚'
39	39	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
74	74	----> set -l user_variable $$user_variable_name
60	98	----> if test (count $argv) -ge 3
38	38	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
122	508	---> __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate      '#' '✖'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
68	68	----> set -l user_variable $$user_variable_name
65	104	----> if test (count $argv) -ge 3
39	39	-----> count $argv
32	32	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
34	34	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
33	33	----> if not set -q $variable
126	555	---> __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate       '+' '●'
36	36	----> set -l user_variable_name "$argv[1]"
29	29	----> set -l char $argv[2]
112	112	----> set -l user_variable $$user_variable_name
67	105	----> if test (count $argv) -ge 3
38	38	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
9	9	----> end
36	36	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
33	33	----> if not set -q $variable
167	599	---> __fish_git_prompt_set_char __fish_git_prompt_char_stashstate        '$'
40	40	----> set -l user_variable_name "$argv[1]"
29	29	----> set -l char $argv[2]
106	106	----> set -l user_variable $$user_variable_name
80	122	----> if test (count $argv) -ge 3
42	42	-----> count $argv
58	58	----> set -l variable _$user_variable_name
40	40	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
137	546	---> __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator    ' ' '|'
41	41	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
85	85	----> set -l user_variable $$user_variable_name
60	98	----> if test (count $argv) -ge 3
38	38	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
121	508	---> __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles    '%' '…'
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
70	70	----> set -l user_variable $$user_variable_name
68	104	----> if test (count $argv) -ge 3
36	36	-----> count $argv
32	32	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
34	34	----> set -l variable _$user_variable_name
33	33	----> set -l variable_done "$variable"_done
33	33	----> if not set -q $variable
126	556	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead    '>' '↑'
36	36	----> set -l user_variable_name "$argv[1]"
29	29	----> set -l char $argv[2]
111	111	----> set -l user_variable $$user_variable_name
66	105	----> if test (count $argv) -ge 3
39	39	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
9	9	----> end
36	36	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
34	34	----> if not set -q $variable
124	557	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind   '<' '↓'
42	42	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
100	100	----> set -l user_variable $$user_variable_name
69	110	----> if test (count $argv) -ge 3
41	41	-----> count $argv
33	33	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
39	39	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
33	33	----> if not set -q $variable
149	534	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
39	39	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
92	92	----> set -l user_variable $$user_variable_name
68	103	----> if test (count $argv) -ge 3
35	35	-----> count $argv
41	41	----> set -l variable _$user_variable_name
45	45	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
135	497	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal    '='
39	39	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
81	81	----> set -l user_variable $$user_variable_name
59	94	----> if test (count $argv) -ge 3
35	35	-----> count $argv
36	36	----> set -l variable _$user_variable_name
46	46	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
133	475	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix   ''
38	38	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
69	69	----> set -l user_variable $$user_variable_name
59	98	----> if test (count $argv) -ge 3
39	39	-----> count $argv
36	36	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
50	50	--> if test "true" = $inside_worktree
103	103	--> if test -n "$__fish_git_prompt_show_informative_status"
39	39	--> if test -n "$__fish_git_prompt_showdirtystate"
106	2584	--> set -l config (command git config --bool bash.showDirtyState)
2478	2478	---> command git config --bool bash.showDirtyState
68	68	--> if test "$config" != "false"
64	3493	--> set w (__fish_git_prompt_dirty)
135	3429	---> __fish_git_prompt_dirty
33	33	----> set -l dirty
24	24	----> set -l os
3102	3102	----> command git diff --no-ext-diff --quiet --exit-code
76	76	----> set os $status
37	37	----> if test $os -ne 0
22	22	----> echo $dirty
67	3713	--> set i (__fish_git_prompt_staged $short_sha)
156	3646	---> __fish_git_prompt_staged $short_sha
36	36	----> set -l short_sha $argv[1]
22	22	----> set -l staged
38	38	----> if test -n "$short_sha"
3317	3317	----> command git diff-index --cached --quiet HEAD --; 
34	34	----> or set staged $___fish_git_prompt_char_stagedstate
16	16	----> else
27	27	----> echo $staged
11	11	--> end
12	12	--> end
88	88	--> if test -n "$__fish_git_prompt_showstashstate" -a -r $git_dir/refs/stash
58	58	--> if test -n "$__fish_git_prompt_showuntrackedfiles"
96	2243	--> set -l config (command git config --bool bash.showUntrackedFiles)
2147	2147	---> command git config --bool bash.showUntrackedFiles
64	64	--> if test "$config" != false
8892	8892	--> if command git ls-files --others --exclude-standard --error-unmatch -- '*' >/dev/null ^/dev/null
23	23	--> end
20	20	--> end
18	18	--> end
197	197	--> if test -n "$__fish_git_prompt_showupstream" -o "$__fish_git_prompt_show_informative_status"
10	10	--> end
200	15616	--> __fish_git_prompt_validate_colors
306	1152	---> __fish_git_prompt_set_color __fish_git_prompt_color '' ''
48	48	----> set -l user_variable_name "$argv[1]"
41	41	----> set -l user_variable $$user_variable_name
30	30	----> set -l user_variable_bright
27	27	----> set -l default default_done
63	102	----> switch (count $argv)
39	39	-----> count $argv
34	34	----> set default "$argv[2]"
32	32	----> set default_done "$argv[3]"
10	10	----> end
56	89	----> if test (count $user_variable) -eq 2
33	33	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
37	37	----> if test -n "$user_variable"
30	30	----> if test -n "$user_variable_bright"
72	128	----> set -g $variable (set_color $user_variable)
56	56	-----> set_color $user_variable
12	12	----> end
69	96	----> set -g $variable_done (set_color normal)
27	27	-----> set_color normal
11	11	----> else
10	10	----> end
284	1067	---> __fish_git_prompt_set_color __fish_git_prompt_color_prefix
36	36	----> set -l user_variable_name "$argv[1]"
127	127	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
25	25	----> set -l default default_done
53	87	----> switch (count $argv)
34	34	-----> count $argv
33	33	----> set default $___fish_git_prompt_color
33	33	----> set default_done $___fish_git_prompt_color_done
14	14	----> case 2 # One default given, use normal for done
59	91	----> if test (count $user_variable) -eq 2
32	32	-----> count $user_variable
55	55	----> set -l variable _$user_variable_name
46	46	----> set -l variable_done "$variable"_done
47	47	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
55	55	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
12	12	----> end
11	11	----> end
251	949	---> __fish_git_prompt_set_color __fish_git_prompt_color_suffix
39	39	----> set -l user_variable_name "$argv[1]"
91	91	----> set -l user_variable $$user_variable_name
25	25	----> set -l user_variable_bright
25	25	----> set -l default default_done
55	93	----> switch (count $argv)
38	38	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
35	35	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
57	87	----> if test (count $user_variable) -eq 2
30	30	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
50	50	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
38	38	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
240	948	---> __fish_git_prompt_set_color __fish_git_prompt_color_bare
36	36	----> set -l user_variable_name "$argv[1]"
121	121	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
54	79	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
45	45	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
9	9	----> end
281	1094	---> __fish_git_prompt_set_color __fish_git_prompt_color_merging
36	36	----> set -l user_variable_name "$argv[1]"
123	123	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
25	25	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
53	53	----> set default $___fish_git_prompt_color
37	37	----> set default_done $___fish_git_prompt_color_done
32	32	----> case 2 # One default given, use normal for done
74	123	----> if test (count $user_variable) -eq 2
49	49	-----> count $user_variable
42	42	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
12	12	----> end
11	11	----> end
261	823	---> __fish_git_prompt_set_color __fish_git_prompt_color_cleanstate
40	40	----> set -l user_variable_name "$argv[1]"
88	88	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
35	35	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
61	88	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
49	49	----> if not set -q $variable
245	955	---> __fish_git_prompt_set_color __fish_git_prompt_color_invalidstate
36	36	----> set -l user_variable_name "$argv[1]"
121	121	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
25	25	----> set -l default default_done
53	86	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
59	85	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
44	44	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
281	1161	---> __fish_git_prompt_set_color __fish_git_prompt_color_upstream
37	37	----> set -l user_variable_name "$argv[1]"
126	126	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
26	26	----> set -l default default_done
55	88	----> switch (count $argv)
33	33	-----> count $argv
46	46	----> set default $___fish_git_prompt_color
37	37	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
133	218	----> if test (count $user_variable) -eq 2
85	85	-----> count $user_variable
42	42	----> set -l variable _$user_variable_name
41	41	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
41	41	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
9	9	----> end
115	115	---> if test -n "$__fish_git_prompt_showcolorhints"
258	1075	---> __fish_git_prompt_set_color __fish_git_prompt_color_flags
45	45	----> set -l user_variable_name "$argv[1]"
37	37	----> set -l user_variable $$user_variable_name
30	30	----> set -l user_variable_bright
26	26	----> set -l default default_done
56	90	----> switch (count $argv)
34	34	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
56	99	----> if test (count $user_variable) -eq 2
43	43	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
30	30	----> if test -n "$user_variable_bright"
68	109	----> set -g $variable (set_color $user_variable)
41	41	-----> set_color $user_variable
12	12	----> end
65	92	----> set -g $variable_done (set_color normal)
27	27	-----> set_color normal
10	10	----> else
10	10	----> end
269	1056	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch
36	36	----> set -l user_variable_name "$argv[1]"
122	122	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
25	25	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
35	35	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
89	118	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
42	42	----> set -l variable _$user_variable_name
53	53	----> set -l variable_done "$variable"_done
44	44	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
47	47	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
11	11	----> end
282	971	---> __fish_git_prompt_set_color __fish_git_prompt_color_dirtystate  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
41	41	----> set -l user_variable_name "$argv[1]"
82	82	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
29	29	----> set -l default default_done
53	96	----> switch (count $argv)
43	43	-----> count $argv
38	38	----> set default "$argv[2]"
37	37	----> set default_done "$argv[3]"
11	11	----> end
55	86	----> if test (count $user_variable) -eq 2
31	31	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
39	39	----> set -g $variable $default
39	39	----> set -g $variable_done $default_done
10	10	----> end
10	10	----> end
284	994	---> __fish_git_prompt_set_color __fish_git_prompt_color_stagedstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
37	37	----> set -l user_variable_name "$argv[1]"
113	113	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
25	25	----> set -l default default_done
54	97	----> switch (count $argv)
43	43	-----> count $argv
37	37	----> set default "$argv[2]"
35	35	----> set default_done "$argv[3]"
12	12	----> end
58	84	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
39	39	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
10	10	----> end
9	9	----> end
10	10	---> end
318	992	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch_detached (set_color red)
28	28	----> set_color red
39	39	----> set -l user_variable_name "$argv[1]"
116	116	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	91	----> switch (count $argv)
37	37	-----> count $argv
37	37	----> set default "$argv[2]"
59	88	----> set default_done (set_color normal)
29	29	-----> set_color normal
11	11	----> case 3 # Both defaults given
54	83	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
53	53	----> if not set -q $variable
285	1026	---> __fish_git_prompt_set_color __fish_git_prompt_color_stashstate      $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
60	60	----> set -l user_variable_name "$argv[1]"
86	86	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
27	27	----> set -l default default_done
53	96	----> switch (count $argv)
43	43	-----> count $argv
38	38	----> set default "$argv[2]"
44	44	----> set default_done "$argv[3]"
11	11	----> end
57	84	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
47	47	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
272	1028	---> __fish_git_prompt_set_color __fish_git_prompt_color_untrackedfiles  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
47	47	----> set -l user_variable_name "$argv[1]"
113	113	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	97	----> switch (count $argv)
43	43	-----> count $argv
38	38	----> set default "$argv[2]"
37	37	----> set default_done "$argv[3]"
11	11	----> end
61	87	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
49	49	----> set -g $variable $default
48	48	----> set -g $variable_done $default_done
14	14	----> end
15	15	----> end
39	39	--> set -l branch_color $___fish_git_prompt_color_branch
48	48	--> set -l branch_done  $___fish_git_prompt_color_branch_done
108	108	--> if test -n "$__fish_git_prompt_showcolorhints"
37	37	--> if test -n "$w"
30	30	--> if test -n "$i"
28	28	--> if test -n "$s"
28	28	--> if test -n "$u"
107	3160	--> set b (/bin/sh -c 'echo "${1#refs/heads/}"' -- $b)
3053	3053	---> /bin/sh -c 'echo "${1#refs/heads/}"' -- $b
51	51	--> if test -n "$b"
41	41	--> set b "$branch_color$b$branch_done"
11	11	--> end
29	29	--> if test -n "$c"
27	27	--> if test -n "$r"
26	26	--> if test -n "$p"
53	53	--> set -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"
32	32	--> set -l f "$w$i$s$u"
27	27	--> if test -n "$f"
26	26	--> set -l format $argv[1]
28	28	--> if test -z "$format"
29	29	--> set format " (%s)"
10	10	--> end
210	210	--> printf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___git_ps_color_suffix_done"
24	24	-> if begin
61495	61495	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
28	28	-> end
26	26	-> echo
57	57	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
30	30	> echo $_ " "; 
43	109	> __fish_pwd
66	66	-> pwd
441	77395	> fish_prompt
78	78	-> set -l last_status $status
52	52	-> if not set -q __fish_prompt_hostname
55	55	-> if not set -q __fish_prompt_char
99	151	-> set -l normal (set_color normal)
52	52	--> set_color normal
88	127	-> set -l red (set_color red)
39	39	--> set_color red
93	135	-> set -l cyan (set_color cyan)
42	42	--> set_color cyan
95	139	-> set -l white (set_color white)
44	44	--> set_color white
92	143	-> set -l gray (set_color -o cyan)
51	51	--> set_color -o cyan
94	141	-> set -l brwhite (set_color -o white)
47	47	--> set_color -o white
116	440	-> set -g __fish_git_prompt_showdirtystate true
156	324	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
46	46	---> if status --is-interactive
67	67	---> if test $argv[3] = __fish_git_prompt_show_informative_status
41	41	---> commandline -f repaint ^/dev/null
14	14	---> end
65	358	-> set -g __fish_git_prompt_showuntrackedfiles true
142	293	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
40	40	---> if status --is-interactive
60	60	---> if test $argv[3] = __fish_git_prompt_show_informative_status
37	37	---> commandline -f repaint ^/dev/null
14	14	---> end
65	478	-> set -g __fish_git_prompt_showstashstate true
151	413	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
40	40	---> if status --is-interactive
167	167	---> if test $argv[3] = __fish_git_prompt_show_informative_status
41	41	---> commandline -f repaint ^/dev/null
14	14	---> end
101	2316	-> set -g __fish_git_prompt_color green
320	2215	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
45	45	---> if status --is-interactive
54	54	---> set -l var $argv[3]
51	51	---> set -e _$var
53	53	---> set -e _{$var}_done
116	116	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
71	71	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
54	54	---> set -e ___fish_git_prompt_color_$name
52	52	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
50	50	---> set -e ___fish_git_prompt_color_$name
51	51	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
49	49	---> set -e ___fish_git_prompt_color_$name
50	50	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
48	48	---> set -e ___fish_git_prompt_color_$name
52	52	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
50	50	---> set -e ___fish_git_prompt_color_$name
51	51	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
50	50	---> set -e ___fish_git_prompt_color_$name
51	51	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
49	49	---> set -e ___fish_git_prompt_color_$name
54	54	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
57	57	---> set -e ___fish_git_prompt_color_$name
57	57	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
51	51	---> set -e ___fish_git_prompt_color_$name
52	52	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
49	49	---> set -e ___fish_git_prompt_color_$name
51	51	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
50	50	---> set -e ___fish_git_prompt_color_$name
51	51	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
50	50	---> set -e ___fish_git_prompt_color_$name
49	49	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
14	14	---> end
43	43	---> commandline -f repaint ^/dev/null
14	14	---> end
70	7473	-> set -g __fish_git_prompt_color_flags red
345	7403	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
47	47	---> if status --is-interactive
177	177	---> set -l var $argv[3]
2546	2546	---> set -e _$var
190	190	---> set -e _{$var}_done
170	170	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
79	79	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
151	151	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
129	129	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
166	166	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
141	141	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
131	131	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
140	140	---> set -e ___fish_git_prompt_color_{$name}_done
66	66	---> end
215	215	---> set -e ___fish_git_prompt_color_$name
157	157	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
149	149	---> set -e ___fish_git_prompt_color_$name
157	157	---> set -e ___fish_git_prompt_color_{$name}_done
42	42	---> end
189	189	---> set -e ___fish_git_prompt_color_$name
185	185	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
154	154	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
14	14	---> end
46	46	---> commandline -f repaint ^/dev/null
15	15	---> end
58	58	-> set -l pcolor $gray
57	57	-> if test $last_status -ne 0
249	4563	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
184	4314	--> prompt_pwd
4130	4130	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
855	55736	-> __fish_git_prompt
181	3063	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2882	2882	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
58	58	--> test -n "$repo_info"; 
9	9	--> or return
40	40	--> set -l git_dir         $repo_info[1]
39	39	--> set -l inside_gitdir   $repo_info[2]
38	38	--> set -l bare_repo       $repo_info[3]
36	36	--> set -l inside_worktree $repo_info[4]
24	24	--> set -l short_sha
64	121	--> if test (count $repo_info) = 5
57	57	---> count $repo_info
39	39	--> set short_sha $repo_info[5]
12	12	--> end
950	4441	---> __fish_git_prompt_operation_branch_bare $repo_info
43	43	----> set -l git_dir         $argv[1]
38	38	----> set -l inside_gitdir   $argv[2]
36	36	----> set -l bare_repo       $argv[3]
23	23	----> set -l short_sha
57	109	----> if test (count $argv) = 5
52	52	-----> count $argv
38	38	----> set short_sha $argv[5]
12	12	----> end
24	24	----> set -l branch
23	23	----> set -l operation
24	24	----> set -l detached no
22	22	----> set -l bare
22	22	----> set -l step
23	23	----> set -l total
21	21	----> set -l os
54	54	----> if test -d $git_dir/rebase-merge
45	45	----> if test -d $git_dir/rebase-apply
11	11	----> end
47	47	----> if test -n "$step" -a -n "$total"
42	42	----> if test -z "$branch"
94	2553	----> set branch (command git symbolic-ref HEAD ^/dev/null; set os $status)
2377	2377	-----> command git symbolic-ref HEAD ^/dev/null; 
82	82	-----> set os $status
128	128	----> if test $os -ne 0
11	11	----> end
45	45	----> if test "true" = $inside_gitdir
27	27	----> echo $operation
27	27	----> echo $branch
23	23	----> echo $detached
20	20	----> echo $bare
35	35	--> set -l r $rbc[1] # current operation
36	36	--> set -l b $rbc[2] # current branch
33	33	--> set -l detached $rbc[3]
27	27	--> set -l w #dirty working directory
28	28	--> set -l i #staged changes
22	22	--> set -l s #stashes
21	21	--> set -l u #untracked
30	30	--> set -l c $rbc[4] # bare repository
22	22	--> set -l p #upstream
25	25	--> set -l informative_status
132	9378	--> __fish_git_prompt_validate_chars
146	560	---> __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate        '✔'
39	39	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
115	115	----> set -l user_variable $$user_variable_name
71	113	----> if test (count $argv) -ge 3
42	42	-----> count $argv
40	40	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
133	559	---> __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate        '*' '✚'
40	40	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
99	99	----> set -l user_variable $$user_variable_name
61	100	----> if test (count $argv) -ge 3
39	39	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
245	833	---> __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate      '#' '✖'
39	39	----> set -l user_variable_name "$argv[1]"
33	33	----> set -l char $argv[2]
94	94	----> set -l user_variable $$user_variable_name
59	97	----> if test (count $argv) -ge 3
38	38	-----> count $argv
39	39	----> if test -n "$__fish_git_prompt_show_informative_status"
60	60	----> end
110	110	----> set -l variable _$user_variable_name
59	59	----> set -l variable_done "$variable"_done
57	57	----> if not set -q $variable
153	595	---> __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate       '+' '●'
47	47	----> set -l user_variable_name "$argv[1]"
34	34	----> set -l char $argv[2]
102	102	----> set -l user_variable $$user_variable_name
65	105	----> if test (count $argv) -ge 3
40	40	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
249	914	---> __fish_git_prompt_set_char __fish_git_prompt_char_stashstate        '$'
39	39	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
131	131	----> set -l user_variable $$user_variable_name
115	214	----> if test (count $argv) -ge 3
99	99	-----> count $argv
81	81	----> set -l variable _$user_variable_name
80	80	----> set -l variable_done "$variable"_done
90	90	----> if not set -q $variable
220	920	---> __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator    ' ' '|'
72	72	----> set -l user_variable_name "$argv[1]"
51	51	----> set -l char $argv[2]
153	153	----> set -l user_variable $$user_variable_name
104	180	----> if test (count $argv) -ge 3
76	76	-----> count $argv
54	54	----> if test -n "$__fish_git_prompt_show_informative_status"
17	17	----> end
58	58	----> set -l variable _$user_variable_name
58	58	----> set -l variable_done "$variable"_done
57	57	----> if not set -q $variable
213	905	---> __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles    '%' '…'
74	74	----> set -l user_variable_name "$argv[1]"
78	78	----> set -l char $argv[2]
134	134	----> set -l user_variable $$user_variable_name
101	162	----> if test (count $argv) -ge 3
61	61	-----> count $argv
54	54	----> if test -n "$__fish_git_prompt_show_informative_status"
16	16	----> end
59	59	----> set -l variable _$user_variable_name
59	59	----> set -l variable_done "$variable"_done
56	56	----> if not set -q $variable
203	846	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead    '>' '↑'
71	71	----> set -l user_variable_name "$argv[1]"
50	50	----> set -l char $argv[2]
127	127	----> set -l user_variable $$user_variable_name
94	153	----> if test (count $argv) -ge 3
59	59	-----> count $argv
52	52	----> if test -n "$__fish_git_prompt_show_informative_status"
17	17	----> end
58	58	----> set -l variable _$user_variable_name
59	59	----> set -l variable_done "$variable"_done
56	56	----> if not set -q $variable
203	848	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind   '<' '↓'
61	61	----> set -l user_variable_name "$argv[1]"
49	49	----> set -l char $argv[2]
139	139	----> set -l user_variable $$user_variable_name
97	156	----> if test (count $argv) -ge 3
59	59	-----> count $argv
53	53	----> if test -n "$__fish_git_prompt_show_informative_status"
17	17	----> end
58	58	----> set -l variable _$user_variable_name
57	57	----> set -l variable_done "$variable"_done
55	55	----> if not set -q $variable
225	748	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
60	60	----> set -l user_variable_name "$argv[1]"
47	47	----> set -l char $argv[2]
123	123	----> set -l user_variable $$user_variable_name
68	115	----> if test (count $argv) -ge 3
47	47	-----> count $argv
60	60	----> set -l variable _$user_variable_name
62	62	----> set -l variable_done "$variable"_done
56	56	----> if not set -q $variable
231	871	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal    '='
75	75	----> set -l user_variable_name "$argv[1]"
55	55	----> set -l char $argv[2]
128	128	----> set -l user_variable $$user_variable_name
101	190	----> if test (count $argv) -ge 3
89	89	-----> count $argv
64	64	----> set -l variable _$user_variable_name
68	68	----> set -l variable_done "$variable"_done
60	60	----> if not set -q $variable
168	647	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix   ''
64	64	----> set -l user_variable_name "$argv[1]"
51	51	----> set -l char $argv[2]
129	129	----> set -l user_variable $$user_variable_name
75	117	----> if test (count $argv) -ge 3
42	42	-----> count $argv
41	41	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
53	53	--> if test "true" = $inside_worktree
111	111	--> if test -n "$__fish_git_prompt_show_informative_status"
40	40	--> if test -n "$__fish_git_prompt_showdirtystate"
111	2880	--> set -l config (command git config --bool bash.showDirtyState)
2769	2769	---> command git config --bool bash.showDirtyState
65	65	--> if test "$config" != "false"
89	3544	--> set w (__fish_git_prompt_dirty)
147	3455	---> __fish_git_prompt_dirty
29	29	----> set -l dirty
24	24	----> set -l os
3063	3063	----> command git diff --no-ext-diff --quiet --exit-code
90	90	----> set os $status
62	62	----> if test $os -ne 0
40	40	----> echo $dirty
75	4124	--> set i (__fish_git_prompt_staged $short_sha)
133	4049	---> __fish_git_prompt_staged $short_sha
40	40	----> set -l short_sha $argv[1]
25	25	----> set -l staged
42	42	----> if test -n "$short_sha"
3726	3726	----> command git diff-index --cached --quiet HEAD --; 
37	37	----> or set staged $___fish_git_prompt_char_stagedstate
17	17	----> else
29	29	----> echo $staged
12	12	--> end
12	12	--> end
68	68	--> if test -n "$__fish_git_prompt_showstashstate" -a -r $git_dir/refs/stash
41	41	--> if test -n "$__fish_git_prompt_showuntrackedfiles"
97	2784	--> set -l config (command git config --bool bash.showUntrackedFiles)
2687	2687	---> command git config --bool bash.showUntrackedFiles
59	59	--> if test "$config" != false
3276	3276	--> if command git ls-files --others --exclude-standard --error-unmatch -- '*' >/dev/null ^/dev/null
12	12	--> end
11	11	--> end
11	11	--> end
173	173	--> if test -n "$__fish_git_prompt_showupstream" -o "$__fish_git_prompt_show_informative_status"
10	10	--> end
179	16097	--> __fish_git_prompt_validate_colors
273	1121	---> __fish_git_prompt_set_color __fish_git_prompt_color '' ''
48	48	----> set -l user_variable_name "$argv[1]"
41	41	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
33	33	----> set -l default default_done
60	99	----> switch (count $argv)
39	39	-----> count $argv
36	36	----> set default "$argv[2]"
34	34	----> set default_done "$argv[3]"
12	12	----> end
55	85	----> if test (count $user_variable) -eq 2
30	30	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
40	40	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
37	37	----> if test -n "$user_variable"
30	30	----> if test -n "$user_variable_bright"
71	124	----> set -g $variable (set_color $user_variable)
53	53	-----> set_color $user_variable
12	12	----> end
68	95	----> set -g $variable_done (set_color normal)
27	27	-----> set_color normal
11	11	----> else
10	10	----> end
248	981	---> __fish_git_prompt_set_color __fish_git_prompt_color_prefix
37	37	----> set -l user_variable_name "$argv[1]"
109	109	----> set -l user_variable $$user_variable_name
34	34	----> set -l user_variable_bright
28	28	----> set -l default default_done
58	94	----> switch (count $argv)
36	36	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
37	37	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
58	85	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
52	52	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
39	39	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
311	1199	---> __fish_git_prompt_set_color __fish_git_prompt_color_suffix
36	36	----> set -l user_variable_name "$argv[1]"
123	123	----> set -l user_variable $$user_variable_name
33	33	----> set -l user_variable_bright
28	28	----> set -l default default_done
58	94	----> switch (count $argv)
36	36	-----> count $argv
57	57	----> set default $___fish_git_prompt_color
92	92	----> set default_done $___fish_git_prompt_color_done
18	18	----> case 2 # One default given, use normal for done
98	130	----> if test (count $user_variable) -eq 2
32	32	-----> count $user_variable
41	41	----> set -l variable _$user_variable_name
45	45	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
43	43	----> set -g $variable $default
47	47	----> set -g $variable_done $default_done
12	12	----> end
11	11	----> end
254	987	---> __fish_git_prompt_set_color __fish_git_prompt_color_bare
40	40	----> set -l user_variable_name "$argv[1]"
105	105	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
27	27	----> set -l default default_done
58	94	----> switch (count $argv)
36	36	-----> count $argv
37	37	----> set default $___fish_git_prompt_color
37	37	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
60	86	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
48	48	----> if not set -q $variable
40	40	----> if test -n "$user_variable"
40	40	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
9	9	----> end
243	942	---> __fish_git_prompt_set_color __fish_git_prompt_color_merging
36	36	----> set -l user_variable_name "$argv[1]"
112	112	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
54	79	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
38	38	----> if test -n "$user_variable"
40	40	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
271	910	---> __fish_git_prompt_set_color __fish_git_prompt_color_cleanstate
37	37	----> set -l user_variable_name "$argv[1]"
102	102	----> set -l user_variable $$user_variable_name
63	63	----> set -l user_variable_bright
37	37	----> set -l default default_done
65	103	----> switch (count $argv)
38	38	-----> count $argv
37	37	----> set default $___fish_git_prompt_color
37	37	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
66	93	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
267	970	---> __fish_git_prompt_set_color __fish_git_prompt_color_invalidstate
43	43	----> set -l user_variable_name "$argv[1]"
106	106	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	86	----> switch (count $argv)
32	32	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
59	85	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
44	44	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
9	9	----> end
243	944	---> __fish_git_prompt_set_color __fish_git_prompt_color_upstream
37	37	----> set -l user_variable_name "$argv[1]"
115	115	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	86	----> switch (count $argv)
32	32	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
55	87	----> if test (count $user_variable) -eq 2
32	32	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
39	39	----> set -g $variable $default
39	39	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
110	110	---> if test -n "$__fish_git_prompt_showcolorhints"
270	1165	---> __fish_git_prompt_set_color __fish_git_prompt_color_flags
73	73	----> set -l user_variable_name "$argv[1]"
46	46	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
26	26	----> set -l default default_done
56	90	----> switch (count $argv)
34	34	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
63	94	----> if test (count $user_variable) -eq 2
31	31	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
37	37	----> if test -n "$user_variable"
32	32	----> if test -n "$user_variable_bright"
70	122	----> set -g $variable (set_color $user_variable)
52	52	-----> set_color $user_variable
21	21	----> end
72	101	----> set -g $variable_done (set_color normal)
29	29	-----> set_color normal
11	11	----> else
10	10	----> end
258	982	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch
39	39	----> set -l user_variable_name "$argv[1]"
105	105	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
27	27	----> set -l default default_done
54	88	----> switch (count $argv)
34	34	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
37	37	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
66	93	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
43	43	----> set -g $variable $default
48	48	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
330	1298	---> __fish_git_prompt_set_color __fish_git_prompt_color_dirtystate  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
42	42	----> set -l user_variable_name "$argv[1]"
110	110	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	98	----> switch (count $argv)
44	44	-----> count $argv
45	45	----> set default "$argv[2]"
38	38	----> set default_done "$argv[3]"
11	11	----> end
111	182	----> if test (count $user_variable) -eq 2
71	71	-----> count $user_variable
70	70	----> set -l variable _$user_variable_name
57	57	----> set -l variable_done "$variable"_done
90	90	----> if not set -q $variable
61	61	----> if test -n "$user_variable"
46	46	----> set -g $variable $default
44	44	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
285	1052	---> __fish_git_prompt_set_color __fish_git_prompt_color_stagedstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
42	42	----> set -l user_variable_name "$argv[1]"
111	111	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
33	33	----> set -l default default_done
63	114	----> switch (count $argv)
51	51	-----> count $argv
40	40	----> set default "$argv[2]"
38	38	----> set default_done "$argv[3]"
11	11	----> end
60	86	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
44	44	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
11	11	---> end
313	1027	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch_detached (set_color red)
36	36	----> set_color red
42	42	----> set -l user_variable_name "$argv[1]"
121	121	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
28	28	----> set -l default default_done
59	101	----> switch (count $argv)
42	42	-----> count $argv
47	47	----> set default "$argv[2]"
63	95	----> set default_done (set_color normal)
32	32	-----> set_color normal
12	12	----> case 3 # Both defaults given
57	84	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
303	1215	---> __fish_git_prompt_set_color __fish_git_prompt_color_stashstate      $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
46	46	----> set -l user_variable_name "$argv[1]"
177	177	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
27	27	----> set -l default default_done
65	123	----> switch (count $argv)
58	58	-----> count $argv
41	41	----> set default "$argv[2]"
39	39	----> set default_done "$argv[3]"
12	12	----> end
103	143	----> if test (count $user_variable) -eq 2
40	40	-----> count $user_variable
41	41	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
43	43	----> if not set -q $variable
44	44	----> if test -n "$user_variable"
43	43	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
276	1004	---> __fish_git_prompt_set_color __fish_git_prompt_color_untrackedfiles  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
47	47	----> set -l user_variable_name "$argv[1]"
92	92	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
55	99	----> switch (count $argv)
44	44	-----> count $argv
44	44	----> set default "$argv[2]"
38	38	----> set default_done "$argv[3]"
12	12	----> end
58	84	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
50	50	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
44	44	----> set -g $variable $default
39	39	----> set -g $variable_done $default_done
10	10	----> end
9	9	----> end
35	35	--> set -l branch_color $___fish_git_prompt_color_branch
34	34	--> set -l branch_done  $___fish_git_prompt_color_branch_done
106	106	--> if test -n "$__fish_git_prompt_showcolorhints"
40	40	--> if test -n "$w"
45	45	--> if test -n "$i"
29	29	--> if test -n "$s"
27	27	--> if test -n "$u"
237	2713	--> set b (/bin/sh -c 'echo "${1#refs/heads/}"' -- $b)
2476	2476	---> /bin/sh -c 'echo "${1#refs/heads/}"' -- $b
184	184	--> if test -n "$b"
103	103	--> set b "$branch_color$b$branch_done"
15	15	--> end
38	38	--> if test -n "$c"
48	48	--> if test -n "$r"
29	29	--> if test -n "$p"
59	59	--> set -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"
35	35	--> set -l f "$w$i$s$u"
30	30	--> if test -n "$f"
29	29	--> set -l format $argv[1]
30	30	--> if test -z "$format"
32	32	--> set format " (%s)"
12	12	--> end
173	173	--> printf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___git_ps_color_suffix_done"
21	21	-> if begin
4312	4312	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
36	36	-> end
27	27	-> echo
58	58	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
68	172	> __fish_pwd
104	104	-> pwd
47	47	> echo $_ " "; 
52	111	> __fish_pwd
59	59	-> pwd
11689	11689	> git status
410	70965	> fish_prompt
154	154	-> set -l last_status $status
57	57	-> if not set -q __fish_prompt_hostname
54	54	-> if not set -q __fish_prompt_char
73	130	-> set -l normal (set_color normal)
57	57	--> set_color normal
61	90	-> set -l red (set_color red)
29	29	--> set_color red
57	84	-> set -l cyan (set_color cyan)
27	27	--> set_color cyan
57	84	-> set -l white (set_color white)
27	27	--> set_color white
63	90	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
59	87	-> set -l brwhite (set_color -o white)
28	28	--> set_color -o white
47	329	-> set -g __fish_git_prompt_showdirtystate true
146	282	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
33	33	---> if status --is-interactive
51	51	---> if test $argv[3] = __fish_git_prompt_show_informative_status
42	42	---> commandline -f repaint ^/dev/null
10	10	---> end
46	238	-> set -g __fish_git_prompt_showuntrackedfiles true
89	192	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
42	42	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
53	403	-> set -g __fish_git_prompt_showstashstate true
170	350	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
48	48	---> if status --is-interactive
70	70	---> if test $argv[3] = __fish_git_prompt_show_informative_status
45	45	---> commandline -f repaint ^/dev/null
17	17	---> end
91	1896	-> set -g __fish_git_prompt_color green
267	1805	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
39	39	---> if status --is-interactive
40	40	---> set -l var $argv[3]
42	42	---> set -e _$var
47	47	---> set -e _{$var}_done
84	84	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
49	49	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
42	42	---> set -e ___fish_git_prompt_color_$name
39	39	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
39	39	---> set -e ___fish_git_prompt_color_$name
35	35	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
37	37	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
35	35	---> set -e ___fish_git_prompt_color_$name
34	34	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
33	33	---> set -e ___fish_git_prompt_color_$name
36	36	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
36	36	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
10	10	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
73	73	---> set -e ___fish_git_prompt_color_{$name}_done
51	51	---> end
61	61	---> set -e ___fish_git_prompt_color_$name
56	56	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
58	58	---> set -e ___fish_git_prompt_color_$name
57	57	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
16	16	---> end
45	45	---> commandline -f repaint ^/dev/null
18	18	---> end
121	4793	-> set -g __fish_git_prompt_color_flags red
359	4672	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
130	130	---> if status --is-interactive
192	192	---> set -l var $argv[3]
214	214	---> set -e _$var
169	169	---> set -e _{$var}_done
134	134	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
77	77	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
195	195	---> set -e ___fish_git_prompt_color_$name
160	160	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
174	174	---> set -e ___fish_git_prompt_color_$name
176	176	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
126	126	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
136	136	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
118	118	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
128	128	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
125	125	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
103	103	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
134	134	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
9	9	---> end
34	34	---> commandline -f repaint ^/dev/null
10	10	---> end
39	39	-> set -l pcolor $gray
44	44	-> if test $last_status -ne 0
263	3532	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
193	3269	--> prompt_pwd
3076	3076	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
896	54129	-> __fish_git_prompt
203	3075	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2872	2872	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
78	78	--> test -n "$repo_info"; 
14	14	--> or return
62	62	--> set -l git_dir         $repo_info[1]
93	93	--> set -l inside_gitdir   $repo_info[2]
62	62	--> set -l bare_repo       $repo_info[3]
39	39	--> set -l inside_worktree $repo_info[4]
26	26	--> set -l short_sha
75	137	--> if test (count $repo_info) = 5
62	62	---> count $repo_info
45	45	--> set short_sha $repo_info[5]
13	13	--> end
891	5025	---> __fish_git_prompt_operation_branch_bare $repo_info
49	49	----> set -l git_dir         $argv[1]
40	40	----> set -l inside_gitdir   $argv[2]
37	37	----> set -l bare_repo       $argv[3]
24	24	----> set -l short_sha
63	110	----> if test (count $argv) = 5
47	47	-----> count $argv
38	38	----> set short_sha $argv[5]
13	13	----> end
34	34	----> set -l branch
36	36	----> set -l operation
31	31	----> set -l detached no
22	22	----> set -l bare
22	22	----> set -l step
23	23	----> set -l total
22	22	----> set -l os
75	75	----> if test -d $git_dir/rebase-merge
59	59	----> if test -d $git_dir/rebase-apply
11	11	----> end
61	61	----> if test -n "$step" -a -n "$total"
44	44	----> if test -z "$branch"
175	2838	----> set branch (command git symbolic-ref HEAD ^/dev/null; set os $status)
2443	2443	-----> command git symbolic-ref HEAD ^/dev/null; 
220	220	-----> set os $status
178	178	----> if test $os -ne 0
26	26	----> end
114	114	----> if test "true" = $inside_gitdir
62	62	----> echo $operation
65	65	----> echo $branch
55	55	----> echo $detached
45	45	----> echo $bare
83	83	--> set -l r $rbc[1] # current operation
99	99	--> set -l b $rbc[2] # current branch
80	80	--> set -l detached $rbc[3]
54	54	--> set -l w #dirty working directory
51	51	--> set -l i #staged changes
49	49	--> set -l s #stashes
50	50	--> set -l u #untracked
71	71	--> set -l c $rbc[4] # bare repository
63	63	--> set -l p #upstream
88	88	--> set -l informative_status
152	6751	--> __fish_git_prompt_validate_chars
160	584	---> __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate        '✔'
48	48	----> set -l user_variable_name "$argv[1]"
33	33	----> set -l char $argv[2]
117	117	----> set -l user_variable $$user_variable_name
69	113	----> if test (count $argv) -ge 3
44	44	-----> count $argv
38	38	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
129	545	---> __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate        '*' '✚'
39	39	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
89	89	----> set -l user_variable $$user_variable_name
62	100	----> if test (count $argv) -ge 3
38	38	-----> count $argv
36	36	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
131	553	---> __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate      '#' '✖'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
90	90	----> set -l user_variable $$user_variable_name
66	105	----> if test (count $argv) -ge 3
39	39	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
160	580	---> __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate       '+' '●'
42	42	----> set -l user_variable_name "$argv[1]"
35	35	----> set -l char $argv[2]
92	92	----> set -l user_variable $$user_variable_name
61	98	----> if test (count $argv) -ge 3
37	37	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
134	501	---> __fish_git_prompt_set_char __fish_git_prompt_char_stashstate        '$'
44	44	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
88	88	----> set -l user_variable $$user_variable_name
61	96	----> if test (count $argv) -ge 3
35	35	-----> count $argv
37	37	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
123	537	---> __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator    ' ' '|'
43	43	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
88	88	----> set -l user_variable $$user_variable_name
60	108	----> if test (count $argv) -ge 3
48	48	-----> count $argv
32	32	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
34	34	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
33	33	----> if not set -q $variable
126	559	---> __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles    '%' '…'
36	36	----> set -l user_variable_name "$argv[1]"
28	28	----> set -l char $argv[2]
116	116	----> set -l user_variable $$user_variable_name
65	104	----> if test (count $argv) -ge 3
39	39	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
9	9	----> end
37	37	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
34	34	----> if not set -q $variable
149	636	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead    '>' '↑'
39	39	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
117	117	----> set -l user_variable $$user_variable_name
76	123	----> if test (count $argv) -ge 3
47	47	-----> count $argv
38	38	----> if test -n "$__fish_git_prompt_show_informative_status"
16	16	----> end
41	41	----> set -l variable _$user_variable_name
45	45	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
129	543	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind   '<' '↓'
41	41	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
82	82	----> set -l user_variable $$user_variable_name
60	104	----> if test (count $argv) -ge 3
44	44	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
129	479	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
38	38	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
75	75	----> set -l user_variable $$user_variable_name
69	101	----> if test (count $argv) -ge 3
32	32	-----> count $argv
39	39	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
33	33	----> if not set -q $variable
143	579	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal    '='
36	36	----> set -l user_variable_name "$argv[1]"
28	28	----> set -l char $argv[2]
109	109	----> set -l user_variable $$user_variable_name
87	129	----> if test (count $argv) -ge 3
42	42	-----> count $argv
55	55	----> set -l variable _$user_variable_name
41	41	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
135	503	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix   ''
40	40	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
88	88	----> set -l user_variable $$user_variable_name
62	98	----> if test (count $argv) -ge 3
36	36	-----> count $argv
38	38	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
50	50	--> if test "true" = $inside_worktree
80	80	--> if test -n "$__fish_git_prompt_show_informative_status"
38	38	--> if test -n "$__fish_git_prompt_showdirtystate"
95	2298	--> set -l config (command git config --bool bash.showDirtyState)
2203	2203	---> command git config --bool bash.showDirtyState
57	57	--> if test "$config" != "false"
64	3521	--> set w (__fish_git_prompt_dirty)
114	3457	---> __fish_git_prompt_dirty
26	26	----> set -l dirty
23	23	----> set -l os
3162	3162	----> command git diff --no-ext-diff --quiet --exit-code
65	65	----> set os $status
42	42	----> if test $os -ne 0
25	25	----> echo $dirty
73	4407	--> set i (__fish_git_prompt_staged $short_sha)
121	4334	---> __fish_git_prompt_staged $short_sha
41	41	----> set -l short_sha $argv[1]
26	26	----> set -l staged
42	42	----> if test -n "$short_sha"
4024	4024	----> command git diff-index --cached --quiet HEAD --; 
35	35	----> or set staged $___fish_git_prompt_char_stagedstate
16	16	----> else
29	29	----> echo $staged
12	12	--> end
12	12	--> end
70	70	--> if test -n "$__fish_git_prompt_showstashstate" -a -r $git_dir/refs/stash
40	40	--> if test -n "$__fish_git_prompt_showuntrackedfiles"
99	2720	--> set -l config (command git config --bool bash.showUntrackedFiles)
2621	2621	---> command git config --bool bash.showUntrackedFiles
59	59	--> if test "$config" != false
3324	3324	--> if command git ls-files --others --exclude-standard --error-unmatch -- '*' >/dev/null ^/dev/null
12	12	--> end
13	13	--> end
11	11	--> end
161	161	--> if test -n "$__fish_git_prompt_showupstream" -o "$__fish_git_prompt_show_informative_status"
11	11	--> end
178	15948	--> __fish_git_prompt_validate_colors
358	1597	---> __fish_git_prompt_set_color __fish_git_prompt_color '' ''
54	54	----> set -l user_variable_name "$argv[1]"
40	40	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
26	26	----> set -l default default_done
60	100	----> switch (count $argv)
40	40	-----> count $argv
40	40	----> set default "$argv[2]"
35	35	----> set default_done "$argv[3]"
12	12	----> end
61	94	----> if test (count $user_variable) -eq 2
33	33	-----> count $user_variable
47	47	----> set -l variable _$user_variable_name
111	111	----> set -l variable_done "$variable"_done
74	74	----> if not set -q $variable
80	80	----> if test -n "$user_variable"
61	61	----> if test -n "$user_variable_bright"
136	282	----> set -g $variable (set_color $user_variable)
146	146	-----> set_color $user_variable
16	16	----> end
86	118	----> set -g $variable_done (set_color normal)
32	32	-----> set_color normal
12	12	----> else
11	11	----> end
256	985	---> __fish_git_prompt_set_color __fish_git_prompt_color_prefix
49	49	----> set -l user_variable_name "$argv[1]"
97	97	----> set -l user_variable $$user_variable_name
35	35	----> set -l user_variable_bright
27	27	----> set -l default default_done
55	96	----> switch (count $argv)
41	41	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
37	37	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
57	84	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
45	45	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
38	38	----> if test -n "$user_variable"
39	39	----> set -g $variable $default
39	39	----> set -g $variable_done $default_done
10	10	----> end
9	9	----> end
258	1010	---> __fish_git_prompt_set_color __fish_git_prompt_color_suffix
36	36	----> set -l user_variable_name "$argv[1]"
106	106	----> set -l user_variable $$user_variable_name
34	34	----> set -l user_variable_bright
28	28	----> set -l default default_done
58	94	----> switch (count $argv)
36	36	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
37	37	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
57	84	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
45	45	----> set -l variable_done "$variable"_done
46	46	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
48	48	----> set -g $variable $default
47	47	----> set -g $variable_done $default_done
14	14	----> end
14	14	----> end
251	977	---> __fish_git_prompt_set_color __fish_git_prompt_color_bare
69	69	----> set -l user_variable_name "$argv[1]"
89	89	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
31	31	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
56	88	----> if test (count $user_variable) -eq 2
32	32	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
49	49	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
39	39	----> set -g $variable $default
39	39	----> set -g $variable_done $default_done
10	10	----> end
10	10	----> end
243	941	---> __fish_git_prompt_set_color __fish_git_prompt_color_merging
36	36	----> set -l user_variable_name "$argv[1]"
113	113	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
55	80	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
41	41	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
39	39	----> set -g $variable $default
39	39	----> set -g $variable_done $default_done
11	11	----> end
9	9	----> end
281	901	---> __fish_git_prompt_set_color __fish_git_prompt_color_cleanstate
37	37	----> set -l user_variable_name "$argv[1]"
119	119	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	86	----> switch (count $argv)
32	32	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
33	33	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
82	113	----> if test (count $user_variable) -eq 2
31	31	-----> count $user_variable
49	49	----> set -l variable _$user_variable_name
40	40	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
252	946	---> __fish_git_prompt_set_color __fish_git_prompt_color_invalidstate
46	46	----> set -l user_variable_name "$argv[1]"
81	81	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
25	25	----> set -l default default_done
53	86	----> switch (count $argv)
33	33	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
62	89	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
48	48	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
45	45	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
10	10	----> end
9	9	----> end
241	942	---> __fish_git_prompt_set_color __fish_git_prompt_color_upstream
36	36	----> set -l user_variable_name "$argv[1]"
113	113	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	86	----> switch (count $argv)
32	32	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
54	79	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
46	46	----> set -g $variable $default
44	44	----> set -g $variable_done $default_done
10	10	----> end
10	10	----> end
111	111	---> if test -n "$__fish_git_prompt_showcolorhints"
268	1128	---> __fish_git_prompt_set_color __fish_git_prompt_color_flags
42	42	----> set -l user_variable_name "$argv[1]"
35	35	----> set -l user_variable $$user_variable_name
23	23	----> set -l user_variable_bright
24	24	----> set -l default default_done
53	90	----> switch (count $argv)
37	37	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
54	81	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
49	49	----> if not set -q $variable
37	37	----> if test -n "$user_variable"
46	46	----> if test -n "$user_variable_bright"
80	129	----> set -g $variable (set_color $user_variable)
49	49	-----> set_color $user_variable
12	12	----> end
79	117	----> set -g $variable_done (set_color normal)
38	38	-----> set_color normal
12	12	----> else
10	10	----> end
248	947	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch
40	40	----> set -l user_variable_name "$argv[1]"
91	91	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
52	90	----> switch (count $argv)
38	38	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
56	82	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
52	52	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
40	40	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
266	990	---> __fish_git_prompt_set_color __fish_git_prompt_color_dirtystate  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
39	39	----> set -l user_variable_name "$argv[1]"
112	112	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	96	----> switch (count $argv)
42	42	-----> count $argv
37	37	----> set default "$argv[2]"
36	36	----> set default_done "$argv[3]"
11	11	----> end
61	87	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
39	39	----> set -g $variable $default
46	46	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
275	1058	---> __fish_git_prompt_set_color __fish_git_prompt_color_stagedstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
38	38	----> set -l user_variable_name "$argv[1]"
115	115	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	97	----> switch (count $argv)
43	43	-----> count $argv
37	37	----> set default "$argv[2]"
44	44	----> set default_done "$argv[3]"
12	12	----> end
67	96	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
59	59	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
43	43	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
10	10	---> end
306	950	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch_detached (set_color red)
29	29	----> set_color red
47	47	----> set -l user_variable_name "$argv[1]"
82	82	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
26	26	----> set -l default default_done
52	89	----> switch (count $argv)
37	37	-----> count $argv
37	37	----> set default "$argv[2]"
67	97	----> set default_done (set_color normal)
30	30	-----> set_color normal
12	12	----> case 3 # Both defaults given
56	82	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
45	45	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
264	951	---> __fish_git_prompt_set_color __fish_git_prompt_color_stashstate      $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
38	38	----> set -l user_variable_name "$argv[1]"
98	98	----> set -l user_variable $$user_variable_name
35	35	----> set -l user_variable_bright
25	25	----> set -l default default_done
50	89	----> switch (count $argv)
39	39	-----> count $argv
40	40	----> set default "$argv[2]"
35	35	----> set default_done "$argv[3]"
11	11	----> end
53	77	----> if test (count $user_variable) -eq 2
24	24	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
39	39	----> set -g $variable_done $default_done
10	10	----> end
9	9	----> end
407	1326	---> __fish_git_prompt_set_color __fish_git_prompt_color_untrackedfiles  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
38	38	----> set -l user_variable_name "$argv[1]"
127	127	----> set -l user_variable $$user_variable_name
35	35	----> set -l user_variable_bright
28	28	----> set -l default default_done
77	152	----> switch (count $argv)
75	75	-----> count $argv
68	68	----> set default "$argv[2]"
65	65	----> set default_done "$argv[3]"
20	20	----> end
78	120	----> if test (count $user_variable) -eq 2
42	42	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
49	49	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
37	37	--> set -l branch_color $___fish_git_prompt_color_branch
38	38	--> set -l branch_done  $___fish_git_prompt_color_branch_done
109	109	--> if test -n "$__fish_git_prompt_showcolorhints"
33	33	--> if test -n "$w"
29	29	--> if test -n "$i"
27	27	--> if test -n "$s"
28	28	--> if test -n "$u"
123	3194	--> set b (/bin/sh -c 'echo "${1#refs/heads/}"' -- $b)
3071	3071	---> /bin/sh -c 'echo "${1#refs/heads/}"' -- $b
56	56	--> if test -n "$b"
46	46	--> set b "$branch_color$b$branch_done"
13	13	--> end
33	33	--> if test -n "$c"
32	32	--> if test -n "$r"
29	29	--> if test -n "$p"
52	52	--> set -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"
35	35	--> set -l f "$w$i$s$u"
30	30	--> if test -n "$f"
31	31	--> set -l format $argv[1]
35	35	--> if test -z "$format"
34	34	--> set format " (%s)"
12	12	--> end
206	206	--> printf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___git_ps_color_suffix_done"
42	42	-> if begin
4155	4155	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
41	41	-> end
26	26	-> echo
58	58	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
44	107	> __fish_pwd
63	63	-> pwd
413	73423	> fish_prompt
43	43	-> set -l last_status $status
31	31	-> if not set -q __fish_prompt_hostname
38	38	-> if not set -q __fish_prompt_char
103	158	-> set -l normal (set_color normal)
55	55	--> set_color normal
96	142	-> set -l red (set_color red)
46	46	--> set_color red
66	95	-> set -l cyan (set_color cyan)
29	29	--> set_color cyan
58	85	-> set -l white (set_color white)
27	27	--> set_color white
57	84	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
57	85	-> set -l brwhite (set_color -o white)
28	28	--> set_color -o white
48	269	-> set -g __fish_git_prompt_showdirtystate true
103	221	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
30	30	---> if status --is-interactive
51	51	---> if test $argv[3] = __fish_git_prompt_show_informative_status
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
43	232	-> set -g __fish_git_prompt_showuntrackedfiles true
87	189	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
27	27	---> if status --is-interactive
41	41	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
42	231	-> set -g __fish_git_prompt_showstashstate true
85	189	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
30	30	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
50	1502	-> set -g __fish_git_prompt_color green
219	1452	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
29	29	---> if status --is-interactive
33	33	---> set -l var $argv[3]
39	39	---> set -e _$var
35	35	---> set -e _{$var}_done
74	74	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
45	45	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
34	34	---> set -e ___fish_git_prompt_color_$name
34	34	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
10	10	---> end
30	30	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
35	35	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
10	10	---> end
30	30	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
33	33	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
40	40	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
12	12	---> end
31	31	---> commandline -f repaint ^/dev/null
21	21	---> end
73	4678	-> set -g __fish_git_prompt_color_flags red
508	4605	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
32	32	---> if status --is-interactive
34	34	---> set -l var $argv[3]
127	127	---> set -e _$var
130	130	---> set -e _{$var}_done
91	91	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
47	47	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
113	113	---> set -e ___fish_git_prompt_color_$name
117	117	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
109	109	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
113	113	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
108	108	---> set -e ___fish_git_prompt_color_$name
115	115	---> set -e ___fish_git_prompt_color_{$name}_done
36	36	---> end
210	210	---> set -e ___fish_git_prompt_color_$name
187	187	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
158	158	---> set -e ___fish_git_prompt_color_$name
211	211	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
173	173	---> set -e ___fish_git_prompt_color_$name
159	159	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
138	138	---> set -e ___fish_git_prompt_color_$name
142	142	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
151	151	---> set -e ___fish_git_prompt_color_$name
146	146	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
145	145	---> set -e ___fish_git_prompt_color_$name
149	149	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
14	14	---> end
45	45	---> commandline -f repaint ^/dev/null
15	15	---> end
57	57	-> set -l pcolor $gray
55	55	-> if test $last_status -ne 0
179	4705	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
400	4526	--> prompt_pwd
4126	4126	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
826	56342	-> __fish_git_prompt
207	3267	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
3060	3060	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
74	74	--> test -n "$repo_info"; 
14	14	--> or return
60	60	--> set -l git_dir         $repo_info[1]
60	60	--> set -l inside_gitdir   $repo_info[2]
59	59	--> set -l bare_repo       $repo_info[3]
54	54	--> set -l inside_worktree $repo_info[4]
37	37	--> set -l short_sha
93	177	--> if test (count $repo_info) = 5
84	84	---> count $repo_info
62	62	--> set short_sha $repo_info[5]
95	95	--> end
937	5475	---> __fish_git_prompt_operation_branch_bare $repo_info
71	71	----> set -l git_dir         $argv[1]
62	62	----> set -l inside_gitdir   $argv[2]
59	59	----> set -l bare_repo       $argv[3]
38	38	----> set -l short_sha
91	166	----> if test (count $argv) = 5
75	75	-----> count $argv
59	59	----> set short_sha $argv[5]
18	18	----> end
37	37	----> set -l branch
38	38	----> set -l operation
39	39	----> set -l detached no
35	35	----> set -l bare
34	34	----> set -l step
36	36	----> set -l total
34	34	----> set -l os
86	86	----> if test -d $git_dir/rebase-merge
79	79	----> if test -d $git_dir/rebase-apply
16	16	----> end
64	64	----> if test -n "$step" -a -n "$total"
66	66	----> if test -z "$branch"
100	3291	----> set branch (command git symbolic-ref HEAD ^/dev/null; set os $status)
3126	3126	-----> command git symbolic-ref HEAD ^/dev/null; 
65	65	-----> set os $status
51	51	----> if test $os -ne 0
12	12	----> end
44	44	----> if test "true" = $inside_gitdir
30	30	----> echo $operation
29	29	----> echo $branch
24	24	----> echo $detached
20	20	----> echo $bare
35	35	--> set -l r $rbc[1] # current operation
36	36	--> set -l b $rbc[2] # current branch
32	32	--> set -l detached $rbc[3]
66	66	--> set -l w #dirty working directory
101	101	--> set -l i #staged changes
52	52	--> set -l s #stashes
39	39	--> set -l u #untracked
54	54	--> set -l c $rbc[4] # bare repository
38	38	--> set -l p #upstream
42	42	--> set -l informative_status
149	7172	--> __fish_git_prompt_validate_chars
169	647	---> __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate        '✔'
86	86	----> set -l user_variable_name "$argv[1]"
36	36	----> set -l char $argv[2]
116	116	----> set -l user_variable $$user_variable_name
75	117	----> if test (count $argv) -ge 3
42	42	-----> count $argv
39	39	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
45	45	----> if not set -q $variable
141	578	---> __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate        '*' '✚'
40	40	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
102	102	----> set -l user_variable $$user_variable_name
63	103	----> if test (count $argv) -ge 3
40	40	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
41	41	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
131	559	---> __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate      '#' '✖'
40	40	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
97	97	----> set -l user_variable $$user_variable_name
64	103	----> if test (count $argv) -ge 3
39	39	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
150	793	---> __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate       '+' '●'
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
107	107	----> set -l user_variable $$user_variable_name
171	246	----> if test (count $argv) -ge 3
75	75	-----> count $argv
55	55	----> if test -n "$__fish_git_prompt_show_informative_status"
15	15	----> end
71	71	----> set -l variable _$user_variable_name
41	41	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
150	591	---> __fish_git_prompt_set_char __fish_git_prompt_char_stashstate        '$'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
127	127	----> set -l user_variable $$user_variable_name
69	109	----> if test (count $argv) -ge 3
40	40	-----> count $argv
44	44	----> set -l variable _$user_variable_name
53	53	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
133	573	---> __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator    ' ' '|'
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
109	109	----> set -l user_variable $$user_variable_name
67	107	----> if test (count $argv) -ge 3
40	40	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
36	36	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
138	577	---> __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles    '%' '…'
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
110	110	----> set -l user_variable $$user_variable_name
67	111	----> if test (count $argv) -ge 3
44	44	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
35	35	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
33	33	----> if not set -q $variable
130	625	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead    '>' '↑'
37	37	----> set -l user_variable_name "$argv[1]"
29	29	----> set -l char $argv[2]
114	114	----> set -l user_variable $$user_variable_name
91	150	----> if test (count $argv) -ge 3
59	59	-----> count $argv
40	40	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
40	40	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
144	620	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind   '<' '↓'
42	42	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
117	117	----> set -l user_variable $$user_variable_name
78	118	----> if test (count $argv) -ge 3
40	40	-----> count $argv
37	37	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
46	46	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
135	496	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
79	79	----> set -l user_variable $$user_variable_name
63	103	----> if test (count $argv) -ge 3
40	40	-----> count $argv
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
134	483	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal    '='
39	39	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
76	76	----> set -l user_variable $$user_variable_name
58	94	----> if test (count $argv) -ge 3
36	36	-----> count $argv
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
133	481	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix   ''
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
69	69	----> set -l user_variable $$user_variable_name
60	100	----> if test (count $argv) -ge 3
40	40	-----> count $argv
38	38	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
51	51	--> if test "true" = $inside_worktree
77	77	--> if test -n "$__fish_git_prompt_show_informative_status"
37	37	--> if test -n "$__fish_git_prompt_showdirtystate"
97	2302	--> set -l config (command git config --bool bash.showDirtyState)
2205	2205	---> command git config --bool bash.showDirtyState
58	58	--> if test "$config" != "false"
109	3285	--> set w (__fish_git_prompt_dirty)
206	3176	---> __fish_git_prompt_dirty
27	27	----> set -l dirty
22	22	----> set -l os
2564	2564	----> command git diff --no-ext-diff --quiet --exit-code
182	182	----> set os $status
119	119	----> if test $os -ne 0
56	56	----> echo $dirty
102	4011	--> set i (__fish_git_prompt_staged $short_sha)
218	3909	---> __fish_git_prompt_staged $short_sha
99	99	----> set -l short_sha $argv[1]
99	99	----> set -l staged
94	94	----> if test -n "$short_sha"
3320	3320	----> command git diff-index --cached --quiet HEAD --; 
35	35	----> or set staged $___fish_git_prompt_char_stagedstate
16	16	----> else
28	28	----> echo $staged
11	11	--> end
11	11	--> end
68	68	--> if test -n "$__fish_git_prompt_showstashstate" -a -r $git_dir/refs/stash
40	40	--> if test -n "$__fish_git_prompt_showuntrackedfiles"
186	2310	--> set -l config (command git config --bool bash.showUntrackedFiles)
2124	2124	---> command git config --bool bash.showUntrackedFiles
165	165	--> if test "$config" != false
3947	3947	--> if command git ls-files --others --exclude-standard --error-unmatch -- '*' >/dev/null ^/dev/null
12	12	--> end
12	12	--> end
11	11	--> end
166	166	--> if test -n "$__fish_git_prompt_showupstream" -o "$__fish_git_prompt_show_informative_status"
13	13	--> end
256	17843	--> __fish_git_prompt_validate_colors
379	1611	---> __fish_git_prompt_set_color __fish_git_prompt_color '' ''
81	81	----> set -l user_variable_name "$argv[1]"
86	86	----> set -l user_variable $$user_variable_name
160	160	----> set -l user_variable_bright
49	49	----> set -l default default_done
100	172	----> switch (count $argv)
72	72	-----> count $argv
43	43	----> set default "$argv[2]"
37	37	----> set default_done "$argv[3]"
13	13	----> end
66	101	----> if test (count $user_variable) -eq 2
35	35	-----> count $user_variable
40	40	----> set -l variable _$user_variable_name
47	47	----> set -l variable_done "$variable"_done
43	43	----> if not set -q $variable
40	40	----> if test -n "$user_variable"
37	37	----> if test -n "$user_variable_bright"
80	139	----> set -g $variable (set_color $user_variable)
59	59	-----> set_color $user_variable
12	12	----> end
74	109	----> set -g $variable_done (set_color normal)
35	35	-----> set_color normal
12	12	----> else
11	11	----> end
279	1055	---> __fish_git_prompt_set_color __fish_git_prompt_color_prefix
40	40	----> set -l user_variable_name "$argv[1]"
141	141	----> set -l user_variable $$user_variable_name
28	28	----> set -l user_variable_bright
27	27	----> set -l default default_done
57	93	----> switch (count $argv)
36	36	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
70	97	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
40	40	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
49	49	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
356	1326	---> __fish_git_prompt_set_color __fish_git_prompt_color_suffix
48	48	----> set -l user_variable_name "$argv[1]"
132	132	----> set -l user_variable $$user_variable_name
46	46	----> set -l user_variable_bright
44	44	----> set -l default default_done
89	149	----> switch (count $argv)
60	60	-----> count $argv
56	56	----> set default $___fish_git_prompt_color
86	86	----> set default_done $___fish_git_prompt_color_done
15	15	----> case 2 # One default given, use normal for done
69	99	----> if test (count $user_variable) -eq 2
30	30	-----> count $user_variable
41	41	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
52	52	----> if not set -q $variable
37	37	----> if test -n "$user_variable"
52	52	----> set -g $variable $default
51	51	----> set -g $variable_done $default_done
12	12	----> end
11	11	----> end
265	1020	---> __fish_git_prompt_set_color __fish_git_prompt_color_bare
41	41	----> set -l user_variable_name "$argv[1]"
123	123	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
27	27	----> set -l default default_done
59	95	----> switch (count $argv)
36	36	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
66	93	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
49	49	----> set -g $variable_done $default_done
12	12	----> end
11	11	----> end
359	1330	---> __fish_git_prompt_set_color __fish_git_prompt_color_merging
40	40	----> set -l user_variable_name "$argv[1]"
148	148	----> set -l user_variable $$user_variable_name
34	34	----> set -l user_variable_bright
27	27	----> set -l default default_done
69	109	----> switch (count $argv)
40	40	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
37	37	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
128	168	----> if test (count $user_variable) -eq 2
40	40	-----> count $user_variable
53	53	----> set -l variable _$user_variable_name
61	61	----> set -l variable_done "$variable"_done
68	68	----> if not set -q $variable
60	60	----> if test -n "$user_variable"
51	51	----> set -g $variable $default
44	44	----> set -g $variable_done $default_done
12	12	----> end
11	11	----> end
272	864	---> __fish_git_prompt_set_color __fish_git_prompt_color_cleanstate
39	39	----> set -l user_variable_name "$argv[1]"
111	111	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
57	101	----> switch (count $argv)
44	44	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
58	84	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
47	47	----> if not set -q $variable
264	978	---> __fish_git_prompt_set_color __fish_git_prompt_color_invalidstate
39	39	----> set -l user_variable_name "$argv[1]"
102	102	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
53	86	----> switch (count $argv)
33	33	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
62	89	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
48	48	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
308	1137	---> __fish_git_prompt_set_color __fish_git_prompt_color_upstream
39	39	----> set -l user_variable_name "$argv[1]"
104	104	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
55	89	----> switch (count $argv)
34	34	-----> count $argv
82	82	----> set default $___fish_git_prompt_color
61	61	----> set default_done $___fish_git_prompt_color_done
13	13	----> case 2 # One default given, use normal for done
81	130	----> if test (count $user_variable) -eq 2
49	49	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
105	105	---> if test -n "$__fish_git_prompt_showcolorhints"
265	1093	---> __fish_git_prompt_set_color __fish_git_prompt_color_flags
42	42	----> set -l user_variable_name "$argv[1]"
35	35	----> set -l user_variable $$user_variable_name
25	25	----> set -l user_variable_bright
25	25	----> set -l default default_done
53	85	----> switch (count $argv)
32	32	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
69	99	----> if test (count $user_variable) -eq 2
30	30	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
37	37	----> if test -n "$user_variable"
32	32	----> if test -n "$user_variable_bright"
74	120	----> set -g $variable (set_color $user_variable)
46	46	-----> set_color $user_variable
13	13	----> end
72	100	----> set -g $variable_done (set_color normal)
28	28	-----> set_color normal
11	11	----> else
10	10	----> end
302	1224	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch
38	38	----> set -l user_variable_name "$argv[1]"
101	101	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
26	26	----> set -l default default_done
53	85	----> switch (count $argv)
32	32	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
61	88	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
113	113	----> set -l variable _$user_variable_name
78	78	----> set -l variable_done "$variable"_done
80	80	----> if not set -q $variable
92	92	----> if test -n "$user_variable"
47	47	----> set -g $variable $default
44	44	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
287	1121	---> __fish_git_prompt_set_color __fish_git_prompt_color_dirtystate  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
49	49	----> set -l user_variable_name "$argv[1]"
98	98	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
27	27	----> set -l default default_done
55	99	----> switch (count $argv)
44	44	-----> count $argv
38	38	----> set default "$argv[2]"
39	39	----> set default_done "$argv[3]"
11	11	----> end
99	139	----> if test (count $user_variable) -eq 2
40	40	-----> count $user_variable
50	50	----> set -l variable _$user_variable_name
40	40	----> set -l variable_done "$variable"_done
43	43	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
57	57	----> set -g $variable $default
58	58	----> set -g $variable_done $default_done
12	12	----> end
11	11	----> end
309	1141	---> __fish_git_prompt_set_color __fish_git_prompt_color_stagedstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
57	57	----> set -l user_variable_name "$argv[1]"
119	119	----> set -l user_variable $$user_variable_name
38	38	----> set -l user_variable_bright
36	36	----> set -l default default_done
57	113	----> switch (count $argv)
56	56	-----> count $argv
60	60	----> set default "$argv[2]"
41	41	----> set default_done "$argv[3]"
12	12	----> end
61	88	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
41	41	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
16	16	----> end
13	13	----> end
11	11	---> end
387	1262	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch_detached (set_color red)
57	57	----> set_color red
72	72	----> set -l user_variable_name "$argv[1]"
138	138	----> set -l user_variable $$user_variable_name
66	66	----> set -l user_variable_bright
52	52	----> set -l default default_done
62	107	----> switch (count $argv)
45	45	-----> count $argv
42	42	----> set default "$argv[2]"
65	100	----> set default_done (set_color normal)
35	35	-----> set_color normal
13	13	----> case 3 # Both defaults given
62	96	----> if test (count $user_variable) -eq 2
34	34	-----> count $user_variable
50	50	----> set -l variable _$user_variable_name
40	40	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
332	1252	---> __fish_git_prompt_set_color __fish_git_prompt_color_stashstate      $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
51	51	----> set -l user_variable_name "$argv[1]"
108	108	----> set -l user_variable $$user_variable_name
67	67	----> set -l user_variable_bright
35	35	----> set -l default default_done
60	117	----> switch (count $argv)
57	57	-----> count $argv
54	54	----> set default "$argv[2]"
70	70	----> set default_done "$argv[3]"
21	21	----> end
92	124	----> if test (count $user_variable) -eq 2
32	32	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
46	46	----> set -l variable_done "$variable"_done
43	43	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
44	44	----> set -g $variable $default
44	44	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
286	1057	---> __fish_git_prompt_set_color __fish_git_prompt_color_untrackedfiles  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
42	42	----> set -l user_variable_name "$argv[1]"
92	92	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
58	133	----> switch (count $argv)
75	75	-----> count $argv
42	42	----> set default "$argv[2]"
41	41	----> set default_done "$argv[3]"
13	13	----> end
60	89	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
40	40	----> if test -n "$user_variable"
44	44	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
45	45	--> set -l branch_color $___fish_git_prompt_color_branch
44	44	--> set -l branch_done  $___fish_git_prompt_color_branch_done
107	107	--> if test -n "$__fish_git_prompt_showcolorhints"
37	37	--> if test -n "$w"
29	29	--> if test -n "$i"
28	28	--> if test -n "$s"
28	28	--> if test -n "$u"
107	2963	--> set b (/bin/sh -c 'echo "${1#refs/heads/}"' -- $b)
2856	2856	---> /bin/sh -c 'echo "${1#refs/heads/}"' -- $b
52	52	--> if test -n "$b"
43	43	--> set b "$branch_color$b$branch_done"
13	13	--> end
31	31	--> if test -n "$c"
28	28	--> if test -n "$r"
27	27	--> if test -n "$p"
51	51	--> set -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"
32	32	--> set -l f "$w$i$s$u"
27	27	--> if test -n "$f"
36	36	--> set -l format $argv[1]
29	29	--> if test -z "$format"
28	28	--> set format " (%s)"
10	10	--> end
179	179	--> printf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___git_ps_color_suffix_done"
20	20	-> if begin
3996	3996	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
40	40	-> end
57	57	-> echo
65	65	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
32	32	> echo $_ " "; 
45	115	> __fish_pwd
70	70	-> pwd
75	75	> echo $_ " "; 
76	169	> __fish_pwd
93	93	-> pwd
22308940	22308940	> git push
515	75239	> fish_prompt
78	78	-> set -l last_status $status
34	34	-> if not set -q __fish_prompt_hostname
100	100	-> if not set -q __fish_prompt_char
90	221	-> set -l normal (set_color normal)
131	131	--> set_color normal
64	94	-> set -l red (set_color red)
30	30	--> set_color red
85	127	-> set -l cyan (set_color cyan)
42	42	--> set_color cyan
101	150	-> set -l white (set_color white)
49	49	--> set_color white
68	99	-> set -l gray (set_color -o cyan)
31	31	--> set_color -o cyan
74	104	-> set -l brwhite (set_color -o white)
30	30	--> set_color -o white
53	490	-> set -g __fish_git_prompt_showdirtystate true
192	437	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
77	77	---> if status --is-interactive
104	104	---> if test $argv[3] = __fish_git_prompt_show_informative_status
55	55	---> commandline -f repaint ^/dev/null
9	9	---> end
48	293	-> set -g __fish_git_prompt_showuntrackedfiles true
105	245	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
49	49	---> if status --is-interactive
55	55	---> if test $argv[3] = __fish_git_prompt_show_informative_status
27	27	---> commandline -f repaint ^/dev/null
9	9	---> end
50	423	-> set -g __fish_git_prompt_showstashstate true
134	373	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
85	85	---> if status --is-interactive
85	85	---> if test $argv[3] = __fish_git_prompt_show_informative_status
55	55	---> commandline -f repaint ^/dev/null
14	14	---> end
80	2776	-> set -g __fish_git_prompt_color green
386	2696	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
34	34	---> if status --is-interactive
49	49	---> set -l var $argv[3]
66	66	---> set -e _$var
72	72	---> set -e _{$var}_done
121	121	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
83	83	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
73	73	---> set -e ___fish_git_prompt_color_$name
73	73	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
55	55	---> set -e ___fish_git_prompt_color_$name
39	39	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
166	166	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
54	54	---> set -e ___fish_git_prompt_color_$name
50	50	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
60	60	---> set -e ___fish_git_prompt_color_$name
52	52	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
66	66	---> set -e ___fish_git_prompt_color_$name
61	61	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
57	57	---> set -e ___fish_git_prompt_color_$name
60	60	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
58	58	---> set -e ___fish_git_prompt_color_$name
60	60	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
59	59	---> set -e ___fish_git_prompt_color_$name
61	61	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
59	59	---> set -e ___fish_git_prompt_color_$name
60	60	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
69	69	---> set -e ___fish_git_prompt_color_$name
59	59	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
56	56	---> set -e ___fish_git_prompt_color_$name
58	58	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
13	13	---> end
55	55	---> commandline -f repaint ^/dev/null
16	16	---> end
78	8795	-> set -g __fish_git_prompt_color_flags red
433	8717	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
55	55	---> if status --is-interactive
57	57	---> set -l var $argv[3]
191	191	---> set -e _$var
178	178	---> set -e _{$var}_done
127	127	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
73	73	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
199	199	---> set -e ___fish_git_prompt_color_$name
1416	1416	---> set -e ___fish_git_prompt_color_{$name}_done
34	34	---> end
1045	1045	---> set -e ___fish_git_prompt_color_$name
646	646	---> set -e ___fish_git_prompt_color_{$name}_done
29	29	---> end
245	245	---> set -e ___fish_git_prompt_color_$name
190	190	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
263	263	---> set -e ___fish_git_prompt_color_$name
175	175	---> set -e ___fish_git_prompt_color_{$name}_done
27	27	---> end
182	182	---> set -e ___fish_git_prompt_color_$name
392	392	---> set -e ___fish_git_prompt_color_{$name}_done
28	28	---> end
371	371	---> set -e ___fish_git_prompt_color_$name
175	175	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
168	168	---> set -e ___fish_git_prompt_color_$name
174	174	---> set -e ___fish_git_prompt_color_{$name}_done
26	26	---> end
161	161	---> set -e ___fish_git_prompt_color_$name
153	153	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
152	152	---> set -e ___fish_git_prompt_color_$name
192	192	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
154	154	---> set -e ___fish_git_prompt_color_$name
156	156	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
154	154	---> set -e ___fish_git_prompt_color_$name
158	158	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
152	152	---> set -e ___fish_git_prompt_color_$name
153	153	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
15	15	---> end
48	48	---> commandline -f repaint ^/dev/null
16	16	---> end
62	62	-> set -l pcolor $gray
59	59	-> if test $last_status -ne 0
261	4732	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
310	4471	--> prompt_pwd
4161	4161	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
892	51369	-> __fish_git_prompt
150	2518	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2368	2368	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
55	55	--> test -n "$repo_info"; 
9	9	--> or return
41	41	--> set -l git_dir         $repo_info[1]
40	40	--> set -l inside_gitdir   $repo_info[2]
39	39	--> set -l bare_repo       $repo_info[3]
37	37	--> set -l inside_worktree $repo_info[4]
25	25	--> set -l short_sha
158	268	--> if test (count $repo_info) = 5
110	110	---> count $repo_info
70	70	--> set short_sha $repo_info[5]
24	24	--> end
762	5159	---> __fish_git_prompt_operation_branch_bare $repo_info
44	44	----> set -l git_dir         $argv[1]
39	39	----> set -l inside_gitdir   $argv[2]
37	37	----> set -l bare_repo       $argv[3]
24	24	----> set -l short_sha
61	110	----> if test (count $argv) = 5
49	49	-----> count $argv
38	38	----> set short_sha $argv[5]
12	12	----> end
24	24	----> set -l branch
24	24	----> set -l operation
25	25	----> set -l detached no
23	23	----> set -l bare
22	22	----> set -l step
22	22	----> set -l total
22	22	----> set -l os
63	63	----> if test -d $git_dir/rebase-merge
54	54	----> if test -d $git_dir/rebase-apply
11	11	----> end
49	49	----> if test -n "$step" -a -n "$total"
38	38	----> if test -z "$branch"
98	3450	----> set branch (command git symbolic-ref HEAD ^/dev/null; set os $status)
3282	3282	-----> command git symbolic-ref HEAD ^/dev/null; 
70	70	-----> set os $status
93	93	----> if test $os -ne 0
11	11	----> end
48	48	----> if test "true" = $inside_gitdir
28	28	----> echo $operation
27	27	----> echo $branch
26	26	----> echo $detached
33	33	----> echo $bare
46	46	--> set -l r $rbc[1] # current operation
37	37	--> set -l b $rbc[2] # current branch
50	50	--> set -l detached $rbc[3]
34	34	--> set -l w #dirty working directory
39	39	--> set -l i #staged changes
37	37	--> set -l s #stashes
36	36	--> set -l u #untracked
42	42	--> set -l c $rbc[4] # bare repository
28	28	--> set -l p #upstream
33	33	--> set -l informative_status
116	6646	--> __fish_git_prompt_validate_chars
147	565	---> __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate        '✔'
49	49	----> set -l user_variable_name "$argv[1]"
38	38	----> set -l char $argv[2]
110	110	----> set -l user_variable $$user_variable_name
66	106	----> if test (count $argv) -ge 3
40	40	-----> count $argv
39	39	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
127	550	---> __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate        '*' '✚'
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
92	92	----> set -l user_variable $$user_variable_name
66	105	----> if test (count $argv) -ge 3
39	39	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
36	36	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
136	608	---> __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate      '#' '✖'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
104	104	----> set -l user_variable $$user_variable_name
77	122	----> if test (count $argv) -ge 3
45	45	-----> count $argv
41	41	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
43	43	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
44	44	----> if not set -q $variable
142	634	---> __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate       '+' '●'
41	41	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
94	94	----> set -l user_variable $$user_variable_name
124	166	----> if test (count $argv) -ge 3
42	42	-----> count $argv
40	40	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
132	495	---> __fish_git_prompt_set_char __fish_git_prompt_char_stashstate        '$'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
87	87	----> set -l user_variable $$user_variable_name
61	96	----> if test (count $argv) -ge 3
35	35	-----> count $argv
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
127	556	---> __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator    ' ' '|'
46	46	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
94	94	----> set -l user_variable $$user_variable_name
59	97	----> if test (count $argv) -ge 3
38	38	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
37	37	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
126	539	---> __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles    '%' '…'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
92	92	----> set -l user_variable $$user_variable_name
59	97	----> if test (count $argv) -ge 3
38	38	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
36	36	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
128	544	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead    '>' '↑'
39	39	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
93	93	----> set -l user_variable $$user_variable_name
60	102	----> if test (count $argv) -ge 3
42	42	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
36	36	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
130	547	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind   '<' '↓'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
88	88	----> set -l user_variable $$user_variable_name
63	101	----> if test (count $argv) -ge 3
38	38	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
42	42	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
131	495	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
38	38	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
92	92	----> set -l user_variable $$user_variable_name
59	94	----> if test (count $argv) -ge 3
35	35	-----> count $argv
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
135	487	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal    '='
38	38	----> set -l user_variable_name "$argv[1]"
33	33	----> set -l char $argv[2]
81	81	----> set -l user_variable $$user_variable_name
58	93	----> if test (count $argv) -ge 3
35	35	-----> count $argv
36	36	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
139	510	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix   ''
39	39	----> set -l user_variable_name "$argv[1]"
30	30	----> set -l char $argv[2]
95	95	----> set -l user_variable $$user_variable_name
59	99	----> if test (count $argv) -ge 3
40	40	-----> count $argv
37	37	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
49	49	--> if test "true" = $inside_worktree
78	78	--> if test -n "$__fish_git_prompt_show_informative_status"
39	39	--> if test -n "$__fish_git_prompt_showdirtystate"
97	2474	--> set -l config (command git config --bool bash.showDirtyState)
2377	2377	---> command git config --bool bash.showDirtyState
65	65	--> if test "$config" != "false"
67	2881	--> set w (__fish_git_prompt_dirty)
141	2814	---> __fish_git_prompt_dirty
28	28	----> set -l dirty
23	23	----> set -l os
2466	2466	----> command git diff --no-ext-diff --quiet --exit-code
88	88	----> set os $status
43	43	----> if test $os -ne 0
25	25	----> echo $dirty
80	3764	--> set i (__fish_git_prompt_staged $short_sha)
158	3684	---> __fish_git_prompt_staged $short_sha
40	40	----> set -l short_sha $argv[1]
25	25	----> set -l staged
41	41	----> if test -n "$short_sha"
3337	3337	----> command git diff-index --cached --quiet HEAD --; 
37	37	----> or set staged $___fish_git_prompt_char_stagedstate
17	17	----> else
29	29	----> echo $staged
12	12	--> end
12	12	--> end
68	68	--> if test -n "$__fish_git_prompt_showstashstate" -a -r $git_dir/refs/stash
42	42	--> if test -n "$__fish_git_prompt_showuntrackedfiles"
94	2293	--> set -l config (command git config --bool bash.showUntrackedFiles)
2199	2199	---> command git config --bool bash.showUntrackedFiles
60	60	--> if test "$config" != false
2886	2886	--> if command git ls-files --others --exclude-standard --error-unmatch -- '*' >/dev/null ^/dev/null
12	12	--> end
11	11	--> end
25	25	--> end
168	168	--> if test -n "$__fish_git_prompt_showupstream" -o "$__fish_git_prompt_show_informative_status"
10	10	--> end
199	16063	--> __fish_git_prompt_validate_colors
297	1148	---> __fish_git_prompt_set_color __fish_git_prompt_color '' ''
49	49	----> set -l user_variable_name "$argv[1]"
44	44	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
27	27	----> set -l default default_done
57	97	----> switch (count $argv)
40	40	-----> count $argv
36	36	----> set default "$argv[2]"
34	34	----> set default_done "$argv[3]"
11	11	----> end
58	95	----> if test (count $user_variable) -eq 2
37	37	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
37	37	----> if test -n "$user_variable"
30	30	----> if test -n "$user_variable_bright"
72	127	----> set -g $variable (set_color $user_variable)
55	55	-----> set_color $user_variable
11	11	----> end
69	96	----> set -g $variable_done (set_color normal)
27	27	-----> set_color normal
11	11	----> else
10	10	----> end
240	944	---> __fish_git_prompt_set_color __fish_git_prompt_color_prefix
37	37	----> set -l user_variable_name "$argv[1]"
115	115	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
25	25	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
55	79	----> if test (count $user_variable) -eq 2
24	24	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
40	40	----> set -g $variable $default
39	39	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
279	1082	---> __fish_git_prompt_set_color __fish_git_prompt_color_suffix
38	38	----> set -l user_variable_name "$argv[1]"
107	107	----> set -l user_variable $$user_variable_name
44	44	----> set -l user_variable_bright
34	34	----> set -l default default_done
60	128	----> switch (count $argv)
68	68	-----> count $argv
47	47	----> set default $___fish_git_prompt_color
39	39	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
61	89	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
47	47	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
252	953	---> __fish_git_prompt_set_color __fish_git_prompt_color_bare
42	42	----> set -l user_variable_name "$argv[1]"
107	107	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
55	87	----> switch (count $argv)
32	32	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
35	35	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
54	79	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
47	47	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
10	10	----> end
9	9	----> end
239	910	---> __fish_git_prompt_set_color __fish_git_prompt_color_merging
36	36	----> set -l user_variable_name "$argv[1]"
100	100	----> set -l user_variable $$user_variable_name
34	34	----> set -l user_variable_bright
24	24	----> set -l default default_done
51	82	----> switch (count $argv)
31	31	-----> count $argv
33	33	----> set default $___fish_git_prompt_color
32	32	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
58	83	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
34	34	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
39	39	----> set -g $variable $default
39	39	----> set -g $variable_done $default_done
10	10	----> end
10	10	----> end
281	941	---> __fish_git_prompt_set_color __fish_git_prompt_color_cleanstate
51	51	----> set -l user_variable_name "$argv[1]"
105	105	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
38	38	----> set -l default default_done
65	127	----> switch (count $argv)
62	62	-----> count $argv
41	41	----> set default $___fish_git_prompt_color
39	39	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
62	90	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
44	44	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
244	966	---> __fish_git_prompt_set_color __fish_git_prompt_color_invalidstate
47	47	----> set -l user_variable_name "$argv[1]"
118	118	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
25	25	----> set -l default default_done
54	86	----> switch (count $argv)
32	32	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
35	35	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
60	86	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
44	44	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
245	944	---> __fish_git_prompt_set_color __fish_git_prompt_color_upstream
36	36	----> set -l user_variable_name "$argv[1]"
115	115	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
53	86	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
33	33	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
52	78	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
46	46	----> set -g $variable $default
39	39	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
110	110	---> if test -n "$__fish_git_prompt_showcolorhints"
260	1099	---> __fish_git_prompt_set_color __fish_git_prompt_color_flags
48	48	----> set -l user_variable_name "$argv[1]"
34	34	----> set -l user_variable $$user_variable_name
24	24	----> set -l user_variable_bright
24	24	----> set -l default default_done
51	83	----> switch (count $argv)
32	32	-----> count $argv
33	33	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
58	86	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
47	47	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
35	35	----> if test -n "$user_variable_bright"
86	136	----> set -g $variable (set_color $user_variable)
50	50	-----> set_color $user_variable
13	13	----> end
72	102	----> set -g $variable_done (set_color normal)
30	30	-----> set_color normal
12	12	----> else
10	10	----> end
249	927	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch
39	39	----> set -l user_variable_name "$argv[1]"
81	81	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
25	25	----> set -l default default_done
51	84	----> switch (count $argv)
33	33	-----> count $argv
35	35	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
56	88	----> if test (count $user_variable) -eq 2
32	32	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
48	48	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
39	39	----> set -g $variable $default
39	39	----> set -g $variable_done $default_done
10	10	----> end
9	9	----> end
308	1139	---> __fish_git_prompt_set_color __fish_git_prompt_color_dirtystate  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
39	39	----> set -l user_variable_name "$argv[1]"
106	106	----> set -l user_variable $$user_variable_name
34	34	----> set -l user_variable_bright
29	29	----> set -l default default_done
59	104	----> switch (count $argv)
45	45	-----> count $argv
40	40	----> set default "$argv[2]"
39	39	----> set default_done "$argv[3]"
12	12	----> end
71	97	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
54	54	----> set -l variable _$user_variable_name
40	40	----> set -l variable_done "$variable"_done
77	77	----> if not set -q $variable
45	45	----> if test -n "$user_variable"
44	44	----> set -g $variable $default
49	49	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
278	991	---> __fish_git_prompt_set_color __fish_git_prompt_color_stagedstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
40	40	----> set -l user_variable_name "$argv[1]"
82	82	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
26	26	----> set -l default default_done
59	110	----> switch (count $argv)
51	51	-----> count $argv
38	38	----> set default "$argv[2]"
38	38	----> set default_done "$argv[3]"
12	12	----> end
58	89	----> if test (count $user_variable) -eq 2
31	31	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
44	44	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
41	41	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
10	10	----> end
9	9	----> end
10	10	---> end
287	942	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch_detached (set_color red)
28	28	----> set_color red
38	38	----> set -l user_variable_name "$argv[1]"
107	107	----> set -l user_variable $$user_variable_name
41	41	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	91	----> switch (count $argv)
37	37	-----> count $argv
36	36	----> set default "$argv[2]"
59	87	----> set default_done (set_color normal)
28	28	-----> set_color normal
11	11	----> case 3 # Both defaults given
54	79	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
422	1590	---> __fish_git_prompt_set_color __fish_git_prompt_color_stashstate      $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
39	39	----> set -l user_variable_name "$argv[1]"
136	136	----> set -l user_variable $$user_variable_name
34	34	----> set -l user_variable_bright
131	131	----> set -l default default_done
88	162	----> switch (count $argv)
74	74	-----> count $argv
55	55	----> set default "$argv[2]"
44	44	----> set default_done "$argv[3]"
12	12	----> end
90	143	----> if test (count $user_variable) -eq 2
53	53	-----> count $user_variable
40	40	----> set -l variable _$user_variable_name
45	45	----> set -l variable_done "$variable"_done
66	66	----> if not set -q $variable
59	59	----> if test -n "$user_variable"
67	67	----> set -g $variable $default
76	76	----> set -g $variable_done $default_done
21	21	----> end
38	38	----> end
338	1168	---> __fish_git_prompt_set_color __fish_git_prompt_color_untrackedfiles  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
48	48	----> set -l user_variable_name "$argv[1]"
109	109	----> set -l user_variable $$user_variable_name
28	28	----> set -l user_variable_bright
28	28	----> set -l default default_done
76	123	----> switch (count $argv)
47	47	-----> count $argv
43	43	----> set default "$argv[2]"
58	58	----> set default_done "$argv[3]"
13	13	----> end
68	97	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
52	52	----> set -l variable_done "$variable"_done
44	44	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
47	47	----> set -g $variable $default
44	44	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
39	39	--> set -l branch_color $___fish_git_prompt_color_branch
38	38	--> set -l branch_done  $___fish_git_prompt_color_branch_done
104	104	--> if test -n "$__fish_git_prompt_showcolorhints"
33	33	--> if test -n "$w"
29	29	--> if test -n "$i"
28	28	--> if test -n "$s"
68	68	--> if test -n "$u"
111	3010	--> set b (/bin/sh -c 'echo "${1#refs/heads/}"' -- $b)
2899	2899	---> /bin/sh -c 'echo "${1#refs/heads/}"' -- $b
54	54	--> if test -n "$b"
43	43	--> set b "$branch_color$b$branch_done"
12	12	--> end
31	31	--> if test -n "$c"
30	30	--> if test -n "$r"
28	28	--> if test -n "$p"
50	50	--> set -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"
34	34	--> set -l f "$w$i$s$u"
30	30	--> if test -n "$f"
31	31	--> set -l format $argv[1]
37	37	--> if test -z "$format"
29	29	--> set format " (%s)"
10	10	--> end
221	221	--> printf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___git_ps_color_suffix_done"
22	22	-> if begin
4527	4527	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
42	42	-> end
42	42	-> echo
85	85	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
34	34	> echo $_ " "; 
74	156	> __fish_pwd
82	82	-> pwd
411	93127	> fish_prompt
73	73	-> set -l last_status $status
47	47	-> if not set -q __fish_prompt_hostname
58	58	-> if not set -q __fish_prompt_char
99	151	-> set -l normal (set_color normal)
52	52	--> set_color normal
75	117	-> set -l red (set_color red)
42	42	--> set_color red
58	85	-> set -l cyan (set_color cyan)
27	27	--> set_color cyan
58	84	-> set -l white (set_color white)
26	26	--> set_color white
57	93	-> set -l gray (set_color -o cyan)
36	36	--> set_color -o cyan
59	86	-> set -l brwhite (set_color -o white)
27	27	--> set_color -o white
55	286	-> set -g __fish_git_prompt_showdirtystate true
105	231	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
39	39	---> if status --is-interactive
45	45	---> if test $argv[3] = __fish_git_prompt_show_informative_status
29	29	---> commandline -f repaint ^/dev/null
13	13	---> end
73	635	-> set -g __fish_git_prompt_showuntrackedfiles true
161	562	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
187	187	---> if status --is-interactive
75	75	---> if test $argv[3] = __fish_git_prompt_show_informative_status
121	121	---> commandline -f repaint ^/dev/null
18	18	---> end
81	337	-> set -g __fish_git_prompt_showstashstate true
125	256	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
46	46	---> if status --is-interactive
48	48	---> if test $argv[3] = __fish_git_prompt_show_informative_status
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
49	1505	-> set -g __fish_git_prompt_color green
206	1456	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
31	31	---> if status --is-interactive
35	35	---> set -l var $argv[3]
42	42	---> set -e _$var
36	36	---> set -e _{$var}_done
71	71	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
52	52	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
36	36	---> set -e ___fish_git_prompt_color_$name
35	35	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
30	30	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
10	10	---> end
63	63	---> set -e ___fish_git_prompt_color_$name
34	34	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
10	10	---> end
9	9	---> end
28	28	---> commandline -f repaint ^/dev/null
9	9	---> end
49	4351	-> set -g __fish_git_prompt_color_flags red
282	4302	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
31	31	---> if status --is-interactive
34	34	---> set -l var $argv[3]
201	201	---> set -e _$var
207	207	---> set -e _{$var}_done
129	129	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
67	67	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
136	136	---> set -e ___fish_git_prompt_color_$name
120	120	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
107	107	---> set -e ___fish_git_prompt_color_$name
122	122	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
123	123	---> set -e ___fish_git_prompt_color_$name
105	105	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
122	122	---> set -e ___fish_git_prompt_color_$name
105	105	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
133	133	---> set -e ___fish_git_prompt_color_$name
159	159	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
145	145	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
129	129	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
14	14	---> end
127	127	---> set -e ___fish_git_prompt_color_$name
123	123	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
155	155	---> set -e ___fish_git_prompt_color_$name
147	147	---> set -e ___fish_git_prompt_color_{$name}_done
24	24	---> end
136	136	---> set -e ___fish_git_prompt_color_$name
132	132	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
125	125	---> set -e ___fish_git_prompt_color_$name
130	130	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
9	9	---> end
32	32	---> commandline -f repaint ^/dev/null
9	9	---> end
42	42	-> set -l pcolor $gray
45	45	-> if test $last_status -ne 0
161	3778	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
151	3617	--> prompt_pwd
3466	3466	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
960	76641	-> __fish_git_prompt
213	3001	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2788	2788	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
77	77	--> test -n "$repo_info"; 
12	12	--> or return
64	64	--> set -l git_dir         $repo_info[1]
63	63	--> set -l inside_gitdir   $repo_info[2]
66	66	--> set -l bare_repo       $repo_info[3]
61	61	--> set -l inside_worktree $repo_info[4]
43	43	--> set -l short_sha
109	200	--> if test (count $repo_info) = 5
91	91	---> count $repo_info
59	59	--> set short_sha $repo_info[5]
18	18	--> end
821	4709	---> __fish_git_prompt_operation_branch_bare $repo_info
53	53	----> set -l git_dir         $argv[1]
49	49	----> set -l inside_gitdir   $argv[2]
47	47	----> set -l bare_repo       $argv[3]
52	52	----> set -l short_sha
73	135	----> if test (count $argv) = 5
62	62	-----> count $argv
49	49	----> set short_sha $argv[5]
15	15	----> end
31	31	----> set -l branch
30	30	----> set -l operation
32	32	----> set -l detached no
29	29	----> set -l bare
28	28	----> set -l step
30	30	----> set -l total
27	27	----> set -l os
69	69	----> if test -d $git_dir/rebase-merge
75	75	----> if test -d $git_dir/rebase-apply
10	10	----> end
51	51	----> if test -n "$step" -a -n "$total"
43	43	----> if test -z "$branch"
91	2745	----> set branch (command git symbolic-ref HEAD ^/dev/null; set os $status)
2589	2589	-----> command git symbolic-ref HEAD ^/dev/null; 
65	65	-----> set os $status
48	48	----> if test $os -ne 0
11	11	----> end
44	44	----> if test "true" = $inside_gitdir
60	60	----> echo $operation
70	70	----> echo $branch
28	28	----> echo $detached
27	27	----> echo $bare
66	66	--> set -l r $rbc[1] # current operation
58	58	--> set -l b $rbc[2] # current branch
34	34	--> set -l detached $rbc[3]
23	23	--> set -l w #dirty working directory
21	21	--> set -l i #staged changes
22	22	--> set -l s #stashes
22	22	--> set -l u #untracked
30	30	--> set -l c $rbc[4] # bare repository
22	22	--> set -l p #upstream
25	25	--> set -l informative_status
99	6857	--> __fish_git_prompt_validate_chars
139	556	---> __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate        '✔'
41	41	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
125	125	----> set -l user_variable $$user_variable_name
66	106	----> if test (count $argv) -ge 3
40	40	-----> count $argv
39	39	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
133	562	---> __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate        '*' '✚'
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
95	95	----> set -l user_variable $$user_variable_name
61	105	----> if test (count $argv) -ge 3
44	44	-----> count $argv
37	37	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
129	553	---> __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate      '#' '✖'
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
95	95	----> set -l user_variable $$user_variable_name
61	99	----> if test (count $argv) -ge 3
38	38	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
153	641	---> __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate       '+' '●'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
113	113	----> set -l user_variable $$user_variable_name
78	129	----> if test (count $argv) -ge 3
51	51	-----> count $argv
39	39	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
41	41	----> set -l variable _$user_variable_name
40	40	----> set -l variable_done "$variable"_done
45	45	----> if not set -q $variable
175	559	---> __fish_git_prompt_set_char __fish_git_prompt_char_stashstate        '$'
47	47	----> set -l user_variable_name "$argv[1]"
33	33	----> set -l char $argv[2]
84	84	----> set -l user_variable $$user_variable_name
64	102	----> if test (count $argv) -ge 3
38	38	-----> count $argv
38	38	----> set -l variable _$user_variable_name
43	43	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
130	529	---> __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator    ' ' '|'
41	41	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
72	72	----> set -l user_variable $$user_variable_name
61	100	----> if test (count $argv) -ge 3
39	39	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
126	514	---> __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles    '%' '…'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
69	69	----> set -l user_variable $$user_variable_name
65	106	----> if test (count $argv) -ge 3
41	41	-----> count $argv
32	32	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
34	34	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
33	33	----> if not set -q $variable
131	576	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead    '>' '↑'
37	37	----> set -l user_variable_name "$argv[1]"
29	29	----> set -l char $argv[2]
106	106	----> set -l user_variable $$user_variable_name
71	113	----> if test (count $argv) -ge 3
42	42	-----> count $argv
36	36	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
39	39	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
172	628	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind   '<' '↓'
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
114	114	----> set -l user_variable $$user_variable_name
67	105	----> if test (count $argv) -ge 3
38	38	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
46	46	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
152	564	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
42	42	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
117	117	----> set -l user_variable $$user_variable_name
67	105	----> if test (count $argv) -ge 3
38	38	-----> count $argv
39	39	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
151	540	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal    '='
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
100	100	----> set -l user_variable $$user_variable_name
66	103	----> if test (count $argv) -ge 3
37	37	-----> count $argv
38	38	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
137	536	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix   ''
37	37	----> set -l user_variable_name "$argv[1]"
29	29	----> set -l char $argv[2]
107	107	----> set -l user_variable $$user_variable_name
72	111	----> if test (count $argv) -ge 3
39	39	-----> count $argv
41	41	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
50	50	--> if test "true" = $inside_worktree
81	81	--> if test -n "$__fish_git_prompt_show_informative_status"
39	39	--> if test -n "$__fish_git_prompt_showdirtystate"
90	2536	--> set -l config (command git config --bool bash.showDirtyState)
2446	2446	---> command git config --bool bash.showDirtyState
62	62	--> if test "$config" != "false"
66	4071	--> set w (__fish_git_prompt_dirty)
112	4005	---> __fish_git_prompt_dirty
33	33	----> set -l dirty
25	25	----> set -l os
3701	3701	----> command git diff --no-ext-diff --quiet --exit-code
68	68	----> set os $status
42	42	----> if test $os -ne 0
24	24	----> echo $dirty
104	5202	--> set i (__fish_git_prompt_staged $short_sha)
154	5098	---> __fish_git_prompt_staged $short_sha
39	39	----> set -l short_sha $argv[1]
26	26	----> set -l staged
42	42	----> if test -n "$short_sha"
4720	4720	----> command git diff-index --cached --quiet HEAD --; 
46	46	----> or set staged $___fish_git_prompt_char_stagedstate
25	25	----> else
46	46	----> echo $staged
15	15	--> end
12	12	--> end
74	74	--> if test -n "$__fish_git_prompt_showstashstate" -a -r $git_dir/refs/stash
43	43	--> if test -n "$__fish_git_prompt_showuntrackedfiles"
95	2636	--> set -l config (command git config --bool bash.showUntrackedFiles)
2541	2541	---> command git config --bool bash.showUntrackedFiles
59	59	--> if test "$config" != false
2936	2936	--> if command git ls-files --others --exclude-standard --error-unmatch -- '*' >/dev/null ^/dev/null
11	11	--> end
11	11	--> end
10	10	--> end
170	170	--> if test -n "$__fish_git_prompt_showupstream" -o "$__fish_git_prompt_show_informative_status"
10	10	--> end
178	38125	--> __fish_git_prompt_validate_colors
259	1084	---> __fish_git_prompt_set_color __fish_git_prompt_color '' ''
46	46	----> set -l user_variable_name "$argv[1]"
43	43	----> set -l user_variable $$user_variable_name
24	24	----> set -l user_variable_bright
24	24	----> set -l default default_done
54	91	----> switch (count $argv)
37	37	-----> count $argv
33	33	----> set default "$argv[2]"
32	32	----> set default_done "$argv[3]"
11	11	----> end
54	89	----> if test (count $user_variable) -eq 2
35	35	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
37	37	----> if test -n "$user_variable"
30	30	----> if test -n "$user_variable_bright"
72	127	----> set -g $variable (set_color $user_variable)
55	55	-----> set_color $user_variable
11	11	----> end
69	96	----> set -g $variable_done (set_color normal)
27	27	-----> set_color normal
11	11	----> else
10	10	----> end
275	1079	---> __fish_git_prompt_set_color __fish_git_prompt_color_prefix
37	37	----> set -l user_variable_name "$argv[1]"
121	121	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
27	27	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
74	103	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
71	71	----> set -l variable _$user_variable_name
54	54	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
44	44	----> set -g $variable $default
53	53	----> set -g $variable_done $default_done
11	11	----> end
9	9	----> end
255	962	---> __fish_git_prompt_set_color __fish_git_prompt_color_suffix
36	36	----> set -l user_variable_name "$argv[1]"
111	111	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	86	----> switch (count $argv)
32	32	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
60	86	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
45	45	----> set -g $variable $default
44	44	----> set -g $variable_done $default_done
11	11	----> end
9	9	----> end
279	1032	---> __fish_git_prompt_set_color __fish_git_prompt_color_bare
37	37	----> set -l user_variable_name "$argv[1]"
112	112	----> set -l user_variable $$user_variable_name
34	34	----> set -l user_variable_bright
27	27	----> set -l default default_done
66	105	----> switch (count $argv)
39	39	-----> count $argv
46	46	----> set default $___fish_git_prompt_color
7	7	----> set default_done $___fish_git_prompt_color_done
13	13	----> case 2 # One default given, use normal for done
67	96	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
45	45	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
48	48	----> set -g $variable $default
44	44	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
400	1427	---> __fish_git_prompt_set_color __fish_git_prompt_color_merging
40	40	----> set -l user_variable_name "$argv[1]"
102	102	----> set -l user_variable $$user_variable_name
37	37	----> set -l user_variable_bright
32	32	----> set -l default default_done
75	121	----> switch (count $argv)
46	46	-----> count $argv
56	56	----> set default $___fish_git_prompt_color
59	59	----> set default_done $___fish_git_prompt_color_done
22	22	----> case 2 # One default given, use normal for done
98	142	----> if test (count $user_variable) -eq 2
44	44	-----> count $user_variable
42	42	----> set -l variable _$user_variable_name
50	50	----> set -l variable_done "$variable"_done
70	70	----> if not set -q $variable
56	56	----> if test -n "$user_variable"
91	91	----> set -g $variable $default
71	71	----> set -g $variable_done $default_done
19	19	----> end
17	17	----> end
361	1116	---> __fish_git_prompt_set_color __fish_git_prompt_color_cleanstate
62	62	----> set -l user_variable_name "$argv[1]"
178	178	----> set -l user_variable $$user_variable_name
62	62	----> set -l user_variable_bright
31	31	----> set -l default default_done
62	100	----> switch (count $argv)
38	38	-----> count $argv
53	53	----> set default $___fish_git_prompt_color
38	38	----> set default_done $___fish_git_prompt_color_done
13	13	----> case 2 # One default given, use normal for done
62	98	----> if test (count $user_variable) -eq 2
36	36	-----> count $user_variable
40	40	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
283	1044	---> __fish_git_prompt_set_color __fish_git_prompt_color_invalidstate
45	45	----> set -l user_variable_name "$argv[1]"
110	110	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
27	27	----> set -l default default_done
59	97	----> switch (count $argv)
38	38	-----> count $argv
37	37	----> set default $___fish_git_prompt_color
37	37	----> set default_done $___fish_git_prompt_color_done
13	13	----> case 2 # One default given, use normal for done
67	95	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
37	37	----> if test -n "$user_variable"
49	49	----> set -g $variable $default
44	44	----> set -g $variable_done $default_done
12	12	----> end
11	11	----> end
309	1201	---> __fish_git_prompt_set_color __fish_git_prompt_color_upstream
40	40	----> set -l user_variable_name "$argv[1]"
124	124	----> set -l user_variable $$user_variable_name
28	28	----> set -l user_variable_bright
27	27	----> set -l default default_done
57	93	----> switch (count $argv)
36	36	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
37	37	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
66	94	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
67	67	----> set -l variable_done "$variable"_done
75	75	----> if not set -q $variable
63	63	----> if test -n "$user_variable"
45	45	----> set -g $variable $default
69	69	----> set -g $variable_done $default_done
31	31	----> end
13	13	----> end
128	128	---> if test -n "$__fish_git_prompt_showcolorhints"
367	1495	---> __fish_git_prompt_set_color __fish_git_prompt_color_flags
43	43	----> set -l user_variable_name "$argv[1]"
36	36	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
27	27	----> set -l default default_done
61	139	----> switch (count $argv)
78	78	-----> count $argv
37	37	----> set default $___fish_git_prompt_color
37	37	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
95	232	----> if test (count $user_variable) -eq 2
137	137	-----> count $user_variable
47	47	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
43	43	----> if not set -q $variable
38	38	----> if test -n "$user_variable"
33	33	----> if test -n "$user_variable_bright"
108	198	----> set -g $variable (set_color $user_variable)
90	90	-----> set_color $user_variable
13	13	----> end
75	106	----> set -g $variable_done (set_color normal)
31	31	-----> set_color normal
12	12	----> else
10	10	----> end
397	1312	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch
42	42	----> set -l user_variable_name "$argv[1]"
127	127	----> set -l user_variable $$user_variable_name
44	44	----> set -l user_variable_bright
64	64	----> set -l default default_done
67	106	----> switch (count $argv)
39	39	-----> count $argv
37	37	----> set default $___fish_git_prompt_color
38	38	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
63	98	----> if test (count $user_variable) -eq 2
35	35	-----> count $user_variable
64	64	----> set -l variable _$user_variable_name
86	86	----> set -l variable_done "$variable"_done
46	46	----> if not set -q $variable
37	37	----> if test -n "$user_variable"
47	47	----> set -g $variable $default
44	44	----> set -g $variable_done $default_done
12	12	----> end
11	11	----> end
405	21356	---> __fish_git_prompt_set_color __fish_git_prompt_color_dirtystate  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
43	43	----> set -l user_variable_name "$argv[1]"
20235	20235	----> set -l user_variable $$user_variable_name
40	40	----> set -l user_variable_bright
30	30	----> set -l default default_done
67	119	----> switch (count $argv)
52	52	-----> count $argv
42	42	----> set default "$argv[2]"
41	41	----> set default_done "$argv[3]"
12	12	----> end
68	107	----> if test (count $user_variable) -eq 2
39	39	-----> count $user_variable
40	40	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
43	43	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
53	53	----> set -g $variable $default
49	49	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
295	1101	---> __fish_git_prompt_set_color __fish_git_prompt_color_stagedstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
85	85	----> set -l user_variable_name "$argv[1]"
106	106	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
58	104	----> switch (count $argv)
46	46	-----> count $argv
46	46	----> set default "$argv[2]"
40	40	----> set default_done "$argv[3]"
11	11	----> end
61	88	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
46	46	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
41	41	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
11	11	---> end
311	996	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch_detached (set_color red)
36	36	----> set_color red
42	42	----> set -l user_variable_name "$argv[1]"
110	110	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
53	92	----> switch (count $argv)
39	39	-----> count $argv
37	37	----> set default "$argv[2]"
62	101	----> set default_done (set_color normal)
39	39	-----> set_color normal
12	12	----> case 3 # Both defaults given
58	85	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
409	1450	---> __fish_git_prompt_set_color __fish_git_prompt_color_stashstate      $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
46	46	----> set -l user_variable_name "$argv[1]"
122	122	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
70	115	----> switch (count $argv)
45	45	-----> count $argv
58	58	----> set default "$argv[2]"
39	39	----> set default_done "$argv[3]"
12	12	----> end
182	210	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
51	51	----> set -l variable _$user_variable_name
63	63	----> set -l variable_done "$variable"_done
60	60	----> if not set -q $variable
47	47	----> if test -n "$user_variable"
58	58	----> set -g $variable $default
79	79	----> set -g $variable_done $default_done
16	16	----> end
12	12	----> end
298	1153	---> __fish_git_prompt_set_color __fish_git_prompt_color_untrackedfiles  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
57	57	----> set -l user_variable_name "$argv[1]"
142	142	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
26	26	----> set -l default default_done
61	154	----> switch (count $argv)
93	93	-----> count $argv
41	41	----> set default "$argv[2]"
45	45	----> set default_done "$argv[3]"
14	14	----> end
62	89	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
48	48	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
44	44	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
36	36	--> set -l branch_color $___fish_git_prompt_color_branch
55	55	--> set -l branch_done  $___fish_git_prompt_color_branch_done
147	147	--> if test -n "$__fish_git_prompt_showcolorhints"
31	31	--> if test -n "$w"
27	27	--> if test -n "$i"
26	26	--> if test -n "$s"
26	26	--> if test -n "$u"
110	2837	--> set b (/bin/sh -c 'echo "${1#refs/heads/}"' -- $b)
2727	2727	---> /bin/sh -c 'echo "${1#refs/heads/}"' -- $b
52	52	--> if test -n "$b"
41	41	--> set b "$branch_color$b$branch_done"
12	12	--> end
29	29	--> if test -n "$c"
50	50	--> if test -n "$r"
29	29	--> if test -n "$p"
58	58	--> set -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"
45	45	--> set -l f "$w$i$s$u"
28	28	--> if test -n "$f"
27	27	--> set -l format $argv[1]
47	47	--> if test -z "$format"
31	31	--> set format " (%s)"
11	11	--> end
236	236	--> printf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___git_ps_color_suffix_done"
32	32	-> if begin
4150	4150	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
38	38	-> end
26	26	-> echo
56	56	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
44	109	> __fish_pwd
65	65	-> pwd
63	63	> echo $_ " "; 
70	129	> __fish_pwd
59	59	-> pwd
7400	7400	> git status
503	75848	> fish_prompt
117	117	-> set -l last_status $status
53	53	-> if not set -q __fish_prompt_hostname
55	55	-> if not set -q __fish_prompt_char
110	214	-> set -l normal (set_color normal)
104	104	--> set_color normal
117	166	-> set -l red (set_color red)
49	49	--> set_color red
115	170	-> set -l cyan (set_color cyan)
55	55	--> set_color cyan
97	158	-> set -l white (set_color white)
61	61	--> set_color white
133	188	-> set -l gray (set_color -o cyan)
55	55	--> set_color -o cyan
92	137	-> set -l brwhite (set_color -o white)
45	45	--> set_color -o white
73	527	-> set -g __fish_git_prompt_showdirtystate true
201	454	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
77	77	---> if status --is-interactive
93	93	---> if test $argv[3] = __fish_git_prompt_show_informative_status
69	69	---> commandline -f repaint ^/dev/null
14	14	---> end
66	373	-> set -g __fish_git_prompt_showuntrackedfiles true
152	307	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
40	40	---> if status --is-interactive
63	63	---> if test $argv[3] = __fish_git_prompt_show_informative_status
38	38	---> commandline -f repaint ^/dev/null
14	14	---> end
64	349	-> set -g __fish_git_prompt_showstashstate true
134	285	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
40	40	---> if status --is-interactive
60	60	---> if test $argv[3] = __fish_git_prompt_show_informative_status
38	38	---> commandline -f repaint ^/dev/null
13	13	---> end
72	2715	-> set -g __fish_git_prompt_color green
431	2643	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
45	45	---> if status --is-interactive
52	52	---> set -l var $argv[3]
58	58	---> set -e _$var
59	59	---> set -e _{$var}_done
116	116	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
69	69	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
53	53	---> set -e ___fish_git_prompt_color_$name
57	57	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
51	51	---> set -e ___fish_git_prompt_color_$name
56	56	---> set -e ___fish_git_prompt_color_{$name}_done
29	29	---> end
66	66	---> set -e ___fish_git_prompt_color_$name
67	67	---> set -e ___fish_git_prompt_color_{$name}_done
27	27	---> end
61	61	---> set -e ___fish_git_prompt_color_$name
64	64	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
70	70	---> set -e ___fish_git_prompt_color_$name
63	63	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
70	70	---> set -e ___fish_git_prompt_color_$name
67	67	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
62	62	---> set -e ___fish_git_prompt_color_$name
65	65	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
58	58	---> set -e ___fish_git_prompt_color_$name
60	60	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
58	58	---> set -e ___fish_git_prompt_color_$name
58	58	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
60	60	---> set -e ___fish_git_prompt_color_$name
60	60	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
63	63	---> set -e ___fish_git_prompt_color_$name
61	61	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
58	58	---> set -e ___fish_git_prompt_color_$name
61	61	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
16	16	---> end
49	49	---> commandline -f repaint ^/dev/null
17	17	---> end
79	5473	-> set -g __fish_git_prompt_color_flags red
394	5394	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
62	62	---> if status --is-interactive
58	58	---> set -l var $argv[3]
185	185	---> set -e _$var
143	143	---> set -e _{$var}_done
134	134	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
92	92	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
143	143	---> set -e ___fish_git_prompt_color_$name
144	144	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
141	141	---> set -e ___fish_git_prompt_color_$name
662	662	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
148	148	---> set -e ___fish_git_prompt_color_$name
153	153	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
144	144	---> set -e ___fish_git_prompt_color_$name
141	141	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
133	133	---> set -e ___fish_git_prompt_color_$name
157	157	---> set -e ___fish_git_prompt_color_{$name}_done
25	25	---> end
146	146	---> set -e ___fish_git_prompt_color_$name
147	147	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
143	143	---> set -e ___fish_git_prompt_color_$name
172	172	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
149	149	---> set -e ___fish_git_prompt_color_$name
146	146	---> set -e ___fish_git_prompt_color_{$name}_done
23	23	---> end
142	142	---> set -e ___fish_git_prompt_color_$name
145	145	---> set -e ___fish_git_prompt_color_{$name}_done
21	21	---> end
137	137	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
136	136	---> set -e ___fish_git_prompt_color_$name
146	146	---> set -e ___fish_git_prompt_color_{$name}_done
20	20	---> end
130	130	---> set -e ___fish_git_prompt_color_$name
138	138	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
14	14	---> end
45	45	---> commandline -f repaint ^/dev/null
14	14	---> end
58	58	-> set -l pcolor $gray
57	57	-> if test $last_status -ne 0
179	5778	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
248	5599	--> prompt_pwd
5351	5351	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
919	54524	-> __fish_git_prompt
164	3080	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
2916	2916	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
55	55	--> test -n "$repo_info"; 
10	10	--> or return
44	44	--> set -l git_dir         $repo_info[1]
40	40	--> set -l inside_gitdir   $repo_info[2]
43	43	--> set -l bare_repo       $repo_info[3]
40	40	--> set -l inside_worktree $repo_info[4]
26	26	--> set -l short_sha
85	321	--> if test (count $repo_info) = 5
236	236	---> count $repo_info
52	52	--> set short_sha $repo_info[5]
13	13	--> end
1003	5127	---> __fish_git_prompt_operation_branch_bare $repo_info
53	53	----> set -l git_dir         $argv[1]
40	40	----> set -l inside_gitdir   $argv[2]
38	38	----> set -l bare_repo       $argv[3]
24	24	----> set -l short_sha
69	145	----> if test (count $argv) = 5
76	76	-----> count $argv
40	40	----> set short_sha $argv[5]
12	12	----> end
24	24	----> set -l branch
23	23	----> set -l operation
24	24	----> set -l detached no
31	31	----> set -l bare
33	33	----> set -l step
22	22	----> set -l total
26	26	----> set -l os
67	67	----> if test -d $git_dir/rebase-merge
47	47	----> if test -d $git_dir/rebase-apply
10	10	----> end
42	42	----> if test -n "$step" -a -n "$total"
39	39	----> if test -z "$branch"
181	2863	----> set branch (command git symbolic-ref HEAD ^/dev/null; set os $status)
2459	2459	-----> command git symbolic-ref HEAD ^/dev/null; 
223	223	-----> set os $status
161	161	----> if test $os -ne 0
25	25	----> end
104	104	----> if test "true" = $inside_gitdir
64	64	----> echo $operation
66	66	----> echo $branch
55	55	----> echo $detached
46	46	----> echo $bare
101	101	--> set -l r $rbc[1] # current operation
41	41	--> set -l b $rbc[2] # current branch
35	35	--> set -l detached $rbc[3]
35	35	--> set -l w #dirty working directory
27	27	--> set -l i #staged changes
34	34	--> set -l s #stashes
23	23	--> set -l u #untracked
31	31	--> set -l c $rbc[4] # bare repository
29	29	--> set -l p #upstream
25	25	--> set -l informative_status
167	7136	--> __fish_git_prompt_validate_chars
165	578	---> __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate        '✔'
48	48	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
101	101	----> set -l user_variable $$user_variable_name
72	113	----> if test (count $argv) -ge 3
41	41	-----> count $argv
39	39	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
131	530	---> __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate        '*' '✚'
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
76	76	----> set -l user_variable $$user_variable_name
61	99	----> if test (count $argv) -ge 3
38	38	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
36	36	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
127	516	---> __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate      '#' '✖'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
68	68	----> set -l user_variable $$user_variable_name
67	108	----> if test (count $argv) -ge 3
41	41	-----> count $argv
32	32	----> if test -n "$__fish_git_prompt_show_informative_status"
9	9	----> end
34	34	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
33	33	----> if not set -q $variable
131	588	---> __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate       '+' '●'
37	37	----> set -l user_variable_name "$argv[1]"
29	29	----> set -l char $argv[2]
119	119	----> set -l user_variable $$user_variable_name
67	106	----> if test (count $argv) -ge 3
39	39	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
48	48	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
151	548	---> __fish_git_prompt_set_char __fish_git_prompt_char_stashstate        '$'
42	42	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
93	93	----> set -l user_variable $$user_variable_name
62	120	----> if test (count $argv) -ge 3
58	58	-----> count $argv
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
131	538	---> __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator    ' ' '|'
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
77	77	----> set -l user_variable $$user_variable_name
59	97	----> if test (count $argv) -ge 3
38	38	-----> count $argv
36	36	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
37	37	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
125	513	---> __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles    '%' '…'
40	40	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
70	70	----> set -l user_variable $$user_variable_name
67	103	----> if test (count $argv) -ge 3
36	36	-----> count $argv
33	33	----> if test -n "$__fish_git_prompt_show_informative_status"
9	9	----> end
34	34	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
33	33	----> if not set -q $variable
126	566	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead    '>' '↑'
37	37	----> set -l user_variable_name "$argv[1]"
28	28	----> set -l char $argv[2]
118	118	----> set -l user_variable $$user_variable_name
66	105	----> if test (count $argv) -ge 3
39	39	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
256	881	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind   '<' '↓'
37	37	----> set -l user_variable_name "$argv[1]"
36	36	----> set -l char $argv[2]
110	110	----> set -l user_variable $$user_variable_name
97	161	----> if test (count $argv) -ge 3
64	64	-----> count $argv
46	46	----> if test -n "$__fish_git_prompt_show_informative_status"
14	14	----> end
86	86	----> set -l variable _$user_variable_name
89	89	----> set -l variable_done "$variable"_done
46	46	----> if not set -q $variable
178	642	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
58	58	----> set -l user_variable_name "$argv[1]"
33	33	----> set -l char $argv[2]
123	123	----> set -l user_variable $$user_variable_name
85	129	----> if test (count $argv) -ge 3
44	44	-----> count $argv
42	42	----> set -l variable _$user_variable_name
40	40	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
141	544	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal    '='
41	41	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
114	114	----> set -l user_variable $$user_variable_name
67	104	----> if test (count $argv) -ge 3
37	37	-----> count $argv
39	39	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
135	525	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix   ''
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
102	102	----> set -l user_variable $$user_variable_name
71	108	----> if test (count $argv) -ge 3
37	37	-----> count $argv
38	38	----> set -l variable _$user_variable_name
36	36	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
51	51	--> if test "true" = $inside_worktree
103	103	--> if test -n "$__fish_git_prompt_show_informative_status"
41	41	--> if test -n "$__fish_git_prompt_showdirtystate"
90	2618	--> set -l config (command git config --bool bash.showDirtyState)
2528	2528	---> command git config --bool bash.showDirtyState
63	63	--> if test "$config" != "false"
98	3561	--> set w (__fish_git_prompt_dirty)
178	3463	---> __fish_git_prompt_dirty
29	29	----> set -l dirty
24	24	----> set -l os
3041	3041	----> command git diff --no-ext-diff --quiet --exit-code
90	90	----> set os $status
64	64	----> if test $os -ne 0
37	37	----> echo $dirty
76	4423	--> set i (__fish_git_prompt_staged $short_sha)
155	4347	---> __fish_git_prompt_staged $short_sha
41	41	----> set -l short_sha $argv[1]
26	26	----> set -l staged
43	43	----> if test -n "$short_sha"
4005	4005	----> command git diff-index --cached --quiet HEAD --; 
33	33	----> or set staged $___fish_git_prompt_char_stagedstate
16	16	----> else
28	28	----> echo $staged
12	12	--> end
11	11	--> end
68	68	--> if test -n "$__fish_git_prompt_showstashstate" -a -r $git_dir/refs/stash
105	105	--> if test -n "$__fish_git_prompt_showuntrackedfiles"
112	2588	--> set -l config (command git config --bool bash.showUntrackedFiles)
2476	2476	---> command git config --bool bash.showUntrackedFiles
88	88	--> if test "$config" != false
3176	3176	--> if command git ls-files --others --exclude-standard --error-unmatch -- '*' >/dev/null ^/dev/null
11	11	--> end
11	11	--> end
10	10	--> end
160	160	--> if test -n "$__fish_git_prompt_showupstream" -o "$__fish_git_prompt_show_informative_status"
10	10	--> end
205	15805	--> __fish_git_prompt_validate_colors
319	1280	---> __fish_git_prompt_set_color __fish_git_prompt_color '' ''
48	48	----> set -l user_variable_name "$argv[1]"
40	40	----> set -l user_variable $$user_variable_name
34	34	----> set -l user_variable_bright
31	31	----> set -l default default_done
87	142	----> switch (count $argv)
55	55	-----> count $argv
40	40	----> set default "$argv[2]"
36	36	----> set default_done "$argv[3]"
13	13	----> end
61	95	----> if test (count $user_variable) -eq 2
34	34	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
43	43	----> if not set -q $variable
46	46	----> if test -n "$user_variable"
33	33	----> if test -n "$user_variable_bright"
80	137	----> set -g $variable (set_color $user_variable)
57	57	-----> set_color $user_variable
13	13	----> end
82	112	----> set -g $variable_done (set_color normal)
30	30	-----> set_color normal
11	11	----> else
10	10	----> end
256	990	---> __fish_git_prompt_set_color __fish_git_prompt_color_prefix
42	42	----> set -l user_variable_name "$argv[1]"
109	109	----> set -l user_variable $$user_variable_name
34	34	----> set -l user_variable_bright
28	28	----> set -l default default_done
58	93	----> switch (count $argv)
35	35	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
58	84	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
45	45	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
45	45	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
256	1023	---> __fish_git_prompt_set_color __fish_git_prompt_color_suffix
36	36	----> set -l user_variable_name "$argv[1]"
115	115	----> set -l user_variable $$user_variable_name
31	31	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
35	35	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
54	79	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
43	43	----> set -l variable_done "$variable"_done
49	49	----> if not set -q $variable
43	43	----> if test -n "$user_variable"
59	59	----> set -g $variable $default
52	52	----> set -g $variable_done $default_done
12	12	----> end
19	19	----> end
243	947	---> __fish_git_prompt_set_color __fish_git_prompt_color_bare
37	37	----> set -l user_variable_name "$argv[1]"
115	115	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	86	----> switch (count $argv)
32	32	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
60	86	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
39	39	----> set -g $variable $default
45	45	----> set -g $variable_done $default_done
11	11	----> end
9	9	----> end
252	987	---> __fish_git_prompt_set_color __fish_git_prompt_color_merging
36	36	----> set -l user_variable_name "$argv[1]"
109	109	----> set -l user_variable $$user_variable_name
34	34	----> set -l user_variable_bright
28	28	----> set -l default default_done
58	94	----> switch (count $argv)
36	36	-----> count $argv
37	37	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
76	104	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
45	45	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
10	10	----> end
9	9	----> end
303	973	---> __fish_git_prompt_set_color __fish_git_prompt_color_cleanstate
37	37	----> set -l user_variable_name "$argv[1]"
118	118	----> set -l user_variable $$user_variable_name
35	35	----> set -l user_variable_bright
28	28	----> set -l default default_done
99	149	----> switch (count $argv)
50	50	-----> count $argv
48	48	----> set default $___fish_git_prompt_color
38	38	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
61	88	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
39	39	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
249	953	---> __fish_git_prompt_set_color __fish_git_prompt_color_invalidstate
40	40	----> set -l user_variable_name "$argv[1]"
93	93	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
26	26	----> set -l default default_done
52	85	----> switch (count $argv)
33	33	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
62	89	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
47	47	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
45	45	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
254	982	---> __fish_git_prompt_set_color __fish_git_prompt_color_upstream
36	36	----> set -l user_variable_name "$argv[1]"
105	105	----> set -l user_variable $$user_variable_name
34	34	----> set -l user_variable_bright
28	28	----> set -l default default_done
58	94	----> switch (count $argv)
36	36	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
58	92	----> if test (count $user_variable) -eq 2
34	34	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
45	45	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
39	39	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
110	110	---> if test -n "$__fish_git_prompt_showcolorhints"
275	1168	---> __fish_git_prompt_set_color __fish_git_prompt_color_flags
46	46	----> set -l user_variable_name "$argv[1]"
47	47	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
30	30	----> set -l default default_done
67	125	----> switch (count $argv)
58	58	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
58	88	----> if test (count $user_variable) -eq 2
30	30	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
42	42	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
41	41	----> if test -n "$user_variable_bright"
75	113	----> set -g $variable (set_color $user_variable)
38	38	-----> set_color $user_variable
21	21	----> end
68	95	----> set -g $variable_done (set_color normal)
27	27	-----> set_color normal
11	11	----> else
9	9	----> end
242	940	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch
36	36	----> set -l user_variable_name "$argv[1]"
114	114	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
34	34	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
54	79	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
41	41	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
32	32	----> if test -n "$user_variable"
40	40	----> set -g $variable $default
39	39	----> set -g $variable_done $default_done
10	10	----> end
9	9	----> end
294	1063	---> __fish_git_prompt_set_color __fish_git_prompt_color_dirtystate  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
44	44	----> set -l user_variable_name "$argv[1]"
114	114	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
55	96	----> switch (count $argv)
41	41	-----> count $argv
37	37	----> set default "$argv[2]"
36	36	----> set default_done "$argv[3]"
11	11	----> end
55	86	----> if test (count $user_variable) -eq 2
31	31	-----> count $user_variable
47	47	----> set -l variable _$user_variable_name
40	40	----> set -l variable_done "$variable"_done
50	50	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
44	44	----> set -g $variable $default
50	50	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
270	991	---> __fish_git_prompt_set_color __fish_git_prompt_color_stagedstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
44	44	----> set -l user_variable_name "$argv[1]"
115	115	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
25	25	----> set -l default default_done
54	96	----> switch (count $argv)
42	42	-----> count $argv
37	37	----> set default "$argv[2]"
36	36	----> set default_done "$argv[3]"
11	11	----> end
54	79	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
37	37	----> if test -n "$user_variable"
40	40	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
10	10	----> end
9	9	----> end
9	9	---> end
296	949	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch_detached (set_color red)
27	27	----> set_color red
39	39	----> set -l user_variable_name "$argv[1]"
110	110	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	91	----> switch (count $argv)
37	37	-----> count $argv
36	36	----> set default "$argv[2]"
60	88	----> set default_done (set_color normal)
28	28	-----> set_color normal
11	11	----> case 3 # Both defaults given
54	85	----> if test (count $user_variable) -eq 2
31	31	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
299	1201	---> __fish_git_prompt_set_color __fish_git_prompt_color_stashstate      $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
51	51	----> set -l user_variable_name "$argv[1]"
153	153	----> set -l user_variable $$user_variable_name
29	29	----> set -l user_variable_bright
46	46	----> set -l default default_done
94	174	----> switch (count $argv)
80	80	-----> count $argv
47	47	----> set default "$argv[2]"
39	39	----> set default_done "$argv[3]"
12	12	----> end
59	86	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
49	49	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
284	1034	---> __fish_git_prompt_set_color __fish_git_prompt_color_untrackedfiles  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
41	41	----> set -l user_variable_name "$argv[1]"
115	115	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
25	25	----> set -l default default_done
56	101	----> switch (count $argv)
45	45	-----> count $argv
39	39	----> set default "$argv[2]"
39	39	----> set default_done "$argv[3]"
11	11	----> end
64	91	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
48	48	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
38	38	--> set -l branch_color $___fish_git_prompt_color_branch
36	36	--> set -l branch_done  $___fish_git_prompt_color_branch_done
110	110	--> if test -n "$__fish_git_prompt_showcolorhints"
33	33	--> if test -n "$w"
29	29	--> if test -n "$i"
28	28	--> if test -n "$s"
27	27	--> if test -n "$u"
114	3164	--> set b (/bin/sh -c 'echo "${1#refs/heads/}"' -- $b)
3050	3050	---> /bin/sh -c 'echo "${1#refs/heads/}"' -- $b
53	53	--> if test -n "$b"
54	54	--> set b "$branch_color$b$branch_done"
17	17	--> end
33	33	--> if test -n "$c"
61	61	--> if test -n "$r"
31	31	--> if test -n "$p"
53	53	--> set -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"
35	35	--> set -l f "$w$i$s$u"
30	30	--> if test -n "$f"
29	29	--> set -l format $argv[1]
30	30	--> if test -z "$format"
31	31	--> set format " (%s)"
11	11	--> end
197	197	--> printf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___git_ps_color_suffix_done"
21	21	-> if begin
4090	4090	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
37	37	-> end
27	27	-> echo
58	58	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
44	108	> __fish_pwd
64	64	-> pwd
313	70242	> fish_prompt
44	44	-> set -l last_status $status
30	30	-> if not set -q __fish_prompt_hostname
30	30	-> if not set -q __fish_prompt_char
66	104	-> set -l normal (set_color normal)
38	38	--> set_color normal
58	84	-> set -l red (set_color red)
26	26	--> set_color red
56	81	-> set -l cyan (set_color cyan)
25	25	--> set_color cyan
56	82	-> set -l white (set_color white)
26	26	--> set_color white
56	83	-> set -l gray (set_color -o cyan)
27	27	--> set_color -o cyan
57	84	-> set -l brwhite (set_color -o white)
27	27	--> set_color -o white
46	259	-> set -g __fish_git_prompt_showdirtystate true
100	213	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showdirtystate
33	33	---> if status --is-interactive
44	44	---> if test $argv[3] = __fish_git_prompt_show_informative_status
27	27	---> commandline -f repaint ^/dev/null
9	9	---> end
43	236	-> set -g __fish_git_prompt_showuntrackedfiles true
93	193	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showuntrackedfiles
26	26	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
25	25	---> commandline -f repaint ^/dev/null
9	9	---> end
42	229	-> set -g __fish_git_prompt_showstashstate true
88	187	--> __fish_git_prompt_repaint VARIABLE SET __fish_git_prompt_showstashstate
26	26	---> if status --is-interactive
40	40	---> if test $argv[3] = __fish_git_prompt_show_informative_status
24	24	---> commandline -f repaint ^/dev/null
9	9	---> end
44	1612	-> set -g __fish_git_prompt_color green
216	1568	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color
29	29	---> if status --is-interactive
33	33	---> set -l var $argv[3]
35	35	---> set -e _$var
35	35	---> set -e _{$var}_done
76	76	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
45	45	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
37	37	---> set -e ___fish_git_prompt_color_$name
34	34	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
69	69	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
52	52	---> set -e ___fish_git_prompt_color_$name
51	51	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
67	67	---> set -e ___fish_git_prompt_color_$name
49	49	---> set -e ___fish_git_prompt_color_{$name}_done
13	13	---> end
34	34	---> set -e ___fish_git_prompt_color_$name
34	34	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
12	12	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
32	32	---> set -e ___fish_git_prompt_color_$name
33	33	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
31	31	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
11	11	---> end
30	30	---> set -e ___fish_git_prompt_color_$name
32	32	---> set -e ___fish_git_prompt_color_{$name}_done
10	10	---> end
9	9	---> end
27	27	---> commandline -f repaint ^/dev/null
10	10	---> end
47	4374	-> set -g __fish_git_prompt_color_flags red
525	4327	--> __fish_git_prompt_repaint_color VARIABLE SET __fish_git_prompt_color_flags
32	32	---> if status --is-interactive
33	33	---> set -l var $argv[3]
122	122	---> set -e _$var
131	131	---> set -e _{$var}_done
91	91	---> if test $var = __fish_git_prompt_color -o $var = __fish_git_prompt_color_flags -o $var = __fish_git_prompt_showcolorhints
46	46	---> for name in prefix suffix bare merging branch dirtystate stagedstate invalidstate stashstate untrackedfiles upstream flags
104	104	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
19	19	---> end
398	398	---> set -e ___fish_git_prompt_color_$name
119	119	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
154	154	---> set -e ___fish_git_prompt_color_$name
148	148	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
136	136	---> set -e ___fish_git_prompt_color_$name
135	135	---> set -e ___fish_git_prompt_color_{$name}_done
15	15	---> end
111	111	---> set -e ___fish_git_prompt_color_$name
128	128	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
114	114	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
106	106	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
17	17	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
22	22	---> end
118	118	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
105	105	---> set -e ___fish_git_prompt_color_$name
111	111	---> set -e ___fish_git_prompt_color_{$name}_done
18	18	---> end
104	104	---> set -e ___fish_git_prompt_color_$name
112	112	---> set -e ___fish_git_prompt_color_{$name}_done
16	16	---> end
8	8	---> end
31	31	---> commandline -f repaint ^/dev/null
10	10	---> end
38	38	-> set -l pcolor $gray
37	37	-> if test $last_status -ne 0
206	4645	-> echo -n $red'┌'$cyan$USER$white'@'$cyan$__fish_prompt_hostname $gray(prompt_pwd)$normal
190	4439	--> prompt_pwd
4249	4249	---> echo $PWD | sed -e "s|^$HOME|~|" -e 's|^/private||' -e 's-\([^/.]\)[^/]*/-\1/-g'
850	53710	-> __fish_git_prompt
270	3303	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)
3033	3033	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null
56	56	--> test -n "$repo_info"; 
9	9	--> or return
41	41	--> set -l git_dir         $repo_info[1]
39	39	--> set -l inside_gitdir   $repo_info[2]
38	38	--> set -l bare_repo       $repo_info[3]
35	35	--> set -l inside_worktree $repo_info[4]
62	62	--> set -l short_sha
222	299	--> if test (count $repo_info) = 5
77	77	---> count $repo_info
70	70	--> set short_sha $repo_info[5]
22	22	--> end
782	4357	---> __fish_git_prompt_operation_branch_bare $repo_info
49	49	----> set -l git_dir         $argv[1]
40	40	----> set -l inside_gitdir   $argv[2]
36	36	----> set -l bare_repo       $argv[3]
24	24	----> set -l short_sha
66	115	----> if test (count $argv) = 5
49	49	-----> count $argv
38	38	----> set short_sha $argv[5]
12	12	----> end
24	24	----> set -l branch
23	23	----> set -l operation
24	24	----> set -l detached no
23	23	----> set -l bare
22	22	----> set -l step
32	32	----> set -l total
23	23	----> set -l os
58	58	----> if test -d $git_dir/rebase-merge
46	46	----> if test -d $git_dir/rebase-apply
11	11	----> end
63	63	----> if test -n "$step" -a -n "$total"
69	69	----> if test -z "$branch"
91	2644	----> set branch (command git symbolic-ref HEAD ^/dev/null; set os $status)
2477	2477	-----> command git symbolic-ref HEAD ^/dev/null; 
76	76	-----> set os $status
55	55	----> if test $os -ne 0
10	10	----> end
41	41	----> if test "true" = $inside_gitdir
26	26	----> echo $operation
26	26	----> echo $branch
22	22	----> echo $detached
19	19	----> echo $bare
33	33	--> set -l r $rbc[1] # current operation
33	33	--> set -l b $rbc[2] # current branch
31	31	--> set -l detached $rbc[3]
22	22	--> set -l w #dirty working directory
20	20	--> set -l i #staged changes
20	20	--> set -l s #stashes
23	23	--> set -l u #untracked
28	28	--> set -l c $rbc[4] # bare repository
20	20	--> set -l p #upstream
23	23	--> set -l informative_status
94	7940	--> __fish_git_prompt_validate_chars
188	785	---> __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate        '✔'
38	38	----> set -l user_variable_name "$argv[1]"
29	29	----> set -l char $argv[2]
196	196	----> set -l user_variable $$user_variable_name
106	169	----> if test (count $argv) -ge 3
63	63	-----> count $argv
67	67	----> set -l variable _$user_variable_name
58	58	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
150	605	---> __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate        '*' '✚'
43	43	----> set -l user_variable_name "$argv[1]"
38	38	----> set -l char $argv[2]
110	110	----> set -l user_variable $$user_variable_name
67	107	----> if test (count $argv) -ge 3
40	40	-----> count $argv
36	36	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
132	574	---> __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate      '#' '✖'
40	40	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
105	105	----> set -l user_variable $$user_variable_name
68	109	----> if test (count $argv) -ge 3
41	41	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
128	561	---> __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate       '+' '●'
40	40	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
100	100	----> set -l user_variable $$user_variable_name
63	107	----> if test (count $argv) -ge 3
44	44	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
136	519	---> __fish_git_prompt_set_char __fish_git_prompt_char_stashstate        '$'
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
99	99	----> set -l user_variable $$user_variable_name
65	104	----> if test (count $argv) -ge 3
39	39	-----> count $argv
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
35	35	----> if not set -q $variable
153	670	---> __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator    ' ' '|'
40	40	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
108	108	----> set -l user_variable $$user_variable_name
63	102	----> if test (count $argv) -ge 3
39	39	-----> count $argv
34	34	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
37	37	----> set -l variable _$user_variable_name
102	102	----> set -l variable_done "$variable"_done
53	53	----> if not set -q $variable
242	966	---> __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles    '%' '…'
68	68	----> set -l user_variable_name "$argv[1]"
47	47	----> set -l char $argv[2]
128	128	----> set -l user_variable $$user_variable_name
115	191	----> if test (count $argv) -ge 3
76	76	-----> count $argv
65	65	----> if test -n "$__fish_git_prompt_show_informative_status"
20	20	----> end
73	73	----> set -l variable _$user_variable_name
71	71	----> set -l variable_done "$variable"_done
61	61	----> if not set -q $variable
182	748	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead    '>' '↑'
68	68	----> set -l user_variable_name "$argv[1]"
53	53	----> set -l char $argv[2]
164	164	----> set -l user_variable $$user_variable_name
76	119	----> if test (count $argv) -ge 3
43	43	-----> count $argv
37	37	----> if test -n "$__fish_git_prompt_show_informative_status"
11	11	----> end
39	39	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
37	37	----> if not set -q $variable
135	606	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind   '<' '↓'
61	61	----> set -l user_variable_name "$argv[1]"
34	34	----> set -l char $argv[2]
107	107	----> set -l user_variable $$user_variable_name
68	108	----> if test (count $argv) -ge 3
40	40	-----> count $argv
35	35	----> if test -n "$__fish_git_prompt_show_informative_status"
10	10	----> end
43	43	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
185	718	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
38	38	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
96	96	----> set -l user_variable $$user_variable_name
103	191	----> if test (count $argv) -ge 3
88	88	-----> count $argv
51	51	----> set -l variable _$user_variable_name
63	63	----> set -l variable_done "$variable"_done
63	63	----> if not set -q $variable
144	552	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal    '='
43	43	----> set -l user_variable_name "$argv[1]"
32	32	----> set -l char $argv[2]
103	103	----> set -l user_variable $$user_variable_name
67	106	----> if test (count $argv) -ge 3
39	39	-----> count $argv
50	50	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
36	36	----> if not set -q $variable
147	542	---> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix   ''
39	39	----> set -l user_variable_name "$argv[1]"
31	31	----> set -l char $argv[2]
97	97	----> set -l user_variable $$user_variable_name
67	104	----> if test (count $argv) -ge 3
37	37	-----> count $argv
46	46	----> set -l variable _$user_variable_name
40	40	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
53	53	--> if test "true" = $inside_worktree
137	137	--> if test -n "$__fish_git_prompt_show_informative_status"
39	39	--> if test -n "$__fish_git_prompt_showdirtystate"
94	2549	--> set -l config (command git config --bool bash.showDirtyState)
2455	2455	---> command git config --bool bash.showDirtyState
63	63	--> if test "$config" != "false"
64	3169	--> set w (__fish_git_prompt_dirty)
110	3105	---> __fish_git_prompt_dirty
34	34	----> set -l dirty
24	24	----> set -l os
2809	2809	----> command git diff --no-ext-diff --quiet --exit-code
63	63	----> set os $status
41	41	----> if test $os -ne 0
24	24	----> echo $dirty
70	4277	--> set i (__fish_git_prompt_staged $short_sha)
136	4207	---> __fish_git_prompt_staged $short_sha
39	39	----> set -l short_sha $argv[1]
29	29	----> set -l staged
81	81	----> if test -n "$short_sha"
3840	3840	----> command git diff-index --cached --quiet HEAD --; 
35	35	----> or set staged $___fish_git_prompt_char_stagedstate
17	17	----> else
30	30	----> echo $staged
12	12	--> end
11	11	--> end
69	69	--> if test -n "$__fish_git_prompt_showstashstate" -a -r $git_dir/refs/stash
41	41	--> if test -n "$__fish_git_prompt_showuntrackedfiles"
100	2438	--> set -l config (command git config --bool bash.showUntrackedFiles)
2338	2338	---> command git config --bool bash.showUntrackedFiles
55	55	--> if test "$config" != false
2800	2800	--> if command git ls-files --others --exclude-standard --error-unmatch -- '*' >/dev/null ^/dev/null
11	11	--> end
11	11	--> end
10	10	--> end
152	152	--> if test -n "$__fish_git_prompt_showupstream" -o "$__fish_git_prompt_show_informative_status"
10	10	--> end
245	16697	--> __fish_git_prompt_validate_colors
271	1118	---> __fish_git_prompt_set_color __fish_git_prompt_color '' ''
48	48	----> set -l user_variable_name "$argv[1]"
41	41	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
26	26	----> set -l default default_done
58	98	----> switch (count $argv)
40	40	-----> count $argv
49	49	----> set default "$argv[2]"
32	32	----> set default_done "$argv[3]"
11	11	----> end
55	85	----> if test (count $user_variable) -eq 2
30	30	-----> count $user_variable
35	35	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
37	37	----> if test -n "$user_variable"
30	30	----> if test -n "$user_variable_bright"
76	128	----> set -g $variable (set_color $user_variable)
52	52	-----> set_color $user_variable
11	11	----> end
69	96	----> set -g $variable_done (set_color normal)
27	27	-----> set_color normal
11	11	----> else
10	10	----> end
254	1050	---> __fish_git_prompt_set_color __fish_git_prompt_color_prefix
37	37	----> set -l user_variable_name "$argv[1]"
114	114	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
25	25	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
33	33	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
56	90	----> if test (count $user_variable) -eq 2
34	34	-----> count $user_variable
63	63	----> set -l variable _$user_variable_name
61	61	----> set -l variable_done "$variable"_done
43	43	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
58	58	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
12	12	----> end
18	18	----> end
240	961	---> __fish_git_prompt_set_color __fish_git_prompt_color_suffix
37	37	----> set -l user_variable_name "$argv[1]"
121	121	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	87	----> switch (count $argv)
33	33	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
35	35	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
62	87	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
34	34	----> set -l variable_done "$variable"_done
39	39	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
45	45	----> set -g $variable $default
43	43	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
269	1045	---> __fish_git_prompt_set_color __fish_git_prompt_color_bare
37	37	----> set -l user_variable_name "$argv[1]"
108	108	----> set -l user_variable $$user_variable_name
34	34	----> set -l user_variable_bright
27	27	----> set -l default default_done
57	93	----> switch (count $argv)
36	36	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
37	37	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
57	84	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
37	37	----> set -l variable _$user_variable_name
44	44	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
63	63	----> set -g $variable $default
45	45	----> set -g $variable_done $default_done
31	31	----> end
17	17	----> end
292	1186	---> __fish_git_prompt_set_color __fish_git_prompt_color_merging
43	43	----> set -l user_variable_name "$argv[1]"
113	113	----> set -l user_variable $$user_variable_name
86	86	----> set -l user_variable_bright
71	71	----> set -l default default_done
65	136	----> switch (count $argv)
71	71	-----> count $argv
40	40	----> set default $___fish_git_prompt_color
38	38	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
70	98	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
35	35	----> if test -n "$user_variable"
45	45	----> set -g $variable $default
41	41	----> set -g $variable_done $default_done
10	10	----> end
9	9	----> end
266	867	---> __fish_git_prompt_set_color __fish_git_prompt_color_cleanstate
37	37	----> set -l user_variable_name "$argv[1]"
110	110	----> set -l user_variable $$user_variable_name
34	34	----> set -l user_variable_bright
28	28	----> set -l default default_done
58	94	----> switch (count $argv)
36	36	-----> count $argv
37	37	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
65	93	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
44	44	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
298	1060	---> __fish_git_prompt_set_color __fish_git_prompt_color_invalidstate
41	41	----> set -l user_variable_name "$argv[1]"
106	106	----> set -l user_variable $$user_variable_name
40	40	----> set -l user_variable_bright
26	26	----> set -l default default_done
54	86	----> switch (count $argv)
32	32	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
33	33	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
70	97	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
54	54	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
41	41	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
51	51	----> set -g $variable $default
50	50	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
250	953	---> __fish_git_prompt_set_color __fish_git_prompt_color_upstream
37	37	----> set -l user_variable_name "$argv[1]"
108	108	----> set -l user_variable $$user_variable_name
32	32	----> set -l user_variable_bright
26	26	----> set -l default default_done
53	92	----> switch (count $argv)
39	39	-----> count $argv
34	34	----> set default $___fish_git_prompt_color
35	35	----> set default_done $___fish_git_prompt_color_done
11	11	----> case 2 # One default given, use normal for done
55	80	----> if test (count $user_variable) -eq 2
25	25	-----> count $user_variable
36	36	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
45	45	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
40	40	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
10	10	----> end
9	9	----> end
111	111	---> if test -n "$__fish_git_prompt_showcolorhints"
341	1321	---> __fish_git_prompt_set_color __fish_git_prompt_color_flags
88	88	----> set -l user_variable_name "$argv[1]"
64	64	----> set -l user_variable $$user_variable_name
27	27	----> set -l user_variable_bright
27	27	----> set -l default default_done
58	95	----> switch (count $argv)
37	37	-----> count $argv
37	37	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
68	99	----> if test (count $user_variable) -eq 2
31	31	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
37	37	----> if test -n "$user_variable"
37	37	----> if test -n "$user_variable_bright"
73	114	----> set -g $variable (set_color $user_variable)
41	41	-----> set_color $user_variable
13	13	----> end
100	129	----> set -g $variable_done (set_color normal)
29	29	-----> set_color normal
24	24	----> else
23	23	----> end
332	1146	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch
45	45	----> set -l user_variable_name "$argv[1]"
154	154	----> set -l user_variable $$user_variable_name
29	29	----> set -l user_variable_bright
27	27	----> set -l default default_done
58	94	----> switch (count $argv)
36	36	-----> count $argv
36	36	----> set default $___fish_git_prompt_color
36	36	----> set default_done $___fish_git_prompt_color_done
12	12	----> case 2 # One default given, use normal for done
69	97	----> if test (count $user_variable) -eq 2
28	28	-----> count $user_variable
40	40	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
43	43	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
60	60	----> set -g $variable $default
44	44	----> set -g $variable_done $default_done
12	12	----> end
11	11	----> end
286	1033	---> __fish_git_prompt_set_color __fish_git_prompt_color_dirtystate  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
42	42	----> set -l user_variable_name "$argv[1]"
108	108	----> set -l user_variable $$user_variable_name
35	35	----> set -l user_variable_bright
26	26	----> set -l default default_done
58	104	----> switch (count $argv)
46	46	-----> count $argv
39	39	----> set default "$argv[2]"
37	37	----> set default_done "$argv[3]"
12	12	----> end
58	90	----> if test (count $user_variable) -eq 2
32	32	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
37	37	----> set -l variable_done "$variable"_done
40	40	----> if not set -q $variable
34	34	----> if test -n "$user_variable"
42	42	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
328	1236	---> __fish_git_prompt_set_color __fish_git_prompt_color_stagedstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
41	41	----> set -l user_variable_name "$argv[1]"
108	108	----> set -l user_variable $$user_variable_name
26	26	----> set -l user_variable_bright
33	33	----> set -l default default_done
55	104	----> switch (count $argv)
49	49	-----> count $argv
39	39	----> set default "$argv[2]"
38	38	----> set default_done "$argv[3]"
12	12	----> end
58	84	----> if test (count $user_variable) -eq 2
26	26	-----> count $user_variable
81	81	----> set -l variable _$user_variable_name
66	66	----> set -l variable_done "$variable"_done
84	84	----> if not set -q $variable
42	42	----> if test -n "$user_variable"
80	80	----> set -g $variable $default
48	48	----> set -g $variable_done $default_done
12	12	----> end
10	10	----> end
12	12	---> end
329	1074	---> __fish_git_prompt_set_color __fish_git_prompt_color_branch_detached (set_color red)
48	48	----> set_color red
44	44	----> set -l user_variable_name "$argv[1]"
119	119	----> set -l user_variable $$user_variable_name
28	28	----> set -l user_variable_bright
33	33	----> set -l default default_done
55	97	----> switch (count $argv)
42	42	-----> count $argv
38	38	----> set default "$argv[2]"
69	103	----> set default_done (set_color normal)
34	34	-----> set_color normal
14	14	----> case 3 # Both defaults given
64	93	----> if test (count $user_variable) -eq 2
29	29	-----> count $user_variable
47	47	----> set -l variable _$user_variable_name
39	39	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
283	1052	---> __fish_git_prompt_set_color __fish_git_prompt_color_stashstate      $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
42	42	----> set -l user_variable_name "$argv[1]"
127	127	----> set -l user_variable $$user_variable_name
28	28	----> set -l user_variable_bright
26	26	----> set -l default default_done
57	103	----> switch (count $argv)
46	46	-----> count $argv
42	42	----> set default "$argv[2]"
43	43	----> set default_done "$argv[3]"
14	14	----> end
60	87	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
53	53	----> set -l variable _$user_variable_name
35	35	----> set -l variable_done "$variable"_done
38	38	----> if not set -q $variable
33	33	----> if test -n "$user_variable"
39	39	----> set -g $variable $default
40	40	----> set -g $variable_done $default_done
10	10	----> end
9	9	----> end
318	1227	---> __fish_git_prompt_set_color __fish_git_prompt_color_untrackedfiles  $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
66	66	----> set -l user_variable_name "$argv[1]"
182	182	----> set -l user_variable $$user_variable_name
36	36	----> set -l user_variable_bright
44	44	----> set -l default default_done
74	124	----> switch (count $argv)
50	50	-----> count $argv
52	52	----> set default "$argv[2]"
40	40	----> set default_done "$argv[3]"
12	12	----> end
60	87	----> if test (count $user_variable) -eq 2
27	27	-----> count $user_variable
38	38	----> set -l variable _$user_variable_name
38	38	----> set -l variable_done "$variable"_done
42	42	----> if not set -q $variable
36	36	----> if test -n "$user_variable"
49	49	----> set -g $variable $default
42	42	----> set -g $variable_done $default_done
11	11	----> end
10	10	----> end
38	38	--> set -l branch_color $___fish_git_prompt_color_branch
37	37	--> set -l branch_done  $___fish_git_prompt_color_branch_done
113	113	--> if test -n "$__fish_git_prompt_showcolorhints"
37	37	--> if test -n "$w"
30	30	--> if test -n "$i"
27	27	--> if test -n "$s"
28	28	--> if test -n "$u"
110	2734	--> set b (/bin/sh -c 'echo "${1#refs/heads/}"' -- $b)
2624	2624	---> /bin/sh -c 'echo "${1#refs/heads/}"' -- $b
51	51	--> if test -n "$b"
43	43	--> set b "$branch_color$b$branch_done"
12	12	--> end
30	30	--> if test -n "$c"
28	28	--> if test -n "$r"
28	28	--> if test -n "$p"
54	54	--> set -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"
33	33	--> set -l f "$w$i$s$u"
29	29	--> if test -n "$f"
27	27	--> set -l format $argv[1]
29	29	--> if test -z "$format"
29	29	--> set format " (%s)"
11	11	--> end
189	189	--> printf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___git_ps_color_suffix_done"
20	20	-> if begin
4018	4018	-> git log -n 1 ^/dev/null | grep -qc "\-\-wip\-\-"; 
34	34	-> end
37	37	-> echo
58	58	-> echo -n $red'└'$pcolor$__fish_prompt_char $normal
31	31	> echo $_ " "; 
44	109	> __fish_pwd
65	65	-> pwd
